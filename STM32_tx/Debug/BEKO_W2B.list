
BEKO_W2B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae44  0800ae44  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae4c  0800ae4c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800ae54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  2000008c  0800aee0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  0800aee0  00020c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001822c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003776  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d99d  00000000  00000000  0003de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192c1  00000000  00000000  0006b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4f8  00000000  00000000  00084a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181f86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005518  00000000  00000000  00181fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abec 	.word	0x0800abec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800abec 	.word	0x0800abec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <app_main>:

/**
 * Main application entry point.
 */
void app_main( void )
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af0a      	add	r7, sp, #40	; 0x28
    // Target board initialisation
    BoardInitMcu( );
 8000eb6:	f004 ff2f 	bl	8005d18 <BoardInitMcu>
    BoardInitPeriph( );
 8000eba:	f004 fef7 	bl	8005cac <BoardInitPeriph>

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <app_main+0xb8>)
 8000ec0:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <app_main+0xbc>)
 8000ec2:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <app_main+0xb8>)
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <app_main+0xc0>)
 8000ec8:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <app_main+0xb8>)
 8000ecc:	4a29      	ldr	r2, [pc, #164]	; (8000f74 <app_main+0xc4>)
 8000ece:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <app_main+0xb8>)
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <app_main+0xc8>)
 8000ed4:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <app_main+0xb8>)
 8000ed8:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <app_main+0xcc>)
 8000eda:	611a      	str	r2, [r3, #16]

    Radio.Init( &RadioEvents );
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <app_main+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <app_main+0xb8>)
 8000ee2:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <app_main+0xd0>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	4826      	ldr	r0, [pc, #152]	; (8000f84 <app_main+0xd4>)
 8000eea:	4798      	blx	r3
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

#elif defined( USE_MODEM_FSK )

    Radio.SetTxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <app_main+0xd0>)
 8000eee:	69dc      	ldr	r4, [r3, #28]
 8000ef0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ef4:	9308      	str	r3, [sp, #32]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9307      	str	r3, [sp, #28]
 8000efa:	2300      	movs	r3, #0
 8000efc:	9306      	str	r3, [sp, #24]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9305      	str	r3, [sp, #20]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9304      	str	r3, [sp, #16]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9303      	str	r3, [sp, #12]
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	47a0      	blx	r4
						0,								/* Number of symbols bewteen each hop. FSK: N/A ( set to 0 ) */
						0,								/* Inverts IQ signals (LoRa only). FSK: N/A ( set to 0 ) */
						3000							/* Transmission timeout [ms] */
	);
    
    Radio.SetRxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <app_main+0xd0>)
 8000f26:	699c      	ldr	r4, [r3, #24]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9308      	str	r3, [sp, #32]
 8000f30:	2300      	movs	r3, #0
 8000f32:	9307      	str	r3, [sp, #28]
 8000f34:	2300      	movs	r3, #0
 8000f36:	9306      	str	r3, [sp, #24]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9305      	str	r3, [sp, #20]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9304      	str	r3, [sp, #16]
 8000f40:	2300      	movs	r3, #0
 8000f42:	9303      	str	r3, [sp, #12]
 8000f44:	2300      	movs	r3, #0
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2305      	movs	r3, #5
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <app_main+0xd8>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f56:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	47a0      	blx	r4

//    while(1)
//    {
//    	printf("Infinite loop. This should never happen!\r\n");
//    }
}
 8000f5e:	bf00      	nop
 8000f60:	3704      	adds	r7, #4
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200004a8 	.word	0x200004a8
 8000f6c:	08000fb1 	.word	0x08000fb1
 8000f70:	08000fdd 	.word	0x08000fdd
 8000f74:	08001049 	.word	0x08001049
 8000f78:	08001075 	.word	0x08001075
 8000f7c:	0800109d 	.word	0x0800109d
 8000f80:	0800ac74 	.word	0x0800ac74
 8000f84:	33bca100 	.word	0x33bca100
 8000f88:	00014585 	.word	0x00014585

08000f8c <tx_message>:
	uint8_t txt[] = "0000000";
	Radio.Send( txt, sizeof(txt) );
}

void tx_message(uint8_t* msg, size_t size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    Radio.Send(msg, size);
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <tx_message+0x20>)
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	4798      	blx	r3
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800ac74 	.word	0x0800ac74

08000fb0 <OnTxDone>:
	}

}

void OnTxDone( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <OnTxDone+0x20>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4798      	blx	r3
    State = TX;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <OnTxDone+0x24>)
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txdone++;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <OnTxDone+0x28>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <OnTxDone+0x28>)
 8000fc8:	60d3      	str	r3, [r2, #12]
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800ac74 	.word	0x0800ac74
 8000fd4:	200000a8 	.word	0x200000a8
 8000fd8:	20000494 	.word	0x20000494

08000fdc <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	817b      	strh	r3, [r7, #10]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	813b      	strh	r3, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
    BufferSize = size;
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <OnRxDone+0x54>)
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <OnRxDone+0x54>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <OnRxDone+0x58>)
 8001006:	f008 fd03 	bl	8009a10 <memcpy>
    RssiValue = rssi;
 800100a:	893b      	ldrh	r3, [r7, #8]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <OnRxDone+0x5c>)
 8001010:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <OnRxDone+0x60>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	7013      	strb	r3, [r2, #0]
    State = RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <OnRxDone+0x64>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxdone++;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <OnRxDone+0x68>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <OnRxDone+0x68>)
 8001026:	6013      	str	r3, [r2, #0]
//    Radio.Rx(0);
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000
 8001034:	200000ac 	.word	0x200000ac
 8001038:	200000a9 	.word	0x200000a9
 800103c:	200000aa 	.word	0x200000aa
 8001040:	200000a8 	.word	0x200000a8
 8001044:	20000494 	.word	0x20000494

08001048 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <OnTxTimeout+0x20>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	4798      	blx	r3
    State = TX_TIMEOUT;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <OnTxTimeout+0x24>)
 8001054:	2205      	movs	r2, #5
 8001056:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txtimeout++;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <OnTxTimeout+0x28>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	3301      	adds	r3, #1
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <OnTxTimeout+0x28>)
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800ac74 	.word	0x0800ac74
 800106c:	200000a8 	.word	0x200000a8
 8001070:	20000494 	.word	0x20000494

08001074 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    State = RX_TIMEOUT;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <OnRxTimeout+0x20>)
 800107a:	2202      	movs	r2, #2
 800107c:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxtimeout++;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <OnRxTimeout+0x24>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	3301      	adds	r3, #1
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <OnRxTimeout+0x24>)
 8001086:	6053      	str	r3, [r2, #4]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000a8 	.word	0x200000a8
 8001098:	20000494 	.word	0x20000494

0800109c <OnRxError>:

void OnRxError( void )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    State = RX_ERROR;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <OnRxError+0x20>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxerror++;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <OnRxError+0x24>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <OnRxError+0x24>)
 80010ae:	6093      	str	r3, [r2, #8]
    Radio.Rx(0);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <OnRxError+0x28>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	2000      	movs	r0, #0
 80010b6:	4798      	blx	r3
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000a8 	.word	0x200000a8
 80010c0:	20000494 	.word	0x20000494
 80010c4:	0800ac74 	.word	0x0800ac74

080010c8 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b0d      	cmp	r3, #13
 80010d6:	d002      	beq.n	80010de <line_append+0x16>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d11c      	bne.n	8001118 <line_append+0x50>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <line_append+0x7c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d029      	beq.n	800113a <line_append+0x72>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <line_append+0x7c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <line_append+0x80>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("Otrzymano: %s\r\n", line_buffer);
 80010f0:	4915      	ldr	r1, [pc, #84]	; (8001148 <line_append+0x80>)
 80010f2:	4816      	ldr	r0, [pc, #88]	; (800114c <line_append+0x84>)
 80010f4:	f008 fca2 	bl	8009a3c <iprintf>
			tx_message(line_buffer, line_length);
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <line_append+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <line_append+0x80>)
 8001100:	f7ff ff44 	bl	8000f8c <tx_message>
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <line_append+0x7c>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
			memset(line_buffer, 0, LINE_MAX_LENGTH + 1);
 800110a:	f240 3221 	movw	r2, #801	; 0x321
 800110e:	2100      	movs	r1, #0
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <line_append+0x80>)
 8001112:	f008 fc8b 	bl	8009a2c <memset>
		if (line_length > 0) {
 8001116:	e010      	b.n	800113a <line_append+0x72>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <line_append+0x7c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001120:	d302      	bcc.n	8001128 <line_append+0x60>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <line_append+0x7c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <line_append+0x7c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4905      	ldr	r1, [pc, #20]	; (8001144 <line_append+0x7c>)
 8001130:	600a      	str	r2, [r1, #0]
 8001132:	4905      	ldr	r1, [pc, #20]	; (8001148 <line_append+0x80>)
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	54ca      	strb	r2, [r1, r3]
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200008f4 	.word	0x200008f4
 8001148:	200005d0 	.word	0x200005d0
 800114c:	0800ac04 	.word	0x0800ac04

08001150 <__io_putchar>:

int __io_putchar(int ch)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001158:	1d39      	adds	r1, r7, #4
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	2201      	movs	r2, #1
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <__io_putchar+0x20>)
 8001162:	f003 ffd5 	bl	8005110 <HAL_UART_Transmit>
    return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000054c 	.word	0x2000054c

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fb5d 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f81b 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 f903 	bl	800138c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001186:	f000 f8d1 	bl	800132c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800118a:	f000 f869 	bl	8001260 <MX_RTC_Init>
  MX_SPI1_Init();
 800118e:	f000 f88f 	bl	80012b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8001192:	f7ff fe8d 	bl	8000eb0 <app_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 8001196:	1df9      	adds	r1, r7, #7
 8001198:	2300      	movs	r3, #0
 800119a:	2201      	movs	r2, #1
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <main+0x40>)
 800119e:	f004 f84b 	bl	8005238 <HAL_UART_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f6      	bne.n	8001196 <main+0x22>
	  		  line_append(value);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff8c 	bl	80010c8 <line_append>
  {
 80011b0:	e7f1      	b.n	8001196 <main+0x22>
 80011b2:	bf00      	nop
 80011b4:	2000054c 	.word	0x2000054c

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2244      	movs	r2, #68	; 0x44
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 fc30 	bl	8009a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011de:	f000 fec5 	bl	8001f6c <HAL_PWREx_ControlVoltageScaling>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e8:	f000 f922 	bl	8001430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011ec:	230a      	movs	r3, #10
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2310      	movs	r3, #16
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800120a:	230a      	movs	r3, #10
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120e:	2307      	movs	r3, #7
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fefa 	bl	8002018 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800122a:	f000 f901 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2303      	movs	r3, #3
 8001234:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	2104      	movs	r1, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fac2 	bl	80027d0 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001252:	f000 f8ed 	bl	8001430 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3758      	adds	r7, #88	; 0x58
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_RTC_Init+0x48>)
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_RTC_Init+0x4c>)
 8001268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_RTC_Init+0x48>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_RTC_Init+0x48>)
 8001272:	227f      	movs	r2, #127	; 0x7f
 8001274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_RTC_Init+0x48>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_RTC_Init+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_RTC_Init+0x48>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_RTC_Init+0x48>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_RTC_Init+0x48>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_RTC_Init+0x48>)
 8001296:	f002 f97b 	bl	8003590 <HAL_RTC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80012a0:	f000 f8c6 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200004c4 	.word	0x200004c4
 80012ac:	40002800 	.word	0x40002800

080012b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_SPI1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_SPI1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_SPI1_Init+0x74>)
 80012bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_SPI1_Init+0x74>)
 80012ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_SPI1_Init+0x74>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_SPI1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_SPI1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_SPI1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_SPI1_Init+0x74>)
 80012fe:	2207      	movs	r2, #7
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_SPI1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_SPI1_Init+0x74>)
 800130a:	2208      	movs	r2, #8
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_SPI1_Init+0x74>)
 8001310:	f002 ff9f 	bl	8004252 <HAL_SPI_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 f889 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200004e8 	.word	0x200004e8
 8001328:	40013000 	.word	0x40013000

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <MX_USART2_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001370:	f003 fe80 	bl	8005074 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800137a:	f000 f859 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000054c 	.word	0x2000054c
 8001388:	40004400 	.word	0x40004400

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_GPIO_Init+0x9c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_GPIO_Init+0xa0>)
 800141a:	f000 fbbf 	bl	8001b9c <HAL_GPIO_Init>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	48000800 	.word	0x48000800

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x44>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x44>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x44>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x44>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0a4      	sub	sp, #144	; 0x90
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2288      	movs	r2, #136	; 0x88
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f008 fac9 	bl	8009a2c <memset>
  if(hrtc->Instance==RTC)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_RTC_MspInit+0x5c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d118      	bne.n	80014d6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fbae 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014c2:	f7ff ffb5 	bl	8001430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_RTC_MspInit+0x60>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_RTC_MspInit+0x60>)
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3790      	adds	r7, #144	; 0x90
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40002800 	.word	0x40002800
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_SPI_MspInit+0x7c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d128      	bne.n	800155c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SPI_MspInit+0x80>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <HAL_SPI_MspInit+0x80>)
 8001510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001514:	6613      	str	r3, [r2, #96]	; 0x60
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_SPI_MspInit+0x80>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_SPI_MspInit+0x80>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_SPI_MspInit+0x80>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_SPI_MspInit+0x80>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23e0      	movs	r3, #224	; 0xe0
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800154a:	2305      	movs	r3, #5
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f000 fb20 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013000 	.word	0x40013000
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2288      	movs	r2, #136	; 0x88
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 fa4d 	bl	8009a2c <memset>
  if(huart->Instance==USART2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_UART_MspInit+0xb0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d13b      	bne.n	8001614 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb35 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b4:	f7ff ff3c 	bl	8001430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_UART_MspInit+0xb4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e8:	230c      	movs	r3, #12
 80015ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001600:	2307      	movs	r3, #7
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f000 fac4 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	37b0      	adds	r7, #176	; 0xb0
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40004400 	.word	0x40004400
 8001620:	40021000 	.word	0x40021000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f93e 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
  }

  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fd3f 	bl	8001150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
  }
  return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001712:	605a      	str	r2, [r3, #4]
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_isatty>:

int _isatty(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f008 f91a 	bl	80099bc <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20018000 	.word	0x20018000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200008f8 	.word	0x200008f8
 80017bc:	20000c78 	.word	0x20000c78

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f008 f8d9 	bl	80099c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fcad 	bl	8001174 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001828:	0800ae54 	.word	0x0800ae54
  ldr r2, =_sbss
 800182c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001830:	20000c74 	.word	0x20000c74

08001834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_2_IRQHandler>
	...

08001838 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_Init+0x3c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x3c>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f962 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001854:	2000      	movs	r0, #0
 8001856:	f000 f80f 	bl	8001878 <HAL_InitTick>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	e001      	b.n	800186a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001866:	f7ff fde9 	bl	800143c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_InitTick+0x70>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_InitTick+0x6c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f96d 	bl	8001b82 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d809      	bhi.n	80018c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f937 	bl	8001b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_InitTick+0x74>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e007      	b.n	80018d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e004      	b.n	80018d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e001      	b.n	80018d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000004 	.word	0x20000004
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	200008fc 	.word	0x200008fc

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200008fc 	.word	0x200008fc

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000000c 	.word	0x2000000c

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff3e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff8e 	bl	8001a6c <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5d 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff31 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa2 	bl	8001ad4 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e17f      	b.n	8001eac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8171 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x40>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d118      	bne.n	8001c7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	6939      	ldr	r1, [r7, #16]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80ac 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a5e      	ldr	r2, [pc, #376]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d66:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x242>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_GPIO_Init+0x340>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <HAL_GPIO_Init+0x344>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_GPIO_Init+0x348>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00c      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00a      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dca:	2305      	movs	r3, #5
 8001dcc:	e008      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dde:	2300      	movs	r3, #0
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4093      	lsls	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df0:	4937      	ldr	r1, [pc, #220]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e22:	4a32      	ldr	r2, [pc, #200]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f ae78 	bne.w	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	48001000 	.word	0x48001000
 8001ee4:	48001400 	.word	0x48001400
 8001ee8:	48001800 	.word	0x48001800
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 f984 	bl	800624c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40007000 	.word	0x40007000

08001f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7a:	d130      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f88:	d038      	beq.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2232      	movs	r2, #50	; 0x32
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb0:	e002      	b.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d102      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f2      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d110      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fea:	d007      	beq.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40007000 	.word	0x40007000
 8002010:	20000004 	.word	0x20000004
 8002014:	431bde83 	.word	0x431bde83

08002018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e3ca      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202a:	4b97      	ldr	r3, [pc, #604]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002034:	4b94      	ldr	r3, [pc, #592]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80e4 	beq.w	8002214 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_RCC_OscConfig+0x4a>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	f040 808b 	bne.w	8002170 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 8087 	bne.w	8002170 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002062:	4b89      	ldr	r3, [pc, #548]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e3a2      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4b82      	ldr	r3, [pc, #520]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_RCC_OscConfig+0x7c>
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002092:	e005      	b.n	80020a0 <HAL_RCC_OscConfig+0x88>
 8002094:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d223      	bcs.n	80020ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd55 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e383      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b8:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a72      	ldr	r2, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	496d      	ldr	r1, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4968      	ldr	r1, [pc, #416]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
 80020ea:	e025      	b.n	8002138 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	4b66      	ldr	r3, [pc, #408]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a65      	ldr	r2, [pc, #404]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4960      	ldr	r1, [pc, #384]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	495b      	ldr	r1, [pc, #364]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fd15 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e343      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002138:	f000 fc4a 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	4950      	ldr	r1, [pc, #320]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	4a4e      	ldr	r2, [pc, #312]	; (8002290 <HAL_RCC_OscConfig+0x278>)
 8002156:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fb8b 	bl	8001878 <HAL_InitTick>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d052      	beq.n	8002212 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	e327      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a42      	ldr	r2, [pc, #264]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002184:	f7ff fbc8 	bl	8001918 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800218c:	f7ff fbc4 	bl	8001918 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e310      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	4b3a      	ldr	r3, [pc, #232]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a36      	ldr	r2, [pc, #216]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4931      	ldr	r1, [pc, #196]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	492c      	ldr	r1, [pc, #176]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	e01a      	b.n	8002214 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb95 	bl	8001918 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f2:	f7ff fb91 	bl	8001918 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e2dd      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x1da>
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002212:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d074      	beq.n	800230a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b08      	cmp	r3, #8
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x21a>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d10e      	bne.n	800224a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d10b      	bne.n	800224a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d064      	beq.n	8002308 <HAL_RCC_OscConfig+0x2f0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d160      	bne.n	8002308 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e2ba      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x24a>
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e026      	b.n	80022b0 <HAL_RCC_OscConfig+0x298>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226a:	d115      	bne.n	8002298 <HAL_RCC_OscConfig+0x280>
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 8002272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x298>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	0800ac14 	.word	0x0800ac14
 8002290:	20000004 	.word	0x20000004
 8002294:	20000008 	.word	0x20000008
 8002298:	4ba0      	ldr	r3, [pc, #640]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a9f      	ldr	r2, [pc, #636]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b9d      	ldr	r3, [pc, #628]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a9c      	ldr	r2, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fb2e 	bl	8001918 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fb2a 	bl	8001918 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e276      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	4b92      	ldr	r3, [pc, #584]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2a8>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb1a 	bl	8001918 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fb16 	bl	8001918 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e262      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2d0>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d060      	beq.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x310>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d119      	bne.n	8002356 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d116      	bne.n	8002356 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002328:	4b7c      	ldr	r3, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_OscConfig+0x328>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e23f      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	4973      	ldr	r1, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	e040      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d023      	beq.n	80023a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235e:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff fad5 	bl	8001918 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff fad1 	bl	8001918 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e21d      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	495f      	ldr	r1, [pc, #380]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e018      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5c      	ldr	r2, [pc, #368]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7ff fab1 	bl	8001918 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7ff faad 	bl	8001918 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1f9      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03c      	beq.n	800245e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	4a4a      	ldr	r2, [pc, #296]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff fa8c 	bl	8001918 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fa88 	bl	8001918 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1d4      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCC_OscConfig+0x3ec>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	4a3b      	ldr	r2, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7ff fa6f 	bl	8001918 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243e:	f7ff fa6b 	bl	8001918 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1b7      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80a6 	beq.w	80025b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10d      	bne.n	8002498 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	6593      	str	r3, [r2, #88]	; 0x58
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x508>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d118      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_OscConfig+0x508>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x508>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b0:	f7ff fa32 	bl	8001918 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b8:	f7ff fa2e 	bl	8001918 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e17a      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_OscConfig+0x508>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4d8>
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ee:	e029      	b.n	8002544 <HAL_RCC_OscConfig+0x52c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d115      	bne.n	8002524 <HAL_RCC_OscConfig+0x50c>
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_RCC_OscConfig+0x504>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a03      	ldr	r2, [pc, #12]	; (800251c <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x52c>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	4b9c      	ldr	r3, [pc, #624]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a9b      	ldr	r2, [pc, #620]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002534:	4b98      	ldr	r3, [pc, #608]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a97      	ldr	r2, [pc, #604]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d016      	beq.n	800257a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff f9e4 	bl	8001918 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7ff f9e0 	bl	8001918 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e12a      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ed      	beq.n	8002554 <HAL_RCC_OscConfig+0x53c>
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f9cd 	bl	8001918 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f9c9 	bl	8001918 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e113      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002598:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ed      	bne.n	8002582 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a79      	ldr	r2, [pc, #484]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80fe 	beq.w	80027be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	f040 80d0 	bne.w	800276c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025cc:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d130      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d127      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11f      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800260c:	2a07      	cmp	r2, #7
 800260e:	bf14      	ite	ne
 8002610:	2201      	movne	r2, #1
 8002612:	2200      	moveq	r2, #0
 8002614:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002616:	4293      	cmp	r3, r2
 8002618:	d113      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d109      	bne.n	8002642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d06e      	beq.n	8002720 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d069      	beq.n	800271c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0ad      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002670:	f7ff f952 	bl	8001918 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff f94e 	bl	8001918 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e09a      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002696:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x784>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026b0:	0212      	lsls	r2, r2, #8
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0552      	lsls	r2, r2, #21
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026c4:	0852      	lsrs	r2, r2, #1
 80026c6:	3a01      	subs	r2, #1
 80026c8:	0652      	lsls	r2, r2, #25
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d0:	0912      	lsrs	r2, r2, #4
 80026d2:	0452      	lsls	r2, r2, #17
 80026d4:	430a      	orrs	r2, r1
 80026d6:	4930      	ldr	r1, [pc, #192]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026dc:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f4:	f7ff f910 	bl	8001918 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff f90c 	bl	8001918 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e058      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800271a:	e050      	b.n	80027be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e04f      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d148      	bne.n	80027be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002744:	f7ff f8e8 	bl	8001918 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff f8e4 	bl	8001918 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e030      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x734>
 800276a:	e028      	b.n	80027be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d023      	beq.n	80027ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x780>)
 8002778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff f8cb 	bl	8001918 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	e00c      	b.n	80027a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7ff f8c7 	bl	8001918 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d905      	bls.n	80027a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e013      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
 8002798:	40021000 	.word	0x40021000
 800279c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x7b0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ec      	bne.n	8002786 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x7b0>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4905      	ldr	r1, [pc, #20]	; (80027c8 <HAL_RCC_OscConfig+0x7b0>)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x7b4>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60cb      	str	r3, [r1, #12]
 80027b8:	e001      	b.n	80027be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	feeefffc 	.word	0xfeeefffc

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0e7      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d910      	bls.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4970      	ldr	r1, [pc, #448]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cf      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282c:	429a      	cmp	r2, r3
 800282e:	d908      	bls.n	8002842 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4960      	ldr	r1, [pc, #384]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04c      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	4b5a      	ldr	r3, [pc, #360]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d121      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0a6      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286e:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e09a      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002886:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e08e      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e086      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4943      	ldr	r1, [pc, #268]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7ff f82e 	bl	8001918 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff f82a 	bl	8001918 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e06e      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002900:	429a      	cmp	r2, r3
 8002902:	d208      	bcs.n	8002916 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	492b      	ldr	r1, [pc, #172]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d210      	bcs.n	8002946 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 0207 	bic.w	r2, r3, #7
 800292c:	4923      	ldr	r1, [pc, #140]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_RCC_ClockConfig+0x1ec>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d001      	beq.n	8002946 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e036      	b.n	80029b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4918      	ldr	r1, [pc, #96]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4910      	ldr	r1, [pc, #64]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002984:	f000 f824 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1f8>)
 80029a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1fc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe ff65 	bl	8001878 <HAL_InitTick>
 80029ae:	4603      	mov	r3, r0
 80029b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029b2:	7afb      	ldrb	r3, [r7, #11]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	0800ac14 	.word	0x0800ac14
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000008 	.word	0x20000008

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x34>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d121      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d11e      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e004      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d134      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d003      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0xac>
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a78:	617b      	str	r3, [r7, #20]
      break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a7e:	617b      	str	r3, [r7, #20]
      break;
 8002a80:	e002      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	617b      	str	r3, [r7, #20]
      break;
 8002a86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	3301      	adds	r3, #1
 8002a94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	fb03 f202 	mul.w	r2, r3, r2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	0e5b      	lsrs	r3, r3, #25
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	0800ac2c 	.word	0x0800ac2c
 8002ae0:	00f42400 	.word	0x00f42400
 8002ae4:	007a1200 	.word	0x007a1200

08002ae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b04:	f7ff fff0 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	0800ac24 	.word	0x0800ac24

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b30:	f7ff ffda 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0adb      	lsrs	r3, r3, #11
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	0800ac24 	.word	0x0800ac24

08002b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b70:	f7ff f9ee 	bl	8001f50 <HAL_PWREx_GetVoltageRange>
 8002b74:	6178      	str	r0, [r7, #20]
 8002b76:	e014      	b.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff f9de 	bl	8001f50 <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d10b      	bne.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d919      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb4:	d902      	bls.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e013      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e010      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d902      	bls.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bc8:	2303      	movs	r3, #3
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e00a      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d102      	bne.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e004      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d101      	bne.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40022000 	.word	0x40022000

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d041      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c3c:	d02a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c42:	d824      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c4e:	d81e      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c58:	d010      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c5c:	4b86      	ldr	r3, [pc, #536]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a85      	ldr	r2, [pc, #532]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c68:	e015      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fabb 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fba6 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8c:	e003      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	74fb      	strb	r3, [r7, #19]
      break;
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	4973      	ldr	r1, [pc, #460]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cb2:	e001      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d041      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ccc:	d02a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd2:	d824      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cd8:	d008      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cde:	d81e      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cea:	e018      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf8:	e015      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa73 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d0a:	e00c      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3320      	adds	r3, #32
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fb5e 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d1c:	e003      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	74fb      	strb	r3, [r7, #19]
      break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d2c:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3a:	494f      	ldr	r1, [pc, #316]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a0 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fdbe 	bl	8001918 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe fdba 	bl	8001918 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d15c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01f      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d019      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fd79 	bl	8001918 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e28:	e00b      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fd75 	bl	8001918 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d902      	bls.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ec      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e84:	7c7b      	ldrb	r3, [r7, #17]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b9e      	ldr	r3, [pc, #632]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a9d      	ldr	r2, [pc, #628]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea2:	4b98      	ldr	r3, [pc, #608]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	4994      	ldr	r1, [pc, #592]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 020c 	bic.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	498c      	ldr	r1, [pc, #560]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee6:	4b87      	ldr	r3, [pc, #540]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4983      	ldr	r1, [pc, #524]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	497b      	ldr	r1, [pc, #492]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	4972      	ldr	r1, [pc, #456]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f4c:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	496a      	ldr	r1, [pc, #424]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	4961      	ldr	r1, [pc, #388]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	4959      	ldr	r1, [pc, #356]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb2:	4b54      	ldr	r3, [pc, #336]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	4950      	ldr	r1, [pc, #320]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	4948      	ldr	r1, [pc, #288]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	493f      	ldr	r1, [pc, #252]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d028      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	4937      	ldr	r1, [pc, #220]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003036:	d106      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003038:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a31      	ldr	r2, [pc, #196]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003042:	60d3      	str	r3, [r2, #12]
 8003044:	e011      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304e:	d10c      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f8c8 	bl	80031ec <RCCEx_PLLSAI1_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d028      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	491f      	ldr	r1, [pc, #124]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003094:	d106      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a0:	60d3      	str	r3, [r2, #12]
 80030a2:	e011      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f899 	bl	80031ec <RCCEx_PLLSAI1_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d02b      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f2:	d109      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a02      	ldr	r2, [pc, #8]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030fe:	60d3      	str	r3, [r2, #12]
 8003100:	e014      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003110:	d10c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f867 	bl	80031ec <RCCEx_PLLSAI1_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003146:	4928      	ldr	r1, [pc, #160]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003156:	d10d      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f844 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d014      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
 8003172:	e011      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3320      	adds	r3, #32
 8003182:	2102      	movs	r1, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f925 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b2:	490d      	ldr	r1, [pc, #52]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031de:	7cbb      	ldrb	r3, [r7, #18]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000

080031ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fa:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003206:	4b72      	ldr	r3, [pc, #456]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d10d      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
       ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800321e:	4b6c      	ldr	r3, [pc, #432]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
       ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d047      	beq.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e044      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d018      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x86>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d825      	bhi.n	8003290 <RCCEx_PLLSAI1_Config+0xa4>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <RCCEx_PLLSAI1_Config+0x62>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d009      	beq.n	8003260 <RCCEx_PLLSAI1_Config+0x74>
 800324c:	e020      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e01a      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003260:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e013      	b.n	800329a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800328e:	e006      	b.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032a6:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	430b      	orrs	r3, r1
 80032bc:	4944      	ldr	r1, [pc, #272]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d17d      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fe fb20 	bl	8001918 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032dc:	f7fe fb1c 	bl	8001918 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
        break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ef      	bne.n	80032dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d160      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
 8003318:	0211      	lsls	r1, r2, #8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	0912      	lsrs	r2, r2, #4
 8003320:	0452      	lsls	r2, r2, #17
 8003322:	430a      	orrs	r2, r1
 8003324:	492a      	ldr	r1, [pc, #168]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]
 800332a:	e027      	b.n	800337c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d112      	bne.n	8003358 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800333a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	0211      	lsls	r1, r2, #8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6912      	ldr	r2, [r2, #16]
 8003348:	0852      	lsrs	r2, r2, #1
 800334a:	3a01      	subs	r2, #1
 800334c:	0552      	lsls	r2, r2, #21
 800334e:	430a      	orrs	r2, r1
 8003350:	491f      	ldr	r1, [pc, #124]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	610b      	str	r3, [r1, #16]
 8003356:	e011      	b.n	800337c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6892      	ldr	r2, [r2, #8]
 8003368:	0211      	lsls	r1, r2, #8
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6952      	ldr	r2, [r2, #20]
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0652      	lsls	r2, r2, #25
 8003374:	430a      	orrs	r2, r1
 8003376:	4916      	ldr	r1, [pc, #88]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fac6 	bl	8001918 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003390:	f7fe fac2 	bl	8001918 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
          break;
 80033a2:	e005      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4904      	ldr	r1, [pc, #16]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10d      	bne.n	800341a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
       ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
       ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d047      	beq.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e044      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d018      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x86>
 8003428:	2b03      	cmp	r3, #3
 800342a:	d825      	bhi.n	8003478 <RCCEx_PLLSAI2_Config+0xa4>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <RCCEx_PLLSAI2_Config+0x62>
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x74>
 8003434:	e020      	b.n	8003478 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003436:	4b55      	ldr	r3, [pc, #340]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11d      	bne.n	800347e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e01a      	b.n	800347e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003458:	e013      	b.n	8003482 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003476:	e006      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e004      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003486:	bf00      	nop
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	430b      	orrs	r3, r1
 80034a4:	4939      	ldr	r1, [pc, #228]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d167      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a35      	ldr	r2, [pc, #212]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fe fa2c 	bl	8001918 <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c2:	e009      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034c4:	f7fe fa28 	bl	8001918 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d902      	bls.n	80034d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	73fb      	strb	r3, [r7, #15]
        break;
 80034d6:	e005      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ef      	bne.n	80034c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14a      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	0211      	lsls	r1, r2, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	0912      	lsrs	r2, r2, #4
 8003508:	0452      	lsls	r2, r2, #17
 800350a:	430a      	orrs	r2, r1
 800350c:	491f      	ldr	r1, [pc, #124]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	614b      	str	r3, [r1, #20]
 8003512:	e011      	b.n	8003538 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800351c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6892      	ldr	r2, [r2, #8]
 8003524:	0211      	lsls	r1, r2, #8
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6912      	ldr	r2, [r2, #16]
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0652      	lsls	r2, r2, #25
 8003530:	430a      	orrs	r2, r1
 8003532:	4916      	ldr	r1, [pc, #88]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe f9e8 	bl	8001918 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354c:	f7fe f9e4 	bl	8001918 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
          break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ef      	beq.n	800354c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4904      	ldr	r1, [pc, #16]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d06c      	beq.n	800367c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd ff64 	bl	8001484 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	22ca      	movs	r2, #202	; 0xca
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2253      	movs	r2, #83	; 0x53
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fd29 	bl	800402c <RTC_EnterInitMode>
 80035da:	4603      	mov	r3, r0
 80035dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d14b      	bne.n	800367c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6919      	ldr	r1, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	041a      	lsls	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fd2d 	bl	8004094 <RTC_ExitInitMode>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11b      	bne.n	800367c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0203 	bic.w	r2, r2, #3
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003686:	b590      	push	{r4, r7, lr}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RTC_SetTime+0x1a>
 800369c:	2302      	movs	r3, #2
 800369e:	e08b      	b.n	80037b8 <HAL_RTC_SetTime+0x132>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	22ca      	movs	r2, #202	; 0xca
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2253      	movs	r2, #83	; 0x53
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fcb3 	bl	800402c <RTC_EnterInitMode>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d163      	bne.n	8003798 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d126      	bne.n	8003724 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd0e 	bl	8004110 <RTC_ByteToBcd2>
 80036f4:	4603      	mov	r3, r0
 80036f6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd07 	bl	8004110 <RTC_ByteToBcd2>
 8003702:	4603      	mov	r3, r0
 8003704:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003706:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	789b      	ldrb	r3, [r3, #2]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fcff 	bl	8004110 <RTC_ByteToBcd2>
 8003712:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003714:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	78db      	ldrb	r3, [r3, #3]
 800371c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e018      	b.n	8003756 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003744:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800374a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	78db      	ldrb	r3, [r3, #3]
 8003750:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003760:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003764:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003774:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fc80 	bl	8004094 <RTC_ExitInitMode>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	0c1b      	lsrs	r3, r3, #16
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	0d9b      	lsrs	r3, r3, #22
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11a      	bne.n	800386e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fc87 	bl	8004150 <RTC_Bcd2ToByte>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fc7e 	bl	8004150 <RTC_Bcd2ToByte>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	789b      	ldrb	r3, [r3, #2]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fc75 	bl	8004150 <RTC_Bcd2ToByte>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_RTC_SetDate+0x1a>
 800388e:	2302      	movs	r3, #2
 8003890:	e075      	b.n	800397e <HAL_RTC_SetDate+0x106>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10e      	bne.n	80038c6 <HAL_RTC_SetDate+0x4e>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	f023 0310 	bic.w	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	330a      	adds	r3, #10
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11c      	bne.n	8003906 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fc1d 	bl	8004110 <RTC_ByteToBcd2>
 80038d6:	4603      	mov	r3, r0
 80038d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fc16 	bl	8004110 <RTC_ByteToBcd2>
 80038e4:	4603      	mov	r3, r0
 80038e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	789b      	ldrb	r3, [r3, #2]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fc0e 	bl	8004110 <RTC_ByteToBcd2>
 80038f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e00e      	b.n	8003924 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	78db      	ldrb	r3, [r3, #3]
 800390a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003912:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003918:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	22ca      	movs	r2, #202	; 0xca
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2253      	movs	r2, #83	; 0x53
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fb79 	bl	800402c <RTC_EnterInitMode>
 800393a:	4603      	mov	r3, r0
 800393c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10c      	bne.n	800395e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800394e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003952:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fb9d 	bl	8004094 <RTC_ExitInitMode>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
}
 800397e:	4618      	mov	r0, r3
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}

08003986 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800399c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	0b5b      	lsrs	r3, r3, #13
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11a      	bne.n	8003a16 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fbb3 	bl	8004150 <RTC_Bcd2ToByte>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fbaa 	bl	8004150 <RTC_Bcd2ToByte>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	789b      	ldrb	r3, [r3, #2]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fba1 	bl	8004150 <RTC_Bcd2ToByte>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_RTC_SetAlarm_IT+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e127      	b.n	8003c8a <HAL_RTC_SetAlarm_IT+0x26a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d137      	bne.n	8003ac0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2200      	movs	r2, #0
 8003a62:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fb51 	bl	8004110 <RTC_ByteToBcd2>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fb4a 	bl	8004110 <RTC_ByteToBcd2>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a80:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb42 	bl	8004110 <RTC_ByteToBcd2>
 8003a8c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a8e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a98:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fb34 	bl	8004110 <RTC_ByteToBcd2>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003aac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ab4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e023      	b.n	8003b08 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ae0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ae6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003aee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003af8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003afe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	22ca      	movs	r2, #202	; 0xca
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2253      	movs	r2, #83	; 0x53
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2c:	d14a      	bne.n	8003bc4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003b4e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003b50:	f7fd fee2 	bl	8001918 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b56:	e015      	b.n	8003b84 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b58:	f7fd fede 	bl	8001918 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b66:	d90d      	bls.n	8003b84 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2203      	movs	r2, #3
 8003b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e082      	b.n	8003c8a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0e2      	beq.n	8003b58 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	e049      	b.n	8003c58 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bd2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003be4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003be6:	f7fd fe97 	bl	8001918 <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003bec:	e015      	b.n	8003c1a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bee:	f7fd fe93 	bl	8001918 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfc:	d90d      	bls.n	8003c1a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	22ff      	movs	r2, #255	; 0xff
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e037      	b.n	8003c8a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0e2      	beq.n	8003bee <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_RTC_SetAlarm_IT+0x274>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <HAL_RTC_SetAlarm_IT+0x274>)
 8003c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RTC_SetAlarm_IT+0x274>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_RTC_SetAlarm_IT+0x274>)
 8003c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40010400 	.word	0x40010400

08003c98 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_RTC_DeactivateAlarm+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e083      	b.n	8003db8 <HAL_RTC_DeactivateAlarm+0x120>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	22ca      	movs	r2, #202	; 0xca
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2253      	movs	r2, #83	; 0x53
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd6:	d131      	bne.n	8003d3c <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf6:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7fd fe0e 	bl	8001918 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003cfe:	e015      	b.n	8003d2c <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d00:	f7fd fe0a 	bl	8001918 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0e:	d90d      	bls.n	8003d2c <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e045      	b.n	8003db8 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0e2      	beq.n	8003d00 <HAL_RTC_DeactivateAlarm+0x68>
 8003d3a:	e030      	b.n	8003d9e <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d4a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5a:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7fd fddc 	bl	8001918 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d62:	e015      	b.n	8003d90 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d64:	f7fd fdd8 	bl	8001918 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d72:	d90d      	bls.n	8003d90 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e013      	b.n	8003db8 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0e2      	beq.n	8003d64 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd4:	d143      	bne.n	8003e5e <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003df0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	0d9b      	lsrs	r3, r3, #22
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	e042      	b.n	8003ee4 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e78:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	0d9b      	lsrs	r3, r3, #22
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	0e1b      	lsrs	r3, r3, #24
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d125      	bne.n	8003f36 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f92e 	bl	8004150 <RTC_Bcd2ToByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f925 	bl	8004150 <RTC_Bcd2ToByte>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	789b      	ldrb	r3, [r3, #2]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f91c 	bl	8004150 <RTC_Bcd2ToByte>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f912 	bl	8004150 <RTC_Bcd2ToByte>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003f4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f4e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003f7c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f824 	bl	8003fcc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d012      	beq.n	8003fb8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003fb0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f943 	bl	800423e <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40010400 	.word	0x40010400

08003fcc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003ff8:	f7fd fc8e 	bl	8001918 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ffe:	e009      	b.n	8004014 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004000:	f7fd fc8a 	bl	8001918 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800400e:	d901      	bls.n	8004014 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e007      	b.n	8004024 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ee      	beq.n	8004000 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d120      	bne.n	8004088 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f04f 32ff 	mov.w	r2, #4294967295
 800404e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004050:	f7fd fc62 	bl	8001918 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004056:	e00d      	b.n	8004074 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004058:	f7fd fc5e 	bl	8001918 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004066:	d905      	bls.n	8004074 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <RTC_EnterInitMode+0x5c>
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d1e7      	bne.n	8004058 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <RTC_ExitInitMode+0x78>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a19      	ldr	r2, [pc, #100]	; (800410c <RTC_ExitInitMode+0x78>)
 80040a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <RTC_ExitInitMode+0x78>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10c      	bne.n	80040d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff91 	bl	8003fe0 <HAL_RTC_WaitForSynchro>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01e      	beq.n	8004102 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e017      	b.n	8004102 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <RTC_ExitInitMode+0x78>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4a0d      	ldr	r2, [pc, #52]	; (800410c <RTC_ExitInitMode+0x78>)
 80040d8:	f023 0320 	bic.w	r3, r3, #32
 80040dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff7e 	bl	8003fe0 <HAL_RTC_WaitForSynchro>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2203      	movs	r2, #3
 80040ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <RTC_ExitInitMode+0x78>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <RTC_ExitInitMode+0x78>)
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40002800 	.word	0x40002800

08004110 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004122:	e005      	b.n	8004130 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	3b0a      	subs	r3, #10
 800412e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	2b09      	cmp	r3, #9
 8004134:	d8f6      	bhi.n	8004124 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	b2da      	uxtb	r2, r3
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	4313      	orrs	r3, r2
 8004142:	b2db      	uxtb	r3, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4413      	add	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	b2da      	uxtb	r2, r3
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	4413      	add	r3, r2
 8004176:	b2db      	uxtb	r3, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004196:	2302      	movs	r3, #2
 8004198:	e04d      	b.n	8004236 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	22ca      	movs	r2, #202	; 0xca
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2253      	movs	r2, #83	; 0x53
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041d8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80041da:	f7fd fb9d 	bl	8001918 <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80041e0:	e015      	b.n	800420e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041e2:	f7fd fb99 	bl	8001918 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f0:	d90d      	bls.n	800420e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2203      	movs	r2, #3
 80041fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e013      	b.n	8004236 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0e2      	beq.n	80041e2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e095      	b.n	8004390 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d108      	bne.n	800427e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004274:	d009      	beq.n	800428a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
 800427c:	e005      	b.n	800428a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd f91f 	bl	80014e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ca:	d902      	bls.n	80042d2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e002      	b.n	80042d8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042e0:	d007      	beq.n	80042f2 <HAL_SPI_Init+0xa0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	ea42 0103 	orr.w	r1, r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0204 	and.w	r2, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800436e:	ea42 0103 	orr.w	r1, r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_SPI_Transmit+0x22>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e158      	b.n	800466c <HAL_SPI_Transmit+0x2d4>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c2:	f7fd faa9 	bl	8001918 <HAL_GetTick>
 80043c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d002      	beq.n	80043de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043dc:	e13d      	b.n	800465a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x52>
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ee:	e134      	b.n	800465a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2203      	movs	r2, #3
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443a:	d10f      	bne.n	800445c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d007      	beq.n	800447a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004482:	d94b      	bls.n	800451c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SPI_Transmit+0xfa>
 800448c:	8afb      	ldrh	r3, [r7, #22]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d13e      	bne.n	8004510 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c9a      	adds	r2, r3, #2
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044b6:	e02b      	b.n	8004510 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d112      	bne.n	80044ec <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	881a      	ldrh	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ea:	e011      	b.n	8004510 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ec:	f7fd fa14 	bl	8001918 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d803      	bhi.n	8004504 <HAL_SPI_Transmit+0x16c>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d102      	bne.n	800450a <HAL_SPI_Transmit+0x172>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800450e:	e0a4      	b.n	800465a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ce      	bne.n	80044b8 <HAL_SPI_Transmit+0x120>
 800451a:	e07c      	b.n	8004616 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x192>
 8004524:	8afb      	ldrh	r3, [r7, #22]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d170      	bne.n	800460c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d912      	bls.n	800455a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b02      	subs	r3, #2
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004558:	e058      	b.n	800460c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004580:	e044      	b.n	800460c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d12b      	bne.n	80045e8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d912      	bls.n	80045c0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b02      	subs	r3, #2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045be:	e025      	b.n	800460c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e6:	e011      	b.n	800460c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e8:	f7fd f996 	bl	8001918 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d803      	bhi.n	8004600 <HAL_SPI_Transmit+0x268>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x26e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	77fb      	strb	r3, [r7, #31]
          goto error;
 800460a:	e026      	b.n	800465a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1b5      	bne.n	8004582 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fce4 	bl	8004fe8 <SPI_EndRxTxTransaction>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e000      	b.n	800465a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004658:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800466a:	7ffb      	ldrb	r3, [r7, #31]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004690:	d112      	bne.n	80046b8 <HAL_SPI_Receive+0x44>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10e      	bne.n	80046b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2204      	movs	r2, #4
 800469e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f910 	bl	80048d4 <HAL_SPI_TransmitReceive>
 80046b4:	4603      	mov	r3, r0
 80046b6:	e109      	b.n	80048cc <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Receive+0x52>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e102      	b.n	80048cc <HAL_SPI_Receive+0x258>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ce:	f7fd f923 	bl	8001918 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046e4:	e0e9      	b.n	80048ba <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Receive+0x7e>
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046f6:	e0e0      	b.n	80048ba <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2204      	movs	r2, #4
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004742:	d908      	bls.n	8004756 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e007      	b.n	8004766 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d10f      	bne.n	8004790 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d007      	beq.n	80047ae <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047b6:	d867      	bhi.n	8004888 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047b8:	e030      	b.n	800481c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d117      	bne.n	80047f8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f103 020c 	add.w	r2, r3, #12
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80047f6:	e011      	b.n	800481c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f8:	f7fd f88e 	bl	8001918 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d803      	bhi.n	8004810 <HAL_SPI_Receive+0x19c>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Receive+0x1a2>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	75fb      	strb	r3, [r7, #23]
          goto error;
 800481a:	e04e      	b.n	80048ba <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1c8      	bne.n	80047ba <HAL_SPI_Receive+0x146>
 8004828:	e034      	b.n	8004894 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d115      	bne.n	8004864 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	b292      	uxth	r2, r2
 8004844:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004862:	e011      	b.n	8004888 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004864:	f7fd f858 	bl	8001918 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d803      	bhi.n	800487c <HAL_SPI_Receive+0x208>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d102      	bne.n	8004882 <HAL_SPI_Receive+0x20e>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004886:	e018      	b.n	80048ba <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ca      	bne.n	800482a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fb4d 	bl	8004f38 <SPI_EndRxTransaction>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
 80048b6:	e000      	b.n	80048ba <HAL_SPI_Receive+0x246>
  }

error :
 80048b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048e2:	2301      	movs	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x26>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e1fb      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x41e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004902:	f7fd f809 	bl	8001918 <HAL_GetTick>
 8004906:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800490e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800491e:	7efb      	ldrb	r3, [r7, #27]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d00e      	beq.n	8004942 <HAL_SPI_TransmitReceive+0x6e>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492a:	d106      	bne.n	800493a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_SPI_TransmitReceive+0x66>
 8004934:	7efb      	ldrb	r3, [r7, #27]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d003      	beq.n	8004942 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004940:	e1cd      	b.n	8004cde <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x80>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x80>
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800495a:	e1c0      	b.n	8004cde <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b04      	cmp	r3, #4
 8004966:	d003      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2205      	movs	r2, #5
 800496c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	887a      	ldrh	r2, [r7, #2]
 8004988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	887a      	ldrh	r2, [r7, #2]
 8004996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b2:	d802      	bhi.n	80049ba <HAL_SPI_TransmitReceive+0xe6>
 80049b4:	8a3b      	ldrh	r3, [r7, #16]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d908      	bls.n	80049cc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	e007      	b.n	80049dc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d007      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a02:	d97c      	bls.n	8004afe <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x13e>
 8004a0c:	8a7b      	ldrh	r3, [r7, #18]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d169      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a36:	e056      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d11b      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x1aa>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x1aa>
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d113      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d11c      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x1f2>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d016      	beq.n	8004ac6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ac6:	f7fc ff27 	bl	8001918 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d807      	bhi.n	8004ae6 <HAL_SPI_TransmitReceive+0x212>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d003      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ae4:	e0fb      	b.n	8004cde <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1a3      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x164>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d19d      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x164>
 8004afc:	e0df      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x23a>
 8004b06:	8a7b      	ldrh	r3, [r7, #18]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 80cb 	bne.w	8004ca4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d912      	bls.n	8004b3e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b02      	subs	r3, #2
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3c:	e0b2      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b64:	e09e      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d134      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x30a>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02f      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x30a>
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d12c      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d912      	bls.n	8004bb4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b02      	subs	r3, #2
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb2:	e012      	b.n	8004bda <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d148      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x3aa>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d042      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d923      	bls.n	8004c4c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b02      	subs	r3, #2
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d81f      	bhi.n	8004c7a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	e016      	b.n	8004c7a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f103 020c 	add.w	r2, r3, #12
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c7e:	f7fc fe4b 	bl	8001918 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d803      	bhi.n	8004c96 <HAL_SPI_TransmitReceive+0x3c2>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x3c8>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ca2:	e01c      	b.n	8004cde <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f47f af5b 	bne.w	8004b66 <HAL_SPI_TransmitReceive+0x292>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af54 	bne.w	8004b66 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f990 	bl	8004fe8 <SPI_EndRxTxTransaction>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d006      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	661a      	str	r2, [r3, #96]	; 0x60
 8004cda:	e000      	b.n	8004cde <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004cdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d0c:	f7fc fe04 	bl	8001918 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4413      	add	r3, r2
 8004d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d1c:	f7fc fdfc 	bl	8001918 <HAL_GetTick>
 8004d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d22:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	015b      	lsls	r3, r3, #5
 8004d28:	0d1b      	lsrs	r3, r3, #20
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d32:	e054      	b.n	8004dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d050      	beq.n	8004dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d3c:	f7fc fdec 	bl	8001918 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d902      	bls.n	8004d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d13d      	bne.n	8004dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6a:	d111      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	d004      	beq.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d107      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d98:	d10f      	bne.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e017      	b.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d19b      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000004 	.word	0x20000004

08004e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e1e:	f7fc fd7b 	bl	8001918 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e2e:	f7fc fd73 	bl	8001918 <HAL_GetTick>
 8004e32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e3c:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00da      	lsls	r2, r3, #3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	0d1b      	lsrs	r3, r3, #20
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e54:	e060      	b.n	8004f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e5c:	d107      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d050      	beq.n	8004f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e76:	f7fc fd4f 	bl	8001918 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d902      	bls.n	8004e8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d13d      	bne.n	8004f08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea4:	d111      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eae:	d004      	beq.n	8004eba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb8:	d107      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	d10f      	bne.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e010      	b.n	8004f2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d196      	bne.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3728      	adds	r7, #40	; 0x28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000004 	.word	0x20000004

08004f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4c:	d111      	bne.n	8004f72 <SPI_EndRxTransaction+0x3a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f56:	d004      	beq.n	8004f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f60:	d107      	bne.n	8004f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff febd 	bl	8004cfc <SPI_WaitFlagStateUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e023      	b.n	8004fe0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa0:	d11d      	bne.n	8004fde <SPI_EndRxTransaction+0xa6>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004faa:	d004      	beq.n	8004fb6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d113      	bne.n	8004fde <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff ff22 	bl	8004e0c <SPI_WaitFifoStateUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd2:	f043 0220 	orr.w	r2, r3, #32
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e000      	b.n	8004fe0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff03 	bl	8004e0c <SPI_WaitFifoStateUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e027      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fe68 	bl	8004cfc <SPI_WaitFlagStateUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e014      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fedc 	bl	8004e0c <SPI_WaitFifoStateUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505e:	f043 0220 	orr.w	r2, r3, #32
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e000      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e040      	b.n	8005108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fa68 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2224      	movs	r2, #36	; 0x24
 80050a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f992 	bl	80053dc <UART_SetConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e022      	b.n	8005108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fc3e 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fcc5 	bl	8005a90 <UART_CheckIdleState>
 8005106:	4603      	mov	r3, r0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005124:	2b20      	cmp	r3, #32
 8005126:	f040 8082 	bne.w	800522e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_UART_Transmit+0x26>
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07a      	b.n	8005230 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_UART_Transmit+0x38>
 8005144:	2302      	movs	r3, #2
 8005146:	e073      	b.n	8005230 <HAL_UART_Transmit+0x120>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2221      	movs	r2, #33	; 0x21
 800515c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515e:	f7fc fbdb 	bl	8001918 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517c:	d108      	bne.n	8005190 <HAL_UART_Transmit+0x80>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e003      	b.n	8005198 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051a0:	e02d      	b.n	80051fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fcb8 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e039      	b.n	8005230 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	881a      	ldrh	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ce:	b292      	uxth	r2, r2
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	3302      	adds	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e008      	b.n	80051ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b292      	uxth	r2, r2
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3301      	adds	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1cb      	bne.n	80051a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2140      	movs	r1, #64	; 0x40
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fc84 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e005      	b.n	8005230 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524c:	2b20      	cmp	r3, #32
 800524e:	f040 80bf 	bne.w	80053d0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_UART_Receive+0x26>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0b7      	b.n	80053d2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UART_Receive+0x38>
 800526c:	2302      	movs	r3, #2
 800526e:	e0b0      	b.n	80053d2 <HAL_UART_Receive+0x19a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2222      	movs	r2, #34	; 0x22
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800528c:	f7fc fb44 	bl	8001918 <HAL_GetTick>
 8005290:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d10e      	bne.n	80052ca <HAL_UART_Receive+0x92>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_UART_Receive+0x88>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052be:	e02d      	b.n	800531c <HAL_UART_Receive+0xe4>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c8:	e028      	b.n	800531c <HAL_UART_Receive+0xe4>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_UART_Receive+0xb6>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Receive+0xac>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e2:	e01b      	b.n	800531c <HAL_UART_Receive+0xe4>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	227f      	movs	r2, #127	; 0x7f
 80052e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ec:	e016      	b.n	800531c <HAL_UART_Receive+0xe4>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d10d      	bne.n	8005314 <HAL_UART_Receive+0xdc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_Receive+0xd2>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	227f      	movs	r2, #127	; 0x7f
 8005304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005308:	e008      	b.n	800531c <HAL_UART_Receive+0xe4>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	223f      	movs	r2, #63	; 0x3f
 800530e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005312:	e003      	b.n	800531c <HAL_UART_Receive+0xe4>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005322:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d108      	bne.n	8005340 <HAL_UART_Receive+0x108>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e003      	b.n	8005348 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005350:	e033      	b.n	80053ba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2120      	movs	r1, #32
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fbe0 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e032      	b.n	80053d2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005378:	b29a      	uxth	r2, r3
 800537a:	8a7b      	ldrh	r3, [r7, #18]
 800537c:	4013      	ands	r3, r2
 800537e:	b29a      	uxth	r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3302      	adds	r3, #2
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e00d      	b.n	80053a8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005392:	b29b      	uxth	r3, r3
 8005394:	b2da      	uxtb	r2, r3
 8005396:	8a7b      	ldrh	r3, [r7, #18]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4013      	ands	r3, r2
 800539c:	b2da      	uxtb	r2, r3
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1c5      	bne.n	8005352 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b08a      	sub	sp, #40	; 0x28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4ba4      	ldr	r3, [pc, #656]	; (800569c <UART_SetConfig+0x2c0>)
 800540c:	4013      	ands	r3, r2
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a99      	ldr	r2, [pc, #612]	; (80056a0 <UART_SetConfig+0x2c4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	4313      	orrs	r3, r2
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a90      	ldr	r2, [pc, #576]	; (80056a4 <UART_SetConfig+0x2c8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d126      	bne.n	80054b4 <UART_SetConfig+0xd8>
 8005466:	4b90      	ldr	r3, [pc, #576]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d81b      	bhi.n	80054ac <UART_SetConfig+0xd0>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0xa0>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800549d 	.word	0x0800549d
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a5 	.word	0x080054a5
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e116      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e112      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e10e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e10a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e106      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7c      	ldr	r2, [pc, #496]	; (80056ac <UART_SetConfig+0x2d0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d138      	bne.n	8005530 <UART_SetConfig+0x154>
 80054be:	4b7a      	ldr	r3, [pc, #488]	; (80056a8 <UART_SetConfig+0x2cc>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d82d      	bhi.n	8005528 <UART_SetConfig+0x14c>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0xf8>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005529 	.word	0x08005529
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005529 	.word	0x08005529
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005529 	.word	0x08005529
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005529 	.word	0x08005529
 80054fc:	08005529 	.word	0x08005529
 8005500:	08005529 	.word	0x08005529
 8005504:	08005521 	.word	0x08005521
 8005508:	2300      	movs	r3, #0
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e0d8      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005510:	2302      	movs	r3, #2
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e0d4      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e0d0      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e0cc      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e0c8      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5e      	ldr	r2, [pc, #376]	; (80056b0 <UART_SetConfig+0x2d4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d125      	bne.n	8005586 <UART_SetConfig+0x1aa>
 800553a:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <UART_SetConfig+0x2cc>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d016      	beq.n	8005576 <UART_SetConfig+0x19a>
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d818      	bhi.n	800557e <UART_SetConfig+0x1a2>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d00a      	beq.n	8005566 <UART_SetConfig+0x18a>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d814      	bhi.n	800557e <UART_SetConfig+0x1a2>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <UART_SetConfig+0x182>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d008      	beq.n	800556e <UART_SetConfig+0x192>
 800555c:	e00f      	b.n	800557e <UART_SetConfig+0x1a2>
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005564:	e0ad      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005566:	2302      	movs	r3, #2
 8005568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556c:	e0a9      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800556e:	2304      	movs	r3, #4
 8005570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005574:	e0a5      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005576:	2308      	movs	r3, #8
 8005578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557c:	e0a1      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800557e:	2310      	movs	r3, #16
 8005580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005584:	e09d      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <UART_SetConfig+0x2d8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d125      	bne.n	80055dc <UART_SetConfig+0x200>
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800559a:	2bc0      	cmp	r3, #192	; 0xc0
 800559c:	d016      	beq.n	80055cc <UART_SetConfig+0x1f0>
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d818      	bhi.n	80055d4 <UART_SetConfig+0x1f8>
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d00a      	beq.n	80055bc <UART_SetConfig+0x1e0>
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d814      	bhi.n	80055d4 <UART_SetConfig+0x1f8>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <UART_SetConfig+0x1d8>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d008      	beq.n	80055c4 <UART_SetConfig+0x1e8>
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x1f8>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e082      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e07e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e07a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e076      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e072      	b.n	80056c2 <UART_SetConfig+0x2e6>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <UART_SetConfig+0x2dc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <UART_SetConfig+0x260>
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <UART_SetConfig+0x2cc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d01a      	beq.n	800562c <UART_SetConfig+0x250>
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0x258>
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d00c      	beq.n	800561c <UART_SetConfig+0x240>
 8005602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005606:	d815      	bhi.n	8005634 <UART_SetConfig+0x258>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <UART_SetConfig+0x238>
 800560c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005610:	d008      	beq.n	8005624 <UART_SetConfig+0x248>
 8005612:	e00f      	b.n	8005634 <UART_SetConfig+0x258>
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e052      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e04e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e04a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e046      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e042      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <UART_SetConfig+0x2c4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d13a      	bne.n	80056bc <UART_SetConfig+0x2e0>
 8005646:	4b18      	ldr	r3, [pc, #96]	; (80056a8 <UART_SetConfig+0x2cc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005654:	d01a      	beq.n	800568c <UART_SetConfig+0x2b0>
 8005656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800565a:	d81b      	bhi.n	8005694 <UART_SetConfig+0x2b8>
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005660:	d00c      	beq.n	800567c <UART_SetConfig+0x2a0>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d815      	bhi.n	8005694 <UART_SetConfig+0x2b8>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <UART_SetConfig+0x298>
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x2a8>
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x2b8>
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e022      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e01e      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568a:	e01a      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005692:	e016      	b.n	80056c2 <UART_SetConfig+0x2e6>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569a:	e012      	b.n	80056c2 <UART_SetConfig+0x2e6>
 800569c:	efff69f3 	.word	0xefff69f3
 80056a0:	40008000 	.word	0x40008000
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40004400 	.word	0x40004400
 80056b0:	40004800 	.word	0x40004800
 80056b4:	40004c00 	.word	0x40004c00
 80056b8:	40005000 	.word	0x40005000
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a9f      	ldr	r2, [pc, #636]	; (8005944 <UART_SetConfig+0x568>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d17a      	bne.n	80057c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d824      	bhi.n	800571e <UART_SetConfig+0x342>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x300>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005701 	.word	0x08005701
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800570f 	.word	0x0800570f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fd f9fe 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8005704:	61f8      	str	r0, [r7, #28]
        break;
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b8f      	ldr	r3, [pc, #572]	; (8005948 <UART_SetConfig+0x56c>)
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fd f95f 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8005712:	61f8      	str	r0, [r7, #28]
        break;
 8005714:	e009      	b.n	800572a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	61fb      	str	r3, [r7, #28]
        break;
 800571c:	e005      	b.n	800572a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80fb 	beq.w	8005928 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	429a      	cmp	r2, r3
 8005740:	d305      	bcc.n	800574e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005754:	e0e8      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2200      	movs	r2, #0
 800575a:	461c      	mov	r4, r3
 800575c:	4615      	mov	r5, r2
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	022b      	lsls	r3, r5, #8
 8005768:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800576c:	0222      	lsls	r2, r4, #8
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6849      	ldr	r1, [r1, #4]
 8005772:	0849      	lsrs	r1, r1, #1
 8005774:	2000      	movs	r0, #0
 8005776:	4688      	mov	r8, r1
 8005778:	4681      	mov	r9, r0
 800577a:	eb12 0a08 	adds.w	sl, r2, r8
 800577e:	eb43 0b09 	adc.w	fp, r3, r9
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	f7fb fa0a 	bl	8000bac <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d308      	bcc.n	80057ba <UART_SetConfig+0x3de>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d204      	bcs.n	80057ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e0b6      	b.n	8005928 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057c0:	e0b2      	b.n	8005928 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d15e      	bne.n	800588a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d828      	bhi.n	8005826 <UART_SetConfig+0x44a>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x400>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	08005827 	.word	0x08005827
 80057ec:	08005817 	.word	0x08005817
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005827 	.word	0x08005827
 80057f8:	08005827 	.word	0x08005827
 80057fc:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7fd f97e 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
        break;
 8005806:	e014      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005808:	f7fd f990 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 800580c:	61f8      	str	r0, [r7, #28]
        break;
 800580e:	e010      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005810:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <UART_SetConfig+0x56c>)
 8005812:	61fb      	str	r3, [r7, #28]
        break;
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005816:	f7fd f8db 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800581a:	61f8      	str	r0, [r7, #28]
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	61fb      	str	r3, [r7, #28]
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d077      	beq.n	8005928 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005a      	lsls	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d916      	bls.n	8005882 <UART_SetConfig+0x4a6>
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585a:	d212      	bcs.n	8005882 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f023 030f 	bic.w	r3, r3, #15
 8005864:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	b29b      	uxth	r3, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	b29a      	uxth	r2, r3
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	4313      	orrs	r3, r2
 8005876:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	8afa      	ldrh	r2, [r7, #22]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e052      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005888:	e04e      	b.n	8005928 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800588a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588e:	2b08      	cmp	r3, #8
 8005890:	d827      	bhi.n	80058e2 <UART_SetConfig+0x506>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x4bc>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fd f920 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 80058c0:	61f8      	str	r0, [r7, #28]
        break;
 80058c2:	e014      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fd f932 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 80058c8:	61f8      	str	r0, [r7, #28]
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <UART_SetConfig+0x56c>)
 80058ce:	61fb      	str	r3, [r7, #28]
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fd f87d 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 80058d6:	61f8      	str	r0, [r7, #28]
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058de:	61fb      	str	r3, [r7, #28]
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058ec:	bf00      	nop
    }

    if (pclk != 0U)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d019      	beq.n	8005928 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	085a      	lsrs	r2, r3, #1
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d909      	bls.n	8005922 <UART_SetConfig+0x546>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d205      	bcs.n	8005922 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e002      	b.n	8005928 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005934:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005938:	4618      	mov	r0, r3
 800593a:	3728      	adds	r7, #40	; 0x28
 800593c:	46bd      	mov	sp, r7
 800593e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005942:	bf00      	nop
 8005944:	40008000 	.word	0x40008000
 8005948:	00f42400 	.word	0x00f42400

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fb ff3a 	bl	8001918 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d10e      	bne.n	8005ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f82d 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e023      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d10e      	bne.n	8005afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f817 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e00d      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b09c      	sub	sp, #112	; 0x70
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	e0a5      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	f000 80a1 	beq.w	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fb feeb 	bl	8001918 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d13e      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b68:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e067      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d04f      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	d147      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c4c:	623a      	str	r2, [r7, #32]
 8005c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f43f af4a 	beq.w	8005b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3770      	adds	r7, #112	; 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4812      	ldr	r0, [pc, #72]	; (8005d0c <BoardInitPeriph+0x60>)
 8005cc2:	f000 fae9 	bl	8006298 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	480e      	ldr	r0, [pc, #56]	; (8005d10 <BoardInitPeriph+0x64>)
 8005cd6:	f000 fadf 	bl	8006298 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8005cda:	2301      	movs	r3, #1
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	2108      	movs	r1, #8
 8005ce8:	480a      	ldr	r0, [pc, #40]	; (8005d14 <BoardInitPeriph+0x68>)
 8005cea:	f000 fad5 	bl	8006298 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4806      	ldr	r0, [pc, #24]	; (8005d0c <BoardInitPeriph+0x60>)
 8005cf2:	f000 fb10 	bl	8006316 <GpioWrite>
    GpioWrite( &Led3, 0 );
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4805      	ldr	r0, [pc, #20]	; (8005d10 <BoardInitPeriph+0x64>)
 8005cfa:	f000 fb0c 	bl	8006316 <GpioWrite>
    GpioWrite( &Led4, 0 );
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4804      	ldr	r0, [pc, #16]	; (8005d14 <BoardInitPeriph+0x68>)
 8005d02:	f000 fb08 	bl	8006316 <GpioWrite>
}
 8005d06:	bf00      	nop
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000900 	.word	0x20000900
 8005d10:	2000090c 	.word	0x2000090c
 8005d14:	20000918 	.word	0x20000918

08005d18 <BoardInitMcu>:

void BoardInitMcu( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <BoardInitMcu+0x48>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 8005d2c:	f000 fb08 	bl	8006340 <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	2305      	movs	r3, #5
 8005d38:	2206      	movs	r2, #6
 8005d3a:	2107      	movs	r1, #7
 8005d3c:	4809      	ldr	r0, [pc, #36]	; (8005d64 <BoardInitMcu+0x4c>)
 8005d3e:	f001 f803 	bl	8006d48 <SpiInit>
    SX1276IoInit( );
 8005d42:	f001 f917 	bl	8006f74 <SX1276IoInit>

    if( McuInitialized == false )
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <BoardInitMcu+0x48>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 8005d54:	4b02      	ldr	r3, [pc, #8]	; (8005d60 <BoardInitMcu+0x48>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000924 	.word	0x20000924
 8005d64:	20000b38 	.word	0x20000b38

08005d68 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fb fddd 	bl	8001930 <HAL_Delay>
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	70fb      	strb	r3, [r7, #3]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70bb      	strb	r3, [r7, #2]
 8005d96:	4613      	mov	r3, r2
 8005d98:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 8005d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	f000 80b5 	beq.w	8005f10 <GpioMcuInit+0x190>
    {
        return;
    }
    obj->pin = pin;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f993 3000 	ldrsb.w	r3, [r3]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2201      	movs	r2, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8005dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d110      	bne.n	8005df4 <GpioMcuInit+0x74>
    {
        obj->port = GPIOA;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005dd8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 8005dda:	4b4f      	ldr	r3, [pc, #316]	; (8005f18 <GpioMcuInit+0x198>)
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	4a4e      	ldr	r2, [pc, #312]	; (8005f18 <GpioMcuInit+0x198>)
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de6:	4b4c      	ldr	r3, [pc, #304]	; (8005f18 <GpioMcuInit+0x198>)
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	e053      	b.n	8005e9c <GpioMcuInit+0x11c>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f993 3000 	ldrsb.w	r3, [r3]
 8005dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfe:	2b10      	cmp	r3, #16
 8005e00:	d10f      	bne.n	8005e22 <GpioMcuInit+0xa2>
    {
        obj->port = GPIOB;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a45      	ldr	r2, [pc, #276]	; (8005f1c <GpioMcuInit+0x19c>)
 8005e06:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 8005e08:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <GpioMcuInit+0x198>)
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0c:	4a42      	ldr	r2, [pc, #264]	; (8005f18 <GpioMcuInit+0x198>)
 8005e0e:	f043 0302 	orr.w	r3, r3, #2
 8005e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e14:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <GpioMcuInit+0x198>)
 8005e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e03c      	b.n	8005e9c <GpioMcuInit+0x11c>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f993 3000 	ldrsb.w	r3, [r3]
 8005e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d10f      	bne.n	8005e50 <GpioMcuInit+0xd0>
    {
        obj->port = GPIOC;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3b      	ldr	r2, [pc, #236]	; (8005f20 <GpioMcuInit+0x1a0>)
 8005e34:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 8005e36:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <GpioMcuInit+0x198>)
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	4a37      	ldr	r2, [pc, #220]	; (8005f18 <GpioMcuInit+0x198>)
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e42:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <GpioMcuInit+0x198>)
 8005e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	e025      	b.n	8005e9c <GpioMcuInit+0x11c>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f993 3000 	ldrsb.w	r3, [r3]
 8005e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d10f      	bne.n	8005e7e <GpioMcuInit+0xfe>
    {
        obj->port = GPIOD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a30      	ldr	r2, [pc, #192]	; (8005f24 <GpioMcuInit+0x1a4>)
 8005e62:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 8005e64:	4b2c      	ldr	r3, [pc, #176]	; (8005f18 <GpioMcuInit+0x198>)
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <GpioMcuInit+0x198>)
 8005e6a:	f043 0308 	orr.w	r3, r3, #8
 8005e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e70:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <GpioMcuInit+0x198>)
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	e00e      	b.n	8005e9c <GpioMcuInit+0x11c>
    }
    else
    {
        obj->port = GPIOH;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <GpioMcuInit+0x1a8>)
 8005e82:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <GpioMcuInit+0x198>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <GpioMcuInit+0x198>)
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <GpioMcuInit+0x198>)
 8005e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	885b      	ldrh	r3, [r3, #2]
 8005ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 8005ea2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mode == PIN_INPUT )
 8005eac:	78bb      	ldrb	r3, [r7, #2]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <GpioMcuInit+0x138>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	623b      	str	r3, [r7, #32]
 8005eb6:	e01b      	b.n	8005ef0 <GpioMcuInit+0x170>
    }
    else if( mode == PIN_ANALOGIC )
 8005eb8:	78bb      	ldrb	r3, [r7, #2]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d102      	bne.n	8005ec4 <GpioMcuInit+0x144>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	e015      	b.n	8005ef0 <GpioMcuInit+0x170>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 8005ec4:	78bb      	ldrb	r3, [r7, #2]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d10a      	bne.n	8005ee0 <GpioMcuInit+0x160>
    {
        if( config == PIN_OPEN_DRAIN )
 8005eca:	787b      	ldrb	r3, [r7, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d102      	bne.n	8005ed6 <GpioMcuInit+0x156>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8005ed0:	2312      	movs	r3, #18
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	e001      	b.n	8005eda <GpioMcuInit+0x15a>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ede:	e007      	b.n	8005ef0 <GpioMcuInit+0x170>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 8005ee0:	787b      	ldrb	r3, [r7, #1]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <GpioMcuInit+0x16c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8005ee6:	2311      	movs	r3, #17
 8005ee8:	623b      	str	r3, [r7, #32]
 8005eea:	e001      	b.n	8005ef0 <GpioMcuInit+0x170>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005eec:	2301      	movs	r3, #1
 8005eee:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f107 021c 	add.w	r2, r7, #28
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fb fe4e 	bl	8001b9c <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 8005f00:	78bb      	ldrb	r3, [r7, #2]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <GpioMcuInit+0x192>
    {
        GpioMcuWrite( obj, value );
 8005f06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f921 	bl	8006150 <GpioMcuWrite>
 8005f0e:	e000      	b.n	8005f12 <GpioMcuInit+0x192>
        return;
 8005f10:	bf00      	nop
    }
}
 8005f12:	3730      	adds	r7, #48	; 0x30
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	48000400 	.word	0x48000400
 8005f20:	48000800 	.word	0x48000800
 8005f24:	48000c00 	.word	0x48000c00
 8005f28:	48001c00 	.word	0x48001c00

08005f2c <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	; 0x30
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	607b      	str	r3, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	72fb      	strb	r3, [r7, #11]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 8005f42:	2306      	movs	r3, #6
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80f9 	beq.w	8006142 <GpioMcuSetInterrupt+0x216>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	885b      	ldrh	r3, [r3, #2]
 8005f54:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d103      	bne.n	8005f64 <GpioMcuSetInterrupt+0x38>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8005f5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e009      	b.n	8005f78 <GpioMcuSetInterrupt+0x4c>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d103      	bne.n	8005f72 <GpioMcuSetInterrupt+0x46>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8005f6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	e002      	b.n	8005f78 <GpioMcuSetInterrupt+0x4c>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005f72:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005f76:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f107 0214 	add.w	r2, r7, #20
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fb fe06 	bl	8001b9c <HAL_GPIO_Init>

    switch( irqPriority )
 8005f90:	7abb      	ldrb	r3, [r7, #10]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d00f      	beq.n	8005fb6 <GpioMcuSetInterrupt+0x8a>
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	dc10      	bgt.n	8005fbc <GpioMcuSetInterrupt+0x90>
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	dc02      	bgt.n	8005fa4 <GpioMcuSetInterrupt+0x78>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da03      	bge.n	8005faa <GpioMcuSetInterrupt+0x7e>
 8005fa2:	e00b      	b.n	8005fbc <GpioMcuSetInterrupt+0x90>
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d003      	beq.n	8005fb0 <GpioMcuSetInterrupt+0x84>
 8005fa8:	e008      	b.n	8005fbc <GpioMcuSetInterrupt+0x90>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 8005faa:	2303      	movs	r3, #3
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fae:	e008      	b.n	8005fc2 <GpioMcuSetInterrupt+0x96>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb4:	e005      	b.n	8005fc2 <GpioMcuSetInterrupt+0x96>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fba:	e002      	b.n	8005fc2 <GpioMcuSetInterrupt+0x96>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc0:	bf00      	nop
    }

    switch( obj->pinIndex )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	885b      	ldrh	r3, [r3, #2]
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fca:	f000 809e 	beq.w	800610a <GpioMcuSetInterrupt+0x1de>
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd2:	f300 809e 	bgt.w	8006112 <GpioMcuSetInterrupt+0x1e6>
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fda:	f000 8096 	beq.w	800610a <GpioMcuSetInterrupt+0x1de>
 8005fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe2:	f300 8096 	bgt.w	8006112 <GpioMcuSetInterrupt+0x1e6>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	f000 808e 	beq.w	800610a <GpioMcuSetInterrupt+0x1de>
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	f300 808e 	bgt.w	8006112 <GpioMcuSetInterrupt+0x1e6>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	f000 8086 	beq.w	800610a <GpioMcuSetInterrupt+0x1de>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	f300 8086 	bgt.w	8006112 <GpioMcuSetInterrupt+0x1e6>
 8006006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600a:	d07e      	beq.n	800610a <GpioMcuSetInterrupt+0x1de>
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006010:	dc7f      	bgt.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 8006012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006016:	d078      	beq.n	800610a <GpioMcuSetInterrupt+0x1de>
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	dc79      	bgt.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 800601e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006022:	d06e      	beq.n	8006102 <GpioMcuSetInterrupt+0x1d6>
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	dc73      	bgt.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d068      	beq.n	8006102 <GpioMcuSetInterrupt+0x1d6>
 8006030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006034:	dc6d      	bgt.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d063      	beq.n	8006102 <GpioMcuSetInterrupt+0x1d6>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	dc69      	bgt.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 800603e:	2b20      	cmp	r3, #32
 8006040:	dc48      	bgt.n	80060d4 <GpioMcuSetInterrupt+0x1a8>
 8006042:	2b00      	cmp	r3, #0
 8006044:	dd65      	ble.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 8006046:	3b01      	subs	r3, #1
 8006048:	2b1f      	cmp	r3, #31
 800604a:	d862      	bhi.n	8006112 <GpioMcuSetInterrupt+0x1e6>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <GpioMcuSetInterrupt+0x128>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	080060db 	.word	0x080060db
 8006058:	080060e3 	.word	0x080060e3
 800605c:	08006113 	.word	0x08006113
 8006060:	080060eb 	.word	0x080060eb
 8006064:	08006113 	.word	0x08006113
 8006068:	08006113 	.word	0x08006113
 800606c:	08006113 	.word	0x08006113
 8006070:	080060f3 	.word	0x080060f3
 8006074:	08006113 	.word	0x08006113
 8006078:	08006113 	.word	0x08006113
 800607c:	08006113 	.word	0x08006113
 8006080:	08006113 	.word	0x08006113
 8006084:	08006113 	.word	0x08006113
 8006088:	08006113 	.word	0x08006113
 800608c:	08006113 	.word	0x08006113
 8006090:	080060fb 	.word	0x080060fb
 8006094:	08006113 	.word	0x08006113
 8006098:	08006113 	.word	0x08006113
 800609c:	08006113 	.word	0x08006113
 80060a0:	08006113 	.word	0x08006113
 80060a4:	08006113 	.word	0x08006113
 80060a8:	08006113 	.word	0x08006113
 80060ac:	08006113 	.word	0x08006113
 80060b0:	08006113 	.word	0x08006113
 80060b4:	08006113 	.word	0x08006113
 80060b8:	08006113 	.word	0x08006113
 80060bc:	08006113 	.word	0x08006113
 80060c0:	08006113 	.word	0x08006113
 80060c4:	08006113 	.word	0x08006113
 80060c8:	08006113 	.word	0x08006113
 80060cc:	08006113 	.word	0x08006113
 80060d0:	08006103 	.word	0x08006103
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d014      	beq.n	8006102 <GpioMcuSetInterrupt+0x1d6>
    case GPIO_PIN_14:
    case GPIO_PIN_15:
        IRQnb = EXTI15_10_IRQn;
        break;
    default:
        break;
 80060d8:	e01b      	b.n	8006112 <GpioMcuSetInterrupt+0x1e6>
        IRQnb = EXTI0_IRQn;
 80060da:	2306      	movs	r3, #6
 80060dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80060e0:	e018      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI1_IRQn;
 80060e2:	2307      	movs	r3, #7
 80060e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80060e8:	e014      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI2_IRQn;
 80060ea:	2308      	movs	r3, #8
 80060ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80060f0:	e010      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI3_IRQn;
 80060f2:	2309      	movs	r3, #9
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80060f8:	e00c      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI4_IRQn;
 80060fa:	230a      	movs	r3, #10
 80060fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006100:	e008      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI9_5_IRQn;
 8006102:	2317      	movs	r3, #23
 8006104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006108:	e004      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI15_10_IRQn;
 800610a:	2328      	movs	r3, #40	; 0x28
 800610c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006110:	e000      	b.n	8006114 <GpioMcuSetInterrupt+0x1e8>
        break;
 8006112:	bf00      	nop
    }

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f993 3000 	ldrsb.w	r3, [r3]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	490a      	ldr	r1, [pc, #40]	; (800614c <GpioMcuSetInterrupt+0x220>)
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8006128:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800612c:	2200      	movs	r2, #0
 800612e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006130:	4618      	mov	r0, r3
 8006132:	f7fb fcfc 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8006136:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800613a:	4618      	mov	r0, r3
 800613c:	f7fb fd13 	bl	8001b66 <HAL_NVIC_EnableIRQ>
 8006140:	e000      	b.n	8006144 <GpioMcuSetInterrupt+0x218>
        return;
 8006142:	bf00      	nop
}
 8006144:	3730      	adds	r7, #48	; 0x30
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000928 	.word	0x20000928

08006150 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f993 3000 	ldrsb.w	r3, [r3]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d009      	beq.n	800617e <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6858      	ldr	r0, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	4619      	mov	r1, r3
 8006178:	f7fb feba 	bl	8001ef0 <HAL_GPIO_WritePin>
 800617c:	e000      	b.n	8006180 <GpioMcuWrite+0x30>
        return;
 800617e:	bf00      	nop
}
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800618a:	f000 f9b7 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800618e:	2001      	movs	r0, #1
 8006190:	f7fb fec6 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}

08006198 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800619c:	f000 f9ae 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 80061a0:	2002      	movs	r0, #2
 80061a2:	f7fb febd 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 80061a6:	bf00      	nop
 80061a8:	bd80      	pop	{r7, pc}

080061aa <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80061ae:	f000 f9a5 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 80061b2:	2004      	movs	r0, #4
 80061b4:	f7fb feb4 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}

080061bc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80061c0:	f000 f99c 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 80061c4:	2008      	movs	r0, #8
 80061c6:	f7fb feab 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}

080061ce <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80061d2:	f000 f993 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 80061d6:	2010      	movs	r0, #16
 80061d8:	f7fb fea2 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}

080061e0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80061e4:	f000 f98a 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 80061e8:	2020      	movs	r0, #32
 80061ea:	f7fb fe99 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 80061ee:	2040      	movs	r0, #64	; 0x40
 80061f0:	f7fb fe96 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 80061f4:	2080      	movs	r0, #128	; 0x80
 80061f6:	f7fb fe93 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80061fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80061fe:	f7fb fe8f 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006206:	f7fb fe8b 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}

0800620e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 800620e:	b580      	push	{r7, lr}
 8006210:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006212:	f000 f973 	bl	80064fc <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006216:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800621a:	f7fb fe81 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800621e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006222:	f7fb fe7d 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006226:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800622a:	f7fb fe79 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800622e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006232:	f7fb fe75 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006236:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800623a:	f7fb fe71 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800623e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006242:	f7fb fe6d 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
}
 8006246:	bf00      	nop
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_GPIO_EXTI_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 8006260:	e005      	b.n	800626e <HAL_GPIO_EXTI_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	3301      	adds	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d1f6      	bne.n	8006262 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4a07      	ldr	r2, [pc, #28]	; (8006294 <HAL_GPIO_EXTI_Callback+0x48>)
 8006278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <HAL_GPIO_EXTI_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <HAL_GPIO_EXTI_Callback+0x48>)
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	4798      	blx	r3
    }
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000928 	.word	0x20000928

08006298 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	70fb      	strb	r3, [r7, #3]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70bb      	strb	r3, [r7, #2]
 80062ae:	4613      	mov	r3, r2
 80062b0:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 80062b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b6:	111b      	asrs	r3, r3, #4
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b06      	cmp	r3, #6
 80062be:	d80b      	bhi.n	80062d8 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 80062c0:	7878      	ldrb	r0, [r7, #1]
 80062c2:	78ba      	ldrb	r2, [r7, #2]
 80062c4:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	7c3b      	ldrb	r3, [r7, #16]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fd54 	bl	8005d80 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	72fb      	strb	r3, [r7, #11]
 80062ee:	4613      	mov	r3, r2
 80062f0:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f993 3000 	ldrsb.w	r3, [r3]
 80062f8:	111b      	asrs	r3, r3, #4
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b06      	cmp	r3, #6
 8006300:	d805      	bhi.n	800630e <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 8006302:	7aba      	ldrb	r2, [r7, #10]
 8006304:	7af9      	ldrb	r1, [r7, #11]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fe0f 	bl	8005f2c <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f993 3000 	ldrsb.w	r3, [r3]
 8006326:	111b      	asrs	r3, r3, #4
 8006328:	b25b      	sxtb	r3, r3
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b06      	cmp	r3, #6
 800632e:	d803      	bhi.n	8006338 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ff0c 	bl	8006150 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 8006346:	4b2c      	ldr	r3, [pc, #176]	; (80063f8 <RtcInit+0xb8>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f083 0301 	eor.w	r3, r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d04c      	beq.n	80063ee <RtcInit+0xae>
    {
        __HAL_RCC_RTC_ENABLE( );
 8006354:	4b29      	ldr	r3, [pc, #164]	; (80063fc <RtcInit+0xbc>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	4a28      	ldr	r2, [pc, #160]	; (80063fc <RtcInit+0xbc>)
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        RtcHandle.Instance = RTC;
 8006364:	4b26      	ldr	r3, [pc, #152]	; (8006400 <RtcInit+0xc0>)
 8006366:	4a27      	ldr	r2, [pc, #156]	; (8006404 <RtcInit+0xc4>)
 8006368:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800636a:	4b25      	ldr	r3, [pc, #148]	; (8006400 <RtcInit+0xc0>)
 800636c:	2200      	movs	r2, #0
 800636e:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 4; //128;     // changed from 3 - PK
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <RtcInit+0xc0>)
 8006372:	2204      	movs	r2, #4
 8006374:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 4; //256*64;      // changed from 3 - PK
 8006376:	4b22      	ldr	r3, [pc, #136]	; (8006400 <RtcInit+0xc0>)
 8006378:	2204      	movs	r2, #4
 800637a:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800637c:	4b20      	ldr	r3, [pc, #128]	; (8006400 <RtcInit+0xc0>)
 800637e:	2200      	movs	r2, #0
 8006380:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006382:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <RtcInit+0xc0>)
 8006384:	2200      	movs	r2, #0
 8006386:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <RtcInit+0xc0>)
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 800638e:	481c      	ldr	r0, [pc, #112]	; (8006400 <RtcInit+0xc0>)
 8006390:	f7fd f8fe 	bl	8003590 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 8006398:	2301      	movs	r3, #1
 800639a:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800639c:	2301      	movs	r3, #1
 800639e:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80063a0:	2306      	movs	r3, #6
 80063a2:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	3302      	adds	r3, #2
 80063a8:	2200      	movs	r2, #0
 80063aa:	4619      	mov	r1, r3
 80063ac:	4814      	ldr	r0, [pc, #80]	; (8006400 <RtcInit+0xc0>)
 80063ae:	f7fd fa63 	bl	8003878 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	3308      	adds	r3, #8
 80063ce:	2200      	movs	r2, #0
 80063d0:	4619      	mov	r1, r3
 80063d2:	480b      	ldr	r0, [pc, #44]	; (8006400 <RtcInit+0xc0>)
 80063d4:	f7fd f957 	bl	8003686 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 80063d8:	2200      	movs	r2, #0
 80063da:	2104      	movs	r1, #4
 80063dc:	2029      	movs	r0, #41	; 0x29
 80063de:	f7fb fba6 	bl	8001b2e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 80063e2:	2029      	movs	r0, #41	; 0x29
 80063e4:	f7fb fbbf 	bl	8001b66 <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 80063e8:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <RtcInit+0xb8>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
    }
}
 80063ee:	bf00      	nop
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200009b0 	.word	0x200009b0
 80063fc:	40021000 	.word	0x40021000
 8006400:	2000098c 	.word	0x2000098c
 8006404:	40002800 	.word	0x40002800

08006408 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8fb 	bl	800660c <RtcStartWakeUpAlarm>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <RtcGetAdjustedTimeoutValue+0x64>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d90c      	bls.n	800644c <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <RtcGetAdjustedTimeoutValue+0x68>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <RtcGetAdjustedTimeoutValue+0x68>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <RtcGetAdjustedTimeoutValue+0x64>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 800644c:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <RtcGetAdjustedTimeoutValue+0x64>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90e      	bls.n	8006474 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b31      	cmp	r3, #49	; 0x31
 800645a:	d803      	bhi.n	8006464 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <RtcGetAdjustedTimeoutValue+0x6c>)
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e007      	b.n	8006474 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <RtcGetAdjustedTimeoutValue+0x6c>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <RtcGetAdjustedTimeoutValue+0x64>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	607b      	str	r3, [r7, #4]
        }
    }
    return  timeout;
 8006474:	687b      	ldr	r3, [r7, #4]
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	200009b4 	.word	0x200009b4
 8006488:	2000096b 	.word	0x2000096b
 800648c:	20000988 	.word	0x20000988

08006490 <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800649e:	2000      	movs	r0, #0
 80064a0:	f000 fad6 	bl	8006a50 <RtcConvertCalendarTickToTimerTime>
 80064a4:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 80064a6:	480a      	ldr	r0, [pc, #40]	; (80064d0 <RtcGetElapsedAlarmTime+0x40>)
 80064a8:	f000 fad2 	bl	8006a50 <RtcConvertCalendarTickToTimerTime>
 80064ac:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d204      	bcs.n	80064c0 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	e002      	b.n	80064c6 <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	1ad3      	subs	r3, r2, r3
    }
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	2000096c 	.word	0x2000096c

080064d4 <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 80064e4:	f000 f80a 	bl	80064fc <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 80064e8:	4a03      	ldr	r2, [pc, #12]	; (80064f8 <BlockLowPowerDuringTask+0x24>)
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	7013      	strb	r3, [r2, #0]
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000989 	.word	0x20000989

080064fc <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
    // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
    if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET ) 
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <RtcRecoverMcuStatus+0x3c>)
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da03      	bge.n	8006510 <RtcRecoverMcuStatus+0x14>
    {
        __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <RtcRecoverMcuStatus+0x3c>)
 800650a:	221f      	movs	r2, #31
 800650c:	619a      	str	r2, [r3, #24]
 800650e:	e002      	b.n	8006516 <RtcRecoverMcuStatus+0x1a>
    }
    else
    {
        NonScheduledWakeUp = true;
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <RtcRecoverMcuStatus+0x40>)
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
    }
    // check the clk source and set to full speed if we are coming from sleep mode
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 8006516:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <RtcRecoverMcuStatus+0x44>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b04      	cmp	r3, #4
 8006520:	d005      	beq.n	800652e <RtcRecoverMcuStatus+0x32>
        ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <RtcRecoverMcuStatus+0x44>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <RtcRecoverMcuStatus+0x36>
    {
        BoardInitMcu( );
 800652e:	f7ff fbf3 	bl	8005d18 <BoardInitMcu>
    }
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40007000 	.word	0x40007000
 800653c:	2000096b 	.word	0x2000096b
 8006540:	40021000 	.word	0x40021000

08006544 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b094      	sub	sp, #80	; 0x50
 8006548:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t stop = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 8006552:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <RtcComputeWakeUpTime+0xb8>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f083 0301 	eor.w	r3, r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d048      	beq.n	80065f2 <RtcComputeWakeUpTime+0xae>
    {
        now = RtcGetCalendar( );
 8006560:	463b      	mov	r3, r7
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fb8e 	bl	8006c84 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 8006568:	f107 011c 	add.w	r1, r7, #28
 800656c:	2300      	movs	r3, #0
 800656e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006572:	4823      	ldr	r0, [pc, #140]	; (8006600 <RtcComputeWakeUpTime+0xbc>)
 8006574:	f7fd fc24 	bl	8003dc0 <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 8006578:	7fbb      	ldrb	r3, [r7, #30]
 800657a:	461a      	mov	r2, r3
 800657c:	233c      	movs	r3, #60	; 0x3c
 800657e:	7f79      	ldrb	r1, [r7, #29]
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	441a      	add	r2, r3
 8006586:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800658a:	7f39      	ldrb	r1, [r7, #28]
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 8006594:	7abb      	ldrb	r3, [r7, #10]
 8006596:	461a      	mov	r2, r3
 8006598:	233c      	movs	r3, #60	; 0x3c
 800659a:	7a79      	ldrb	r1, [r7, #9]
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	441a      	add	r2, r3
 80065a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80065a6:	7a39      	ldrb	r1, [r7, #8]
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	64bb      	str	r3, [r7, #72]	; 0x48

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 80065b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7f9 ff9c 	bl	80004f4 <__aeabi_ui2d>
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <RtcComputeWakeUpTime+0xc0>)
 80065c2:	f7fa f811 	bl	80005e8 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	ec43 2b17 	vmov	d7, r2, r3
 80065ce:	eeb0 0a47 	vmov.f32	s0, s14
 80065d2:	eef0 0a67 	vmov.f32	s1, s15
 80065d6:	f004 f9bf 	bl	800a958 <ceil>
 80065da:	ec53 2b10 	vmov	r2, r3, d0
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	f7fa fac3 	bl	8000b6c <__aeabi_d2uiz>
 80065e6:	4603      	mov	r3, r0
 80065e8:	4a07      	ldr	r2, [pc, #28]	; (8006608 <RtcComputeWakeUpTime+0xc4>)
 80065ea:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <RtcComputeWakeUpTime+0xb8>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
    }
}
 80065f2:	bf00      	nop
 80065f4:	3750      	adds	r7, #80	; 0x50
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200009b1 	.word	0x200009b1
 8006600:	2000098c 	.word	0x2000098c
 8006604:	3fdf4000 	.word	0x3fdf4000
 8006608:	200009b4 	.word	0x200009b4

0800660c <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	b0a3      	sub	sp, #140	; 0x8c
 8006610:	af06      	add	r7, sp, #24
 8006612:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006618:	4822      	ldr	r0, [pc, #136]	; (80066a4 <RtcStartWakeUpAlarm+0x98>)
 800661a:	f7fd fb3d 	bl	8003c98 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800661e:	4821      	ldr	r0, [pc, #132]	; (80066a4 <RtcStartWakeUpAlarm+0x98>)
 8006620:	f7fd fdb0 	bl	8004184 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 8006624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fb2b 	bl	8006c84 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <RtcStartWakeUpAlarm+0x9c>)
 8006630:	461d      	mov	r5, r3
 8006632:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8006636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800663a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800663e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 8006642:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8006646:	466d      	mov	r5, sp
 8006648:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800664c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006658:	cb0c      	ldmia	r3, {r2, r3}
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4630      	mov	r0, r6
 800665e:	f000 f827 	bl	80066b0 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 8006662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 8006674:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006678:	73bb      	strb	r3, [r7, #14]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800667a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800667e:	737b      	strb	r3, [r7, #13]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 8006680:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006684:	733b      	strb	r3, [r7, #12]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 8006686:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800668a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	2200      	movs	r2, #0
 8006694:	4619      	mov	r1, r3
 8006696:	4803      	ldr	r0, [pc, #12]	; (80066a4 <RtcStartWakeUpAlarm+0x98>)
 8006698:	f7fd f9c2 	bl	8003a20 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800669c:	bf00      	nop
 800669e:	3774      	adds	r7, #116	; 0x74
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a4:	2000098c 	.word	0x2000098c
 80066a8:	2000096c 	.word	0x2000096c
 80066ac:	00000000 	.word	0x00000000

080066b0 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 80066b0:	b082      	sub	sp, #8
 80066b2:	b5b0      	push	{r4, r5, r7, lr}
 80066b4:	b092      	sub	sp, #72	; 0x48
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
 80066bc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80066c0:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 80066c4:	f107 040c 	add.w	r4, r7, #12
 80066c8:	f107 0558 	add.w	r5, r7, #88	; 0x58
 80066cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 80066d8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80066dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 80066e0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80066e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    uint16_t hours = now.CalendarTime.Hours;
 80066e8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80066ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t days = now.CalendarDate.Date;
 80066f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80066f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    double timeoutValueTemp = 0.0;
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double timeoutValue = 0.0;
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double error = 0.0;
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800671c:	4ac4      	ldr	r2, [pc, #784]	; (8006a30 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800671e:	4613      	mov	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f7f9 fee4 	bl	80004f4 <__aeabi_ui2d>
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	4bc0      	ldr	r3, [pc, #768]	; (8006a34 <RtcComputeTimerTimeToAlarmTick+0x384>)
 8006732:	f7f9 ff59 	bl	80005e8 <__aeabi_dmul>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	f7fa fa15 	bl	8000b6c <__aeabi_d2uiz>
 8006742:	4602      	mov	r2, r0
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4293      	cmp	r3, r2
 8006748:	bf28      	it	cs
 800674a:	4613      	movcs	r3, r2
 800674c:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 8006754:	2301      	movs	r3, #1
 8006756:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 8006758:	6838      	ldr	r0, [r7, #0]
 800675a:	f7f9 fecb 	bl	80004f4 <__aeabi_ui2d>
 800675e:	a3b2      	add	r3, pc, #712	; (adr r3, 8006a28 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f7f9 ff40 	bl	80005e8 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	ec43 2b17 	vmov	d7, r2, r3
 8006770:	eeb0 0a47 	vmov.f32	s0, s14
 8006774:	eef0 0a67 	vmov.f32	s1, s15
 8006778:	f004 f9f2 	bl	800ab60 <round>
 800677c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 8006780:	6838      	ldr	r0, [r7, #0]
 8006782:	f7f9 feb7 	bl	80004f4 <__aeabi_ui2d>
 8006786:	a3a8      	add	r3, pc, #672	; (adr r3, 8006a28 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 ff2c 	bl	80005e8 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 8006798:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800679c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80067a0:	f7f9 fd6a 	bl	8000278 <__aeabi_dsub>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 80067ac:	4ba2      	ldr	r3, [pc, #648]	; (8006a38 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7f9 feaf 	bl	8000514 <__aeabi_i2d>
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <RtcComputeTimerTimeToAlarmTick+0x38c>)
 80067c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067c4:	f7f9 ff10 	bl	80005e8 <__aeabi_dmul>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4620      	mov	r0, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	f7f9 fd54 	bl	800027c <__adddf3>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	f7fa f99e 	bl	8000b1c <__aeabi_d2iz>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4a95      	ldr	r2, [pc, #596]	; (8006a38 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80067e4:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 80067e6:	4b94      	ldr	r3, [pc, #592]	; (8006a38 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80067ee:	db25      	blt.n	800683c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 80067f0:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80067f8:	461a      	mov	r2, r3
 80067fa:	4b8f      	ldr	r3, [pc, #572]	; (8006a38 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80067fc:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	4b8f      	ldr	r3, [pc, #572]	; (8006a40 <RtcComputeTimerTimeToAlarmTick+0x390>)
 8006804:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006808:	f7f9 fd38 	bl	800027c <__adddf3>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 8006814:	e012      	b.n	800683c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 8006816:	4b86      	ldr	r3, [pc, #536]	; (8006a30 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fe6b 	bl	80004f4 <__aeabi_ui2d>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006826:	f7f9 fd27 	bl	8000278 <__aeabi_dsub>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        days++;
 8006832:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006836:	3301      	adds	r3, #1
 8006838:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( timeoutValue >= SecondsInDay )
 800683c:	4b7c      	ldr	r3, [pc, #496]	; (8006a30 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7f9 fe58 	bl	80004f4 <__aeabi_ui2d>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800684c:	f7fa f952 	bl	8000af4 <__aeabi_dcmpge>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1df      	bne.n	8006816 <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 8006856:	e013      	b.n	8006880 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 8006858:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800685c:	4618      	mov	r0, r3
 800685e:	f7f9 fe59 	bl	8000514 <__aeabi_i2d>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800686a:	f7f9 fd05 	bl	8000278 <__aeabi_dsub>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        hours++;
 8006876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800687a:	3301      	adds	r3, #1
 800687c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( timeoutValue >= SecondsInHour )
 8006880:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006884:	4618      	mov	r0, r3
 8006886:	f7f9 fe45 	bl	8000514 <__aeabi_i2d>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006892:	f7fa f92f 	bl	8000af4 <__aeabi_dcmpge>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1dd      	bne.n	8006858 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800689c:	e012      	b.n	80068c4 <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 800689e:	233c      	movs	r3, #60	; 0x3c
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7f9 fe37 	bl	8000514 <__aeabi_i2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068ae:	f7f9 fce3 	bl	8000278 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        minutes++;
 80068ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068be:	3301      	adds	r3, #1
 80068c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( timeoutValue >= SecondsInMinute )
 80068c4:	233c      	movs	r3, #60	; 0x3c
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fe24 	bl	8000514 <__aeabi_i2d>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068d4:	f7fa f90e 	bl	8000af4 <__aeabi_dcmpge>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1df      	bne.n	800689e <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 80068de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7f9 fe16 	bl	8000514 <__aeabi_i2d>
 80068e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068ec:	f7f9 fcc6 	bl	800027c <__adddf3>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	f7fa f938 	bl	8000b6c <__aeabi_d2uiz>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    // Correct for modulo
    while( seconds >= 60 )
 8006902:	e009      	b.n	8006918 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 8006904:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006908:	3b3c      	subs	r3, #60	; 0x3c
 800690a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        minutes++;
 800690e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006912:	3301      	adds	r3, #1
 8006914:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( seconds >= 60 )
 8006918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800691c:	2b3b      	cmp	r3, #59	; 0x3b
 800691e:	d8f1      	bhi.n	8006904 <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 8006920:	e009      	b.n	8006936 <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 8006922:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006926:	3b3c      	subs	r3, #60	; 0x3c
 8006928:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        hours++;
 800692c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006930:	3301      	adds	r3, #1
 8006932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( minutes >= 60 )
 8006936:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800693a:	2b3b      	cmp	r3, #59	; 0x3b
 800693c:	d8f1      	bhi.n	8006922 <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 800693e:	e00b      	b.n	8006958 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 8006940:	2318      	movs	r3, #24
 8006942:	b29b      	uxth	r3, r3
 8006944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        days++;
 800694e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006952:	3301      	adds	r3, #1
 8006954:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( hours >= HoursInDay )
 8006958:	2318      	movs	r3, #24
 800695a:	b29b      	uxth	r3, r3
 800695c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006960:	429a      	cmp	r2, r3
 8006962:	d2ed      	bcs.n	8006940 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 8006964:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 800696c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006970:	461a      	mov	r2, r3
 8006972:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <RtcComputeTimerTimeToAlarmTick+0x394>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	4413      	add	r3, r2
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d118      	bne.n	80069b2 <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 8006980:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006984:	3b01      	subs	r3, #1
 8006986:	4a30      	ldr	r2, [pc, #192]	; (8006a48 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8006988:	5cd3      	ldrb	r3, [r2, r3]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006990:	429a      	cmp	r2, r3
 8006992:	d926      	bls.n	80069e2 <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 8006994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006998:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800699c:	3a01      	subs	r2, #1
 800699e:	492a      	ldr	r1, [pc, #168]	; (8006a48 <RtcComputeTimerTimeToAlarmTick+0x398>)
 80069a0:	5c8a      	ldrb	r2, [r1, r2]
 80069a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80069a6:	fb01 f202 	mul.w	r2, r1, r2
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 80069b0:	e017      	b.n	80069e2 <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 80069b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a24      	ldr	r2, [pc, #144]	; (8006a4c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d90d      	bls.n	80069e2 <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 80069c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80069ce:	3a01      	subs	r2, #1
 80069d0:	491e      	ldr	r1, [pc, #120]	; (8006a4c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80069d2:	5c8a      	ldrb	r2, [r1, r2]
 80069d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80069d8:	fb01 f202 	mul.w	r2, r1, r2
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 80069e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 80069ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 80069f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 80069fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	743b      	strb	r3, [r7, #16]

    return calendar;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	461d      	mov	r5, r3
 8006a06:	f107 040c 	add.w	r4, r7, #12
 8006a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	3748      	adds	r7, #72	; 0x48
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006a20:	b002      	add	sp, #8
 8006a22:	4770      	bx	lr
 8006a24:	f3af 8000 	nop.w
 8006a28:	a0b5ed8d 	.word	0xa0b5ed8d
 8006a2c:	3f60c6f7 	.word	0x3f60c6f7
 8006a30:	00015180 	.word	0x00015180
 8006a34:	3fdf4000 	.word	0x3fdf4000
 8006a38:	200009b8 	.word	0x200009b8
 8006a3c:	408f4000 	.word	0x408f4000
 8006a40:	3ff00000 	.word	0x3ff00000
 8006a44:	20000968 	.word	0x20000968
 8006a48:	0800ac68 	.word	0x0800ac68
 8006a4c:	0800ac5c 	.word	0x0800ac5c

08006a50 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 8006a50:	b5b0      	push	{r4, r5, r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f906 	bl	8006c84 <RtcGetCalendar>
 8006a78:	e009      	b.n	8006a8e <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f107 040c 	add.w	r4, r7, #12
 8006a80:	461d      	mov	r5, r3
 8006a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 8006a8e:	2300      	movs	r3, #0
 8006a90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a92:	e02c      	b.n	8006aee <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 8006a94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <RtcConvertCalendarTickToTimerTime+0x58>
 8006a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10e      	bne.n	8006ac6 <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 8006aa8:	4b5d      	ldr	r3, [pc, #372]	; (8006c20 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7f9 fd22 	bl	80004f4 <__aeabi_ui2d>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ab8:	f7f9 fbe0 	bl	800027c <__adddf3>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006ac4:	e00d      	b.n	8006ae2 <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 8006ac6:	4b57      	ldr	r3, [pc, #348]	; (8006c24 <RtcConvertCalendarTickToTimerTime+0x1d4>)
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7f9 fd13 	bl	80004f4 <__aeabi_ui2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ad6:	f7f9 fbd1 	bl	800027c <__adddf3>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 8006ae2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3301      	adds	r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006aee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006af2:	7c7b      	ldrb	r3, [r7, #17]
 8006af4:	4619      	mov	r1, r3
 8006af6:	89bb      	ldrh	r3, [r7, #12]
 8006af8:	440b      	add	r3, r1
 8006afa:	429a      	cmp	r2, r3
 8006afc:	dbca      	blt.n	8006a94 <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 8006afe:	7c7b      	ldrb	r3, [r7, #17]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <RtcConvertCalendarTickToTimerTime+0xc4>
 8006b04:	7c7b      	ldrb	r3, [r7, #17]
 8006b06:	461a      	mov	r2, r3
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d124      	bne.n	8006b5e <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006b1a:	e019      	b.n	8006b50 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 8006b1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b20:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 8006b22:	5cd3      	ldrb	r3, [r2, r3]
 8006b24:	461a      	mov	r2, r3
 8006b26:	4b41      	ldr	r3, [pc, #260]	; (8006c2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7f9 fce1 	bl	80004f4 <__aeabi_ui2d>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006b3a:	f7f9 fb9f 	bl	800027c <__adddf3>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8006b46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006b50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	dbdf      	blt.n	8006b1c <RtcConvertCalendarTickToTimerTime+0xcc>
 8006b5c:	e023      	b.n	8006ba6 <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006b64:	e019      	b.n	8006b9a <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 8006b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b6a:	4a31      	ldr	r2, [pc, #196]	; (8006c30 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 8006b6c:	5cd3      	ldrb	r3, [r2, r3]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7f9 fcbc 	bl	80004f4 <__aeabi_ui2d>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006b84:	f7f9 fb7a 	bl	800027c <__adddf3>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8006b90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b94:	3301      	adds	r3, #1
 8006b96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006b9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	dbdf      	blt.n	8006b66 <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 8006ba6:	7dbb      	ldrb	r3, [r7, #22]
 8006ba8:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 8006baa:	7d3b      	ldrb	r3, [r7, #20]
 8006bac:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006bb0:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 8006bb4:	7d7b      	ldrb	r3, [r7, #21]
 8006bb6:	203c      	movs	r0, #60	; 0x3c
 8006bb8:	fb00 f303 	mul.w	r3, r0, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 8006bc0:	7c3b      	ldrb	r3, [r7, #16]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4b19      	ldr	r3, [pc, #100]	; (8006c2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 8006bca:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7f9 fc91 	bl	80004f4 <__aeabi_ui2d>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006bda:	f7f9 fb4f 	bl	800027c <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <RtcConvertCalendarTickToTimerTime+0x1e4>)
 8006bec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006bf0:	f7f9 fcfa 	bl	80005e8 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounter = round( timeCounterTemp );
 8006bfc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8006c00:	f003 ffae 	bl	800ab60 <round>
 8006c04:	ec53 2b10 	vmov	r2, r3, d0
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f7f9 ffae 	bl	8000b6c <__aeabi_d2uiz>
 8006c10:	4603      	mov	r3, r0
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
    return ( timeCounter );
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3738      	adds	r7, #56	; 0x38
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	01e28500 	.word	0x01e28500
 8006c24:	01e13380 	.word	0x01e13380
 8006c28:	0800ac68 	.word	0x0800ac68
 8006c2c:	00015180 	.word	0x00015180
 8006c30:	0800ac5c 	.word	0x0800ac5c
 8006c34:	3fdf4000 	.word	0x3fdf4000

08006c38 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	2b63      	cmp	r3, #99	; 0x63
 8006c46:	d102      	bne.n	8006c4e <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <RtcCheckCalendarRollOver+0x44>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <RtcCheckCalendarRollOver+0x44>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <RtcCheckCalendarRollOver+0x36>
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <RtcCheckCalendarRollOver+0x44>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <RtcCheckCalendarRollOver+0x48>)
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	3364      	adds	r3, #100	; 0x64
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <RtcCheckCalendarRollOver+0x48>)
 8006c6c:	801a      	strh	r2, [r3, #0]
    }
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	2000096a 	.word	0x2000096a
 8006c80:	20000968 	.word	0x20000968

08006c84 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 8006c84:	b5b0      	push	{r4, r5, r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 8006c8c:	f107 030c 	add.w	r3, r7, #12
 8006c90:	3308      	adds	r3, #8
 8006c92:	2200      	movs	r2, #0
 8006c94:	4619      	mov	r1, r3
 8006c96:	4810      	ldr	r0, [pc, #64]	; (8006cd8 <RtcGetCalendar+0x54>)
 8006c98:	f7fc fd92 	bl	80037c0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	480c      	ldr	r0, [pc, #48]	; (8006cd8 <RtcGetCalendar+0x54>)
 8006ca8:	f7fc fe6d 	bl	8003986 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <RtcGetCalendar+0x58>)
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 8006cb2:	7c7b      	ldrb	r3, [r7, #17]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff ffbf 	bl	8006c38 <RtcCheckCalendarRollOver>
    return calendar;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	f107 040c 	add.w	r4, r7, #12
 8006cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cc6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006cca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	3728      	adds	r7, #40	; 0x28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000098c 	.word	0x2000098c
 8006cdc:	20000968 	.word	0x20000968

08006ce0 <RTC_Alarm_IRQHandler>:

/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
void RTC_Alarm_IRQHandler( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <RTC_Alarm_IRQHandler+0x2c>)
 8006ce6:	f7fd f92b 	bl	8003f40 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cee:	4807      	ldr	r0, [pc, #28]	; (8006d0c <RTC_Alarm_IRQHandler+0x2c>)
 8006cf0:	f7fc ffd2 	bl	8003c98 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 8006cf4:	f7ff fc02 	bl	80064fc <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 8006cf8:	f7ff fc24 	bl	8006544 <RtcComputeWakeUpTime>
    BlockLowPowerDuringTask( false );
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f7ff fbe9 	bl	80064d4 <BlockLowPowerDuringTask>
    TimerIrqHandler( );
 8006d02:	f000 fb73 	bl	80073ec <TimerIrqHandler>
}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	2000098c 	.word	0x2000098c

08006d10 <__ffs>:
 *
 * \param [in]  value  Value to find least significant index
 * \retval bitIndex    Index of least significat bit at one
 */
__STATIC_INLINE uint8_t __ffs( uint32_t value )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    return( uint32_t )( 32 - __CLZ( value & ( -value ) ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	425a      	negs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <__ffs+0x1c>
    return 32U;
 8006d28:	2320      	movs	r3, #32
 8006d2a:	e003      	b.n	8006d34 <__ffs+0x24>
  return __builtin_clz(value);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	fab3 f383 	clz	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f1c3 0320 	rsb	r3, r3, #32
 8006d38:	b2db      	uxtb	r3, r3
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <SpiInit>:
    SPI_1 = ( uint32_t )SPI1_BASE,
    SPI_2 = ( uint32_t )SPI2_BASE,
}SPIName;

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70bb      	strb	r3, [r7, #2]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 8006d62:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <SpiInit+0x114>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	4a3d      	ldr	r2, [pc, #244]	; (8006e5c <SpiInit+0x114>)
 8006d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d6c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RCC_SPI1_RELEASE_RESET( );
 8006d6e:	4b3b      	ldr	r3, [pc, #236]	; (8006e5c <SpiInit+0x114>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	4a3a      	ldr	r2, [pc, #232]	; (8006e5c <SpiInit+0x114>)
 8006d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d78:	6413      	str	r3, [r2, #64]	; 0x40

    __HAL_RCC_SPI1_CLK_ENABLE( );
 8006d7a:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <SpiInit+0x114>)
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	4a37      	ldr	r2, [pc, #220]	; (8006e5c <SpiInit+0x114>)
 8006d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d84:	6613      	str	r3, [r2, #96]	; 0x60
 8006d86:	4b35      	ldr	r3, [pc, #212]	; (8006e5c <SpiInit+0x114>)
 8006d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]

    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a32      	ldr	r2, [pc, #200]	; (8006e60 <SpiInit+0x118>)
 8006d96:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8006d9e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8006da2:	2305      	movs	r3, #5
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	2302      	movs	r3, #2
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	2202      	movs	r2, #2
 8006dae:	f7ff fa73 	bl	8006298 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006db8:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8006dbc:	2305      	movs	r3, #5
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f7ff fa66 	bl	8006298 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8006dd2:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8006dd6:	2305      	movs	r3, #5
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	2302      	movs	r3, #2
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2300      	movs	r3, #0
 8006de0:	2202      	movs	r2, #2
 8006de2:	f7ff fa59 	bl	8006298 <GpioInit>

    if( nss != NC )
 8006de6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d00d      	beq.n	8006e0c <SpiInit+0xc4>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8006df6:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8006dfa:	2305      	movs	r3, #5
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	2202      	movs	r2, #2
 8006e06:	f7ff fa47 	bl	8006298 <GpioInit>
 8006e0a:	e003      	b.n	8006e14 <SpiInit+0xcc>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e12:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 8006e14:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d109      	bne.n	8006e32 <SpiInit+0xea>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	2200      	movs	r2, #0
 8006e26:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f81c 	bl	8006e68 <SpiFormat>
 8006e30:	e008      	b.n	8006e44 <SpiInit+0xfc>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 8006e32:	2301      	movs	r3, #1
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	2300      	movs	r3, #0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f812 	bl	8006e68 <SpiFormat>
    }
//    SpiFrequency( obj, 10000000 );
    SpiFrequency( obj, 100000 );
 8006e44:	4907      	ldr	r1, [pc, #28]	; (8006e64 <SpiInit+0x11c>)
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f850 	bl	8006eec <SpiFrequency>

    HAL_SPI_Init( &obj->Spi );
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fd f9ff 	bl	8004252 <HAL_SPI_Init>
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40013000 	.word	0x40013000
 8006e64:	000186a0 	.word	0x000186a0

08006e68 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	460b      	mov	r3, r1
 8006e78:	71fb      	strb	r3, [r7, #7]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71bb      	strb	r3, [r7, #6]
    obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	609a      	str	r2, [r3, #8]
    if( bits == SPI_DATASIZE_8BIT )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e8a:	d104      	bne.n	8006e96 <SpiFormat+0x2e>
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006e92:	60da      	str	r2, [r3, #12]
 8006e94:	e003      	b.n	8006e9e <SpiFormat+0x36>
    }
    else
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006e9c:	60da      	str	r2, [r3, #12]
    }
    obj->Spi.Init.CLKPolarity = cpol;
 8006e9e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	611a      	str	r2, [r3, #16]
    obj->Spi.Init.CLKPhase = cpha;
 8006ea6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	615a      	str	r2, [r3, #20]
    obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	621a      	str	r2, [r3, #32]
    obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24
    obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28
    obj->Spi.Init.CRCPolynomial = 7;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    if( slave == 0 )
 8006ec6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <SpiFormat+0x70>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ed4:	605a      	str	r2, [r3, #4]
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
    }
}
 8006ed6:	e002      	b.n	8006ede <SpiFormat+0x76>
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
    uint32_t divisor;

    divisor = SystemCoreClock / hz;
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <SpiFrequency+0x84>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	60fb      	str	r3, [r7, #12]

    // Find the nearest power-of-2
    divisor = divisor > 0 ? divisor-1 : 0;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <SpiFrequency+0x22>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <SpiFrequency+0x24>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
    divisor |= divisor >> 1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
    divisor |= divisor >> 2;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	089b      	lsrs	r3, r3, #2
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    divisor |= divisor >> 4;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
    divisor |= divisor >> 8;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
    divisor |= divisor >> 16;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
    divisor++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]

    divisor = __ffs( divisor ) - 1;
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff fee0 	bl	8006d10 <__ffs>
 8006f50:	4603      	mov	r3, r0
 8006f52:	3b01      	subs	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]

    divisor = ( divisor > 0x07 ) ? 0x07 : divisor;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	bf28      	it	cs
 8006f5c:	2307      	movcs	r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]

    obj->Spi.Init.BaudRatePrescaler = divisor << 3;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	00da      	lsls	r2, r3, #3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	61da      	str	r2, [r3, #28]
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000004 	.word	0x20000004

08006f74 <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	2300      	movs	r3, #0
 8006f84:	2201      	movs	r2, #1
 8006f86:	2116      	movs	r1, #22
 8006f88:	4820      	ldr	r0, [pc, #128]	; (800700c <SX1276IoInit+0x98>)
 8006f8a:	f7ff f985 	bl	8006298 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	2301      	movs	r3, #1
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2300      	movs	r3, #0
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2111      	movs	r1, #17
 8006f9c:	481c      	ldr	r0, [pc, #112]	; (8007010 <SX1276IoInit+0x9c>)
 8006f9e:	f7ff f97b 	bl	8006298 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	211a      	movs	r1, #26
 8006fb0:	4818      	ldr	r0, [pc, #96]	; (8007014 <SX1276IoInit+0xa0>)
 8006fb2:	f7ff f971 	bl	8006298 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	211b      	movs	r1, #27
 8006fc4:	4814      	ldr	r0, [pc, #80]	; (8007018 <SX1276IoInit+0xa4>)
 8006fc6:	f7ff f967 	bl	8006298 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	2301      	movs	r3, #1
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	211c      	movs	r1, #28
 8006fd8:	4810      	ldr	r0, [pc, #64]	; (800701c <SX1276IoInit+0xa8>)
 8006fda:	f7ff f95d 	bl	8006298 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2115      	movs	r1, #21
 8006fec:	480c      	ldr	r0, [pc, #48]	; (8007020 <SX1276IoInit+0xac>)
 8006fee:	f7ff f953 	bl	8006298 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2114      	movs	r1, #20
 8007000:	4808      	ldr	r0, [pc, #32]	; (8007024 <SX1276IoInit+0xb0>)
 8007002:	f7ff f949 	bl	8006298 <GpioInit>
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000bc0 	.word	0x20000bc0
 8007010:	20000af0 	.word	0x20000af0
 8007014:	20000afc 	.word	0x20000afc
 8007018:	20000b08 	.word	0x20000b08
 800701c:	20000b14 	.word	0x20000b14
 8007020:	20000b20 	.word	0x20000b20
 8007024:	20000b2c 	.word	0x20000b2c

08007028 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2203      	movs	r2, #3
 8007036:	2101      	movs	r1, #1
 8007038:	4817      	ldr	r0, [pc, #92]	; (8007098 <SX1276IoIrqInit+0x70>)
 800703a:	f7ff f951 	bl	80062e0 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3304      	adds	r3, #4
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2203      	movs	r2, #3
 8007046:	2101      	movs	r1, #1
 8007048:	4814      	ldr	r0, [pc, #80]	; (800709c <SX1276IoIrqInit+0x74>)
 800704a:	f7ff f949 	bl	80062e0 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3308      	adds	r3, #8
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2203      	movs	r2, #3
 8007056:	2101      	movs	r1, #1
 8007058:	4811      	ldr	r0, [pc, #68]	; (80070a0 <SX1276IoIrqInit+0x78>)
 800705a:	f7ff f941 	bl	80062e0 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	330c      	adds	r3, #12
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2203      	movs	r2, #3
 8007066:	2101      	movs	r1, #1
 8007068:	480e      	ldr	r0, [pc, #56]	; (80070a4 <SX1276IoIrqInit+0x7c>)
 800706a:	f7ff f939 	bl	80062e0 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3310      	adds	r3, #16
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2203      	movs	r2, #3
 8007076:	2101      	movs	r1, #1
 8007078:	480b      	ldr	r0, [pc, #44]	; (80070a8 <SX1276IoIrqInit+0x80>)
 800707a:	f7ff f931 	bl	80062e0 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3314      	adds	r3, #20
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2203      	movs	r2, #3
 8007086:	2101      	movs	r1, #1
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <SX1276IoIrqInit+0x84>)
 800708a:	f7ff f929 	bl	80062e0 <GpioSetInterrupt>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000af0 	.word	0x20000af0
 800709c:	20000afc 	.word	0x20000afc
 80070a0:	20000b08 	.word	0x20000b08
 80070a4:	20000b14 	.word	0x20000b14
 80070a8:	20000b20 	.word	0x20000b20
 80070ac:	20000b2c 	.word	0x20000b2c

080070b0 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 80070b8:	2380      	movs	r3, #128	; 0x80
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <SX1276SetAntSwLowPower+0x38>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	79fa      	ldrb	r2, [r7, #7]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d00d      	beq.n	80070f8 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <SX1276SetAntSwLowPower+0x38>)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	7013      	strb	r3, [r2, #0]
    
        if( status == false )
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	f083 0301 	eor.w	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 80070ee:	f000 f809 	bl	8007104 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 80070f2:	e001      	b.n	80070f8 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 80070f4:	f000 f824 	bl	8007140 <SX1276AntSwDeInit>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200009bc 	.word	0x200009bc

08007104 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800710a:	2300      	movs	r3, #0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2301      	movs	r3, #1
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2300      	movs	r3, #0
 8007114:	2201      	movs	r2, #1
 8007116:	2104      	movs	r1, #4
 8007118:	4807      	ldr	r0, [pc, #28]	; (8007138 <SX1276AntSwInit+0x34>)
 800711a:	f7ff f8bd 	bl	8006298 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800711e:	2301      	movs	r3, #1
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	2301      	movs	r3, #1
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	2201      	movs	r2, #1
 800712a:	212d      	movs	r1, #45	; 0x2d
 800712c:	4803      	ldr	r0, [pc, #12]	; (800713c <SX1276AntSwInit+0x38>)
 800712e:	f7ff f8b3 	bl	8006298 <GpioInit>
}
 8007132:	bf00      	nop
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200009cc 	.word	0x200009cc
 800713c:	200009c0 	.word	0x200009c0

08007140 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8007146:	2300      	movs	r3, #0
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	2300      	movs	r3, #0
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	2203      	movs	r2, #3
 8007152:	2104      	movs	r1, #4
 8007154:	4807      	ldr	r0, [pc, #28]	; (8007174 <SX1276AntSwDeInit+0x34>)
 8007156:	f7ff f89f 	bl	8006298 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800715a:	2300      	movs	r3, #0
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	2300      	movs	r3, #0
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	2203      	movs	r2, #3
 8007166:	212d      	movs	r1, #45	; 0x2d
 8007168:	4803      	ldr	r0, [pc, #12]	; (8007178 <SX1276AntSwDeInit+0x38>)
 800716a:	f7ff f895 	bl	8006298 <GpioInit>
}
 800716e:	bf00      	nop
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200009cc 	.word	0x200009cc
 8007178:	200009c0 	.word	0x200009c0

0800717c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 800718c:	2100      	movs	r1, #0
 800718e:	480a      	ldr	r0, [pc, #40]	; (80071b8 <SX1276SetAntSw+0x3c>)
 8007190:	f7ff f8c1 	bl	8006316 <GpioWrite>
        GpioWrite( &AntTx, 1 );
 8007194:	2101      	movs	r1, #1
 8007196:	4809      	ldr	r0, [pc, #36]	; (80071bc <SX1276SetAntSw+0x40>)
 8007198:	f7ff f8bd 	bl	8006316 <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 800719c:	e007      	b.n	80071ae <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 800719e:	2101      	movs	r1, #1
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <SX1276SetAntSw+0x3c>)
 80071a2:	f7ff f8b8 	bl	8006316 <GpioWrite>
        GpioWrite( &AntTx, 0 );
 80071a6:	2100      	movs	r1, #0
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <SX1276SetAntSw+0x40>)
 80071aa:	f7ff f8b4 	bl	8006316 <GpioWrite>
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200009c0 	.word	0x200009c0
 80071bc:	200009cc 	.word	0x200009cc

080071c0 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80071c8:	2301      	movs	r3, #1
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800721c:	b672      	cpsid	i
}
 800721e:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <TimerStart+0x26>
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9d4 	bl	80075d4 <TimerExists>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8007232:	b662      	cpsie	i
}
 8007234:	bf00      	nop
    {
        __enable_irq( );
        return;
 8007236:	e03e      	b.n	80072b6 <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 8007246:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <TimerStart+0xb0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f8a1 	bl	800739c <TimerInsertNewHeadTimer>
 800725a:	e02a      	b.n	80072b2 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <TimerStart+0xb0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	7a1b      	ldrb	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d013      	beq.n	800728e <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 8007266:	f000 f9e5 	bl	8007634 <TimerGetValue>
 800726a:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 800726c:	4b13      	ldr	r3, [pc, #76]	; (80072bc <TimerStart+0xb0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d903      	bls.n	8007280 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <TimerStart+0xb0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8007280:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <TimerStart+0xb0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	e003      	b.n	8007296 <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <TimerStart+0xb0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d904      	bls.n	80072aa <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f87a 	bl	800739c <TimerInsertNewHeadTimer>
 80072a8:	e003      	b.n	80072b2 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f807 	bl	80072c0 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 80072b2:	b662      	cpsie	i
}
 80072b4:	bf00      	nop
        }
    }
    __enable_irq( );
}
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200009dc 	.word	0x200009dc

080072c0 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 80072d2:	4b31      	ldr	r3, [pc, #196]	; (8007398 <TimerInsertTimer+0xd8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 80072d8:	4b2f      	ldr	r3, [pc, #188]	; (8007398 <TimerInsertTimer+0xd8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10c      	bne.n	8007300 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	1ad2      	subs	r2, r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 80072fe:	e045      	b.n	800738c <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	4413      	add	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800730e:	e039      	b.n	8007384 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	429a      	cmp	r2, r3
 8007318:	d916      	bls.n	8007348 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	611a      	str	r2, [r3, #16]
                break;
 8007346:	e021      	b.n	800738c <TimerInsertTimer+0xcc>
                prev = cur;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10e      	bne.n	8007376 <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	611a      	str	r2, [r3, #16]
                    break;
 8007374:	e00a      	b.n	800738c <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4413      	add	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1c2      	bne.n	8007310 <TimerInsertTimer+0x50>
}
 800738a:	e7ff      	b.n	800738c <TimerInsertTimer+0xcc>
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	200009dc 	.word	0x200009dc

0800739c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <TimerInsertNewHeadTimer+0x4c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d008      	beq.n	80073c4 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 80073d0:	4a05      	ldr	r2, [pc, #20]	; (80073e8 <TimerInsertNewHeadTimer+0x4c>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 80073d6:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <TimerInsertNewHeadTimer+0x4c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f932 	bl	8007644 <TimerSetTimeout>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200009dc 	.word	0x200009dc

080073ec <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 80073f6:	f000 f91d 	bl	8007634 <TimerGetValue>
 80073fa:	6078      	str	r0, [r7, #4]
    
    if( elapsedTime >= TimerListHead->Timestamp )
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <TimerIrqHandler+0xa4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d304      	bcc.n	8007412 <TimerIrqHandler+0x26>
    {
        TimerListHead->Timestamp = 0;
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <TimerIrqHandler+0xa4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e007      	b.n	8007422 <TimerIrqHandler+0x36>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <TimerIrqHandler+0xa4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6819      	ldr	r1, [r3, #0]
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <TimerIrqHandler+0xa4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	1a8a      	subs	r2, r1, r2
 8007420:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 8007422:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <TimerIrqHandler+0xa4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2200      	movs	r2, #0
 8007428:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800742a:	e00e      	b.n	800744a <TimerIrqHandler+0x5e>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 800742c:	4b18      	ldr	r3, [pc, #96]	; (8007490 <TimerIrqHandler+0xa4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 8007432:	4b17      	ldr	r3, [pc, #92]	; (8007490 <TimerIrqHandler+0xa4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	4a15      	ldr	r2, [pc, #84]	; (8007490 <TimerIrqHandler+0xa4>)
 800743a:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <TimerIrqHandler+0x5e>
        {
            elapsedTimer->Callback( );
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800744a:	4b11      	ldr	r3, [pc, #68]	; (8007490 <TimerIrqHandler+0xa4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <TimerIrqHandler+0x70>
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <TimerIrqHandler+0xa4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0e7      	beq.n	800742c <TimerIrqHandler+0x40>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <TimerIrqHandler+0xa4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <TimerIrqHandler+0x9a>
    {
        if( TimerListHead->IsRunning != true )
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <TimerIrqHandler+0xa4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	7a1b      	ldrb	r3, [r3, #8]
 800746a:	f083 0301 	eor.w	r3, r3, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <TimerIrqHandler+0x9a>
        {
            TimerListHead->IsRunning = true;
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <TimerIrqHandler+0xa4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <TimerIrqHandler+0xa4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f8df 	bl	8007644 <TimerSetTimeout>
        }
    }
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	200009dc 	.word	0x200009dc

08007494 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800749c:	b672      	cpsid	i
}
 800749e:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 80074a8:	4b49      	ldr	r3, [pc, #292]	; (80075d0 <TimerStop+0x13c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 80074ae:	4b48      	ldr	r3, [pc, #288]	; (80075d0 <TimerStop+0x13c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80074b4:	4b46      	ldr	r3, [pc, #280]	; (80075d0 <TimerStop+0x13c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <TimerStop+0x2e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80074c2:	b662      	cpsie	i
}
 80074c4:	bf00      	nop
    {
        __enable_irq( );
        return;
 80074c6:	e080      	b.n	80075ca <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 80074c8:	4b41      	ldr	r3, [pc, #260]	; (80075d0 <TimerStop+0x13c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d152      	bne.n	8007578 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 80074d2:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <TimerStop+0x13c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	7a1b      	ldrb	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d033      	beq.n	8007544 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 80074dc:	f000 f8aa 	bl	8007634 <TimerGetValue>
 80074e0:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 80074fc:	4b34      	ldr	r3, [pc, #208]	; (80075d0 <TimerStop+0x13c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01a      	beq.n	800753c <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 8007506:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <TimerStop+0x13c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2200      	movs	r2, #0
 800750c:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 800750e:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <TimerStop+0x13c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <TimerStop+0x13c>)
 8007516:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8007518:	4b2d      	ldr	r3, [pc, #180]	; (80075d0 <TimerStop+0x13c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <TimerStop+0x13c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	440a      	add	r2, r1
 8007526:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8007528:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <TimerStop+0x13c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 8007530:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <TimerStop+0x13c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f885 	bl	8007644 <TimerSetTimeout>
 800753a:	e044      	b.n	80075c6 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <TimerStop+0x13c>)
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e040      	b.n	80075c6 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8007544:	4b22      	ldr	r3, [pc, #136]	; (80075d0 <TimerStop+0x13c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8007554:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <TimerStop+0x13c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <TimerStop+0x13c>)
 800755c:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800755e:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <TimerStop+0x13c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <TimerStop+0x13c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	440a      	add	r2, r1
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e02a      	b.n	80075c6 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8007570:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <TimerStop+0x13c>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e026      	b.n	80075c6 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 800757e:	e01f      	b.n	80075c0 <TimerStop+0x12c>
        {
            if( cur == obj )
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d116      	bne.n	80075b6 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00c      	beq.n	80075aa <TimerStop+0x116>
                {
                    cur = cur->Next;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 80075a8:	e00d      	b.n	80075c6 <TimerStop+0x132>
                    cur = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	611a      	str	r2, [r3, #16]
                break;
 80075b4:	e007      	b.n	80075c6 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1dc      	bne.n	8007580 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 80075c6:	b662      	cpsie	i
}
 80075c8:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	200009dc 	.word	0x200009dc

080075d4 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <TimerExists+0x38>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 80075e2:	e008      	b.n	80075f6 <TimerExists+0x22>
    {
        if( cur == obj )
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d101      	bne.n	80075f0 <TimerExists+0x1c>
        {
            return true;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e006      	b.n	80075fe <TimerExists+0x2a>
        }
        cur = cur->Next;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f3      	bne.n	80075e4 <TimerExists+0x10>
    }
    return false;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	200009dc 	.word	0x200009dc

08007610 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff3a 	bl	8007494 <TimerStop>
    obj->Timestamp = value;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	605a      	str	r2, [r3, #4]
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8007638:	f7fe ff2a 	bl	8006490 <RtcGetElapsedAlarmTime>
 800763c:	4603      	mov	r3, r0
}
 800763e:	4618      	mov	r0, r3
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <TimerSetTimeout+0x30>)
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fee2 	bl	8006420 <RtcGetAdjustedTimeoutValue>
 800765c:	4602      	mov	r2, r0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fece 	bl	8006408 <RtcSetTimeout>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200009d8 	.word	0x200009d8

08007678 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8007686:	e007      	b.n	8007698 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	1c53      	adds	r3, r2, #1
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1c59      	adds	r1, r3, #1
 8007692:	60f9      	str	r1, [r7, #12]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	80fa      	strh	r2, [r7, #6]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f2      	bne.n	8007688 <memcpy1+0x10>
    }
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80076b8:	4a24      	ldr	r2, [pc, #144]	; (800774c <SX1276Init+0x9c>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80076be:	4924      	ldr	r1, [pc, #144]	; (8007750 <SX1276Init+0xa0>)
 80076c0:	4824      	ldr	r0, [pc, #144]	; (8007754 <SX1276Init+0xa4>)
 80076c2:	f7ff fd88 	bl	80071d6 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80076c6:	4922      	ldr	r1, [pc, #136]	; (8007750 <SX1276Init+0xa0>)
 80076c8:	4823      	ldr	r0, [pc, #140]	; (8007758 <SX1276Init+0xa8>)
 80076ca:	f7ff fd84 	bl	80071d6 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80076ce:	4920      	ldr	r1, [pc, #128]	; (8007750 <SX1276Init+0xa0>)
 80076d0:	4822      	ldr	r0, [pc, #136]	; (800775c <SX1276Init+0xac>)
 80076d2:	f7ff fd80 	bl	80071d6 <TimerInit>

    SX1276Reset( );
 80076d6:	f001 fb7b 	bl	8008dd0 <SX1276Reset>

    RxChainCalibration( );
 80076da:	f000 f8e5 	bl	80078a8 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80076de:	2000      	movs	r0, #0
 80076e0:	f001 fb98 	bl	8008e14 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 80076e4:	481e      	ldr	r0, [pc, #120]	; (8007760 <SX1276Init+0xb0>)
 80076e6:	f7ff fc9f 	bl	8007028 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
 80076ee:	e01f      	b.n	8007730 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	491c      	ldr	r1, [pc, #112]	; (8007764 <SX1276Init+0xb4>)
 80076f4:	4613      	mov	r3, r2
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	4413      	add	r3, r2
 80076fa:	440b      	add	r3, r1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fbb6 	bl	8008e70 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007704:	7bfa      	ldrb	r2, [r7, #15]
 8007706:	4917      	ldr	r1, [pc, #92]	; (8007764 <SX1276Init+0xb4>)
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	440b      	add	r3, r1
 8007710:	3301      	adds	r3, #1
 8007712:	7818      	ldrb	r0, [r3, #0]
 8007714:	7bfa      	ldrb	r2, [r7, #15]
 8007716:	4913      	ldr	r1, [pc, #76]	; (8007764 <SX1276Init+0xb4>)
 8007718:	4613      	mov	r3, r2
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	4413      	add	r3, r2
 800771e:	440b      	add	r3, r1
 8007720:	3302      	adds	r3, #2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	4619      	mov	r1, r3
 8007726:	f001 fbe5 	bl	8008ef4 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	3301      	adds	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b10      	cmp	r3, #16
 8007734:	d9dc      	bls.n	80076f0 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 8007736:	2000      	movs	r0, #0
 8007738:	f001 fb9a 	bl	8008e70 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <SX1276Init+0xb8>)
 800773e:	2200      	movs	r2, #0
 8007740:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	200009e0 	.word	0x200009e0
 8007750:	08009089 	.word	0x08009089
 8007754:	20000c28 	.word	0x20000c28
 8007758:	20000c3c 	.word	0x20000c3c
 800775c:	20000c50 	.word	0x20000c50
 8007760:	20000010 	.word	0x20000010
 8007764:	0800acc8 	.word	0x0800acc8
 8007768:	20000ae4 	.word	0x20000ae4

0800776c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <SX1276GetStatus+0x14>)
 8007772:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
}
 8007776:	4618      	mov	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20000ae4 	.word	0x20000ae4
 8007784:	00000000 	.word	0x00000000

08007788 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 8007790:	4a17      	ldr	r2, [pc, #92]	; (80077f0 <SX1276SetChannel+0x68>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7f8 feab 	bl	80004f4 <__aeabi_ui2d>
 800779e:	a312      	add	r3, pc, #72	; (adr r3, 80077e8 <SX1276SetChannel+0x60>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f9 f84a 	bl	800083c <__aeabi_ddiv>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	f7f9 f9dc 	bl	8000b6c <__aeabi_d2uiz>
 80077b4:	4603      	mov	r3, r0
 80077b6:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	4619      	mov	r1, r3
 80077c0:	2006      	movs	r0, #6
 80077c2:	f001 fb97 	bl	8008ef4 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	0a1b      	lsrs	r3, r3, #8
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	4619      	mov	r1, r3
 80077ce:	2007      	movs	r0, #7
 80077d0:	f001 fb90 	bl	8008ef4 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	2008      	movs	r0, #8
 80077dc:	f001 fb8a 	bl	8008ef4 <SX1276Write>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	00000000 	.word	0x00000000
 80077ec:	404e8480 	.word	0x404e8480
 80077f0:	20000ae4 	.word	0x20000ae4

080077f4 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
 8007800:	4613      	mov	r3, r2
 8007802:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fb30 	bl	8008e70 <SX1276SetModem>

    SX1276SetChannel( freq );
 8007810:	6838      	ldr	r0, [r7, #0]
 8007812:	f7ff ffb9 	bl	8007788 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007816:	2005      	movs	r0, #5
 8007818:	f001 fafc 	bl	8008e14 <SX1276SetOpMode>

    DelayMs( 1 );
 800781c:	2001      	movs	r0, #1
 800781e:	f7fe faa3 	bl	8005d68 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	4618      	mov	r0, r3
 8007826:	f001 fa95 	bl	8008d54 <SX1276ReadRssi>
 800782a:	4603      	mov	r3, r0
 800782c:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800782e:	f000 ff6d 	bl	800870c <SX1276SetSleep>

    if( rssi > rssiThresh )
 8007832:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	dd01      	ble.n	8007842 <SX1276IsChannelFree+0x4e>
    {
        return false;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <SX1276IsChannelFree+0x50>
    }
    return true;
 8007842:	2301      	movs	r3, #1
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SX1276Random>:

uint32_t SX1276Random( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8007856:	2001      	movs	r0, #1
 8007858:	f001 fb0a 	bl	8008e70 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800785c:	21ff      	movs	r1, #255	; 0xff
 800785e:	2011      	movs	r0, #17
 8007860:	f001 fb48 	bl	8008ef4 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007864:	2005      	movs	r0, #5
 8007866:	f001 fad5 	bl	8008e14 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800786a:	2300      	movs	r3, #0
 800786c:	71fb      	strb	r3, [r7, #7]
 800786e:	e011      	b.n	8007894 <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8007870:	2001      	movs	r0, #1
 8007872:	f7fe fa79 	bl	8005d68 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8007876:	202c      	movs	r0, #44	; 0x2c
 8007878:	f001 fb4e 	bl	8008f18 <SX1276Read>
 800787c:	4603      	mov	r3, r0
 800787e:	f003 0201 	and.w	r2, r3, #1
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	4313      	orrs	r3, r2
 800788c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	3301      	adds	r3, #1
 8007892:	71fb      	strb	r3, [r7, #7]
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	2b1f      	cmp	r3, #31
 8007898:	d9ea      	bls.n	8007870 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800789a:	f000 ff37 	bl	800870c <SX1276SetSleep>

    return rnd;
 800789e:	683b      	ldr	r3, [r7, #0]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80078ae:	2009      	movs	r0, #9
 80078b0:	f001 fb32 	bl	8008f18 <SX1276Read>
 80078b4:	4603      	mov	r3, r0
 80078b6:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80078b8:	2006      	movs	r0, #6
 80078ba:	f001 fb2d 	bl	8008f18 <SX1276Read>
 80078be:	4603      	mov	r3, r0
 80078c0:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80078c2:	2007      	movs	r0, #7
 80078c4:	f001 fb28 	bl	8008f18 <SX1276Read>
 80078c8:	4603      	mov	r3, r0
 80078ca:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80078cc:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 80078ce:	2008      	movs	r0, #8
 80078d0:	f001 fb22 	bl	8008f18 <SX1276Read>
 80078d4:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80078d6:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80078d8:	4618      	mov	r0, r3
 80078da:	f7f8 fe0b 	bl	80004f4 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 80078de:	a325      	add	r3, pc, #148	; (adr r3, 8007974 <RxChainCalibration+0xcc>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 fe80 	bl	80005e8 <__aeabi_dmul>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	f7f9 f93c 	bl	8000b6c <__aeabi_d2uiz>
 80078f4:	4603      	mov	r3, r0
 80078f6:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80078f8:	2100      	movs	r1, #0
 80078fa:	2009      	movs	r0, #9
 80078fc:	f001 fafa 	bl	8008ef4 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8007900:	203b      	movs	r0, #59	; 0x3b
 8007902:	f001 fb09 	bl	8008f18 <SX1276Read>
 8007906:	4603      	mov	r3, r0
 8007908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790c:	b2db      	uxtb	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	203b      	movs	r0, #59	; 0x3b
 8007912:	f001 faef 	bl	8008ef4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8007916:	bf00      	nop
 8007918:	203b      	movs	r0, #59	; 0x3b
 800791a:	f001 fafd 	bl	8008f18 <SX1276Read>
 800791e:	4603      	mov	r3, r0
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b20      	cmp	r3, #32
 8007926:	d0f7      	beq.n	8007918 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8007928:	4811      	ldr	r0, [pc, #68]	; (8007970 <RxChainCalibration+0xc8>)
 800792a:	f7ff ff2d 	bl	8007788 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800792e:	203b      	movs	r0, #59	; 0x3b
 8007930:	f001 faf2 	bl	8008f18 <SX1276Read>
 8007934:	4603      	mov	r3, r0
 8007936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793a:	b2db      	uxtb	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	203b      	movs	r0, #59	; 0x3b
 8007940:	f001 fad8 	bl	8008ef4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8007944:	bf00      	nop
 8007946:	203b      	movs	r0, #59	; 0x3b
 8007948:	f001 fae6 	bl	8008f18 <SX1276Read>
 800794c:	4603      	mov	r3, r0
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b20      	cmp	r3, #32
 8007954:	d0f7      	beq.n	8007946 <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4619      	mov	r1, r3
 800795a:	2009      	movs	r0, #9
 800795c:	f001 faca 	bl	8008ef4 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8007960:	6838      	ldr	r0, [r7, #0]
 8007962:	f7ff ff11 	bl	8007788 <SX1276SetChannel>
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	bd90      	pop	{r4, r7, pc}
 800796e:	bf00      	nop
 8007970:	33bca100 	.word	0x33bca100
 8007974:	00000000 	.word	0x00000000
 8007978:	404e8480 	.word	0x404e8480

0800797c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
 8007988:	e017      	b.n	80079ba <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <GetFskBandwidthRegValue+0x54>)
 800798e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	429a      	cmp	r2, r3
 8007996:	d30d      	bcc.n	80079b4 <GetFskBandwidthRegValue+0x38>
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	3301      	adds	r3, #1
 800799c:	4a0c      	ldr	r2, [pc, #48]	; (80079d0 <GetFskBandwidthRegValue+0x54>)
 800799e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d205      	bcs.n	80079b4 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <GetFskBandwidthRegValue+0x54>)
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	4413      	add	r3, r2
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	e006      	b.n	80079c2 <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	3301      	adds	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b14      	cmp	r3, #20
 80079be:	d9e4      	bls.n	800798a <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80079c0:	e7fe      	b.n	80079c0 <GetFskBandwidthRegValue+0x44>
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	0800acfc 	.word	0x0800acfc
 80079d4:	00000000 	.word	0x00000000

080079d8 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	461a      	mov	r2, r3
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
 80079e8:	4613      	mov	r3, r2
 80079ea:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 fa3e 	bl	8008e70 <SX1276SetModem>

    switch( modem )
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <SX1276SetRxConfig+0x2a>
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f000 8095 	beq.w	8007b2a <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8007a00:	e1c4      	b.n	8007d8c <SX1276SetRxConfig+0x3b4>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007a02:	4a79      	ldr	r2, [pc, #484]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.Datarate = datarate;
 8007a0a:	4a77      	ldr	r2, [pc, #476]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8007a12:	4a75      	ldr	r2, [pc, #468]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007a1a:	4a73      	ldr	r2, [pc, #460]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a20:	f882 3106 	strb.w	r3, [r2, #262]	; 0x106
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8007a24:	4a70      	ldr	r2, [pc, #448]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a2a:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007a2e:	4a6e      	ldr	r2, [pc, #440]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a34:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007a38:	4a6b      	ldr	r2, [pc, #428]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a3a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007a3e:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8007a42:	4a69      	ldr	r2, [pc, #420]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007a48:	f882 310a 	strb.w	r3, [r2, #266]	; 0x10a
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007a4c:	4a66      	ldr	r2, [pc, #408]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007a4e:	8bbb      	ldrh	r3, [r7, #28]
 8007a50:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7f8 fd4d 	bl	80004f4 <__aeabi_ui2d>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	a160      	add	r1, pc, #384	; (adr r1, 8007be0 <SX1276SetRxConfig+0x208>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	f7f8 feea 	bl	800083c <__aeabi_ddiv>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f7f9 f87c 	bl	8000b6c <__aeabi_d2uiz>
 8007a74:	4603      	mov	r3, r0
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	0a1b      	lsrs	r3, r3, #8
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4619      	mov	r1, r3
 8007a82:	2002      	movs	r0, #2
 8007a84:	f001 fa36 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	2003      	movs	r0, #3
 8007a90:	f001 fa30 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8007a94:	68b8      	ldr	r0, [r7, #8]
 8007a96:	f7ff ff71 	bl	800797c <GetFskBandwidthRegValue>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2012      	movs	r0, #18
 8007aa0:	f001 fa28 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8007aa4:	69b8      	ldr	r0, [r7, #24]
 8007aa6:	f7ff ff69 	bl	800797c <GetFskBandwidthRegValue>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4619      	mov	r1, r3
 8007aae:	2013      	movs	r0, #19
 8007ab0:	f001 fa20 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007ab4:	8bbb      	ldrh	r3, [r7, #28]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	4619      	mov	r1, r3
 8007abe:	2025      	movs	r0, #37	; 0x25
 8007ac0:	f001 fa18 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007ac4:	8bbb      	ldrh	r3, [r7, #28]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	4619      	mov	r1, r3
 8007aca:	2026      	movs	r0, #38	; 0x26
 8007acc:	f001 fa12 	bl	8008ef4 <SX1276Write>
            if( fixLen == 1 )
 8007ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d006      	beq.n	8007ae6 <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8007ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007adc:	4619      	mov	r1, r3
 8007ade:	2032      	movs	r0, #50	; 0x32
 8007ae0:	f001 fa08 	bl	8008ef4 <SX1276Write>
 8007ae4:	e003      	b.n	8007aee <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8007ae6:	21ff      	movs	r1, #255	; 0xff
 8007ae8:	2032      	movs	r0, #50	; 0x32
 8007aea:	f001 fa03 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8007aee:	2030      	movs	r0, #48	; 0x30
 8007af0:	f001 fa12 	bl	8008f18 <SX1276Read>
 8007af4:	4603      	mov	r3, r0
 8007af6:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8007af8:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8007afc:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007afe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	d001      	beq.n	8007b0a <SX1276SetRxConfig+0x132>
 8007b06:	2200      	movs	r2, #0
 8007b08:	e001      	b.n	8007b0e <SX1276SetRxConfig+0x136>
 8007b0a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8007b12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b16:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007b18:	b25b      	sxtb	r3, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	4619      	mov	r1, r3
 8007b22:	2030      	movs	r0, #48	; 0x30
 8007b24:	f001 f9e6 	bl	8008ef4 <SX1276Write>
        break;
 8007b28:	e130      	b.n	8007d8c <SX1276SetRxConfig+0x3b4>
            if( bandwidth > 2 )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d900      	bls.n	8007b32 <SX1276SetRxConfig+0x15a>
                while( 1 );
 8007b30:	e7fe      	b.n	8007b30 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3307      	adds	r3, #7
 8007b36:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007b38:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            SX1276.Settings.LoRa.Datarate = datarate;
 8007b40:	4a29      	ldr	r2, [pc, #164]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.Coderate = coderate;
 8007b48:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007b50:	4a25      	ldr	r2, [pc, #148]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b52:	8bbb      	ldrh	r3, [r7, #28]
 8007b54:	f8a2 312e 	strh.w	r3, [r2, #302]	; 0x12e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007b58:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b5e:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b68:	f882 3131 	strb.w	r3, [r2, #305]	; 0x131
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b72:	f882 3132 	strb.w	r3, [r2, #306]	; 0x132
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b7c:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007b86:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007b90:	f882 3135 	strb.w	r3, [r2, #309]	; 0x135
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8007b94:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007b96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007b9a:	f882 3136 	strb.w	r3, [r2, #310]	; 0x136
            if( datarate > 12 )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b0c      	cmp	r3, #12
 8007ba2:	d902      	bls.n	8007baa <SX1276SetRxConfig+0x1d2>
                datarate = 12;
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e004      	b.n	8007bb4 <SX1276SetRxConfig+0x1dc>
            else if( datarate < 6 )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	d801      	bhi.n	8007bb4 <SX1276SetRxConfig+0x1dc>
                datarate = 6;
 8007bb0:	2306      	movs	r3, #6
 8007bb2:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b07      	cmp	r3, #7
 8007bb8:	d105      	bne.n	8007bc6 <SX1276SetRxConfig+0x1ee>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b0b      	cmp	r3, #11
 8007bbe:	d008      	beq.n	8007bd2 <SX1276SetRxConfig+0x1fa>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b0c      	cmp	r3, #12
 8007bc4:	d005      	beq.n	8007bd2 <SX1276SetRxConfig+0x1fa>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d10f      	bne.n	8007bec <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b0c      	cmp	r3, #12
 8007bd0:	d10c      	bne.n	8007bec <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <SX1276SetRxConfig+0x210>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8007bda:	e00b      	b.n	8007bf4 <SX1276SetRxConfig+0x21c>
 8007bdc:	f3af 8000 	nop.w
 8007be0:	00000000 	.word	0x00000000
 8007be4:	417e8480 	.word	0x417e8480
 8007be8:	20000ae4 	.word	0x20000ae4
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007bec:	4b69      	ldr	r3, [pc, #420]	; (8007d94 <SX1276SetRxConfig+0x3bc>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007bf4:	201d      	movs	r0, #29
 8007bf6:	f001 f98f 	bl	8008f18 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007c14:	4619      	mov	r1, r3
 8007c16:	201d      	movs	r0, #29
 8007c18:	f001 f96c 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8007c1c:	201e      	movs	r0, #30
 8007c1e:	f001 f97b 	bl	8008f18 <SX1276Read>
 8007c22:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8007c36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8007c42:	8c3b      	ldrh	r3, [r7, #32]
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	4619      	mov	r1, r3
 8007c56:	201e      	movs	r0, #30
 8007c58:	f001 f94c 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007c5c:	2026      	movs	r0, #38	; 0x26
 8007c5e:	f001 f95b 	bl	8008f18 <SX1276Read>
 8007c62:	4603      	mov	r3, r0
 8007c64:	b25b      	sxtb	r3, r3
 8007c66:	f023 0308 	bic.w	r3, r3, #8
 8007c6a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007c6c:	4b49      	ldr	r3, [pc, #292]	; (8007d94 <SX1276SetRxConfig+0x3bc>)
 8007c6e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8007c72:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	2026      	movs	r0, #38	; 0x26
 8007c80:	f001 f938 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8007c84:	8c3b      	ldrh	r3, [r7, #32]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	201f      	movs	r0, #31
 8007c8c:	f001 f932 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007c90:	8bbb      	ldrh	r3, [r7, #28]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	2020      	movs	r0, #32
 8007c9c:	f001 f92a 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007ca0:	8bbb      	ldrh	r3, [r7, #28]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	2021      	movs	r0, #33	; 0x21
 8007ca8:	f001 f924 	bl	8008ef4 <SX1276Write>
            if( fixLen == 1 )
 8007cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8007cb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2022      	movs	r0, #34	; 0x22
 8007cbc:	f001 f91a 	bl	8008ef4 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007cc0:	4b34      	ldr	r3, [pc, #208]	; (8007d94 <SX1276SetRxConfig+0x3bc>)
 8007cc2:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d011      	beq.n	8007cee <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007cca:	2044      	movs	r0, #68	; 0x44
 8007ccc:	f001 f924 	bl	8008f18 <SX1276Read>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	2044      	movs	r0, #68	; 0x44
 8007cdc:	f001 f90a 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007ce0:	4b2c      	ldr	r3, [pc, #176]	; (8007d94 <SX1276SetRxConfig+0x3bc>)
 8007ce2:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	2024      	movs	r0, #36	; 0x24
 8007cea:	f001 f903 	bl	8008ef4 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b09      	cmp	r3, #9
 8007cf2:	d10e      	bne.n	8007d12 <SX1276SetRxConfig+0x33a>
 8007cf4:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <SX1276SetRxConfig+0x3bc>)
 8007cf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007cfa:	4a27      	ldr	r2, [pc, #156]	; (8007d98 <SX1276SetRxConfig+0x3c0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d908      	bls.n	8007d12 <SX1276SetRxConfig+0x33a>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8007d00:	2102      	movs	r1, #2
 8007d02:	2036      	movs	r0, #54	; 0x36
 8007d04:	f001 f8f6 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8007d08:	2164      	movs	r1, #100	; 0x64
 8007d0a:	203a      	movs	r0, #58	; 0x3a
 8007d0c:	f001 f8f2 	bl	8008ef4 <SX1276Write>
 8007d10:	e00f      	b.n	8007d32 <SX1276SetRxConfig+0x35a>
            else if( bandwidth == 9 )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	d108      	bne.n	8007d2a <SX1276SetRxConfig+0x352>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8007d18:	2102      	movs	r1, #2
 8007d1a:	2036      	movs	r0, #54	; 0x36
 8007d1c:	f001 f8ea 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8007d20:	217f      	movs	r1, #127	; 0x7f
 8007d22:	203a      	movs	r0, #58	; 0x3a
 8007d24:	f001 f8e6 	bl	8008ef4 <SX1276Write>
 8007d28:	e003      	b.n	8007d32 <SX1276SetRxConfig+0x35a>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8007d2a:	2103      	movs	r1, #3
 8007d2c:	2036      	movs	r0, #54	; 0x36
 8007d2e:	f001 f8e1 	bl	8008ef4 <SX1276Write>
            if( datarate == 6 )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	d114      	bne.n	8007d62 <SX1276SetRxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007d38:	2031      	movs	r0, #49	; 0x31
 8007d3a:	f001 f8ed 	bl	8008f18 <SX1276Read>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007d48:	f043 0305 	orr.w	r3, r3, #5
 8007d4c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	4619      	mov	r1, r3
 8007d52:	2031      	movs	r0, #49	; 0x31
 8007d54:	f001 f8ce 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007d58:	210c      	movs	r1, #12
 8007d5a:	2037      	movs	r0, #55	; 0x37
 8007d5c:	f001 f8ca 	bl	8008ef4 <SX1276Write>
        break;
 8007d60:	e013      	b.n	8007d8a <SX1276SetRxConfig+0x3b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007d62:	2031      	movs	r0, #49	; 0x31
 8007d64:	f001 f8d8 	bl	8008f18 <SX1276Read>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	b25b      	sxtb	r3, r3
 8007d6c:	f023 0307 	bic.w	r3, r3, #7
 8007d70:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007d72:	f043 0303 	orr.w	r3, r3, #3
 8007d76:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	2031      	movs	r0, #49	; 0x31
 8007d7e:	f001 f8b9 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007d82:	210a      	movs	r1, #10
 8007d84:	2037      	movs	r0, #55	; 0x37
 8007d86:	f001 f8b5 	bl	8008ef4 <SX1276Write>
        break;
 8007d8a:	bf00      	nop
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000ae4 	.word	0x20000ae4
 8007d98:	1f4add40 	.word	0x1f4add40
 8007d9c:	00000000 	.word	0x00000000

08007da0 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60ba      	str	r2, [r7, #8]
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]
 8007dae:	460b      	mov	r3, r1
 8007db0:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f857 	bl	8008e70 <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 8007dc2:	2009      	movs	r0, #9
 8007dc4:	f001 f8a8 	bl	8008f18 <SX1276Read>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 8007dcc:	204d      	movs	r0, #77	; 0x4d
 8007dce:	f001 f8a3 	bl	8008f18 <SX1276Read>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8007dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dde:	b25c      	sxtb	r4, r3
 8007de0:	4bb3      	ldr	r3, [pc, #716]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007de2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff f962 	bl	80070b0 <SX1276GetPaSelect>
 8007dec:	4603      	mov	r3, r0
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	4323      	orrs	r3, r4
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007dfc:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8007dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da4e      	bge.n	8007ea4 <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 8007e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e0a:	2b11      	cmp	r3, #17
 8007e0c:	dd04      	ble.n	8007e18 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8007e0e:	7dbb      	ldrb	r3, [r7, #22]
 8007e10:	f043 0307 	orr.w	r3, r3, #7
 8007e14:	75bb      	strb	r3, [r7, #22]
 8007e16:	e008      	b.n	8007e2a <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8007e18:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007e1c:	f023 0307 	bic.w	r3, r3, #7
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	f043 0304 	orr.w	r3, r3, #4
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8007e2a:	7dbb      	ldrb	r3, [r7, #22]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	2b07      	cmp	r3, #7
 8007e32:	d11b      	bne.n	8007e6c <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 8007e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	dc01      	bgt.n	8007e40 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 8007e3c:	2305      	movs	r3, #5
 8007e3e:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 8007e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e44:	2b14      	cmp	r3, #20
 8007e46:	dd01      	ble.n	8007e4c <SX1276SetTxConfig+0xac>
            {
                power = 20;
 8007e48:	2314      	movs	r3, #20
 8007e4a:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8007e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e50:	f023 030f 	bic.w	r3, r3, #15
 8007e54:	b25a      	sxtb	r2, r3
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	3b05      	subs	r3, #5
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	75fb      	strb	r3, [r7, #23]
 8007e6a:	e037      	b.n	8007edc <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 8007e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	dc01      	bgt.n	8007e78 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 8007e74:	2302      	movs	r3, #2
 8007e76:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 8007e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e7c:	2b11      	cmp	r3, #17
 8007e7e:	dd01      	ble.n	8007e84 <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 8007e80:	2311      	movs	r3, #17
 8007e82:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8007e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e88:	f023 030f 	bic.w	r3, r3, #15
 8007e8c:	b25a      	sxtb	r2, r3
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	3b02      	subs	r3, #2
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	75fb      	strb	r3, [r7, #23]
 8007ea2:	e01b      	b.n	8007edc <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 8007ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	da01      	bge.n	8007eb2 <SX1276SetTxConfig+0x112>
        {
            power = -1;
 8007eae:	23ff      	movs	r3, #255	; 0xff
 8007eb0:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 8007eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb6:	2b0e      	cmp	r3, #14
 8007eb8:	dd01      	ble.n	8007ebe <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 8007eba:	230e      	movs	r3, #14
 8007ebc:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8007ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ec2:	f023 030f 	bic.w	r3, r3, #15
 8007ec6:	b25a      	sxtb	r2, r3
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	2009      	movs	r0, #9
 8007ee2:	f001 f807 	bl	8008ef4 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	204d      	movs	r0, #77	; 0x4d
 8007eec:	f001 f802 	bl	8008ef4 <SX1276Write>

    switch( modem )
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <SX1276SetTxConfig+0x15e>
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	f000 8092 	beq.w	8008020 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8007efc:	e189      	b.n	8008212 <SX1276SetTxConfig+0x472>
            SX1276.Settings.Fsk.Power = power;
 8007efe:	4a6c      	ldr	r2, [pc, #432]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
            SX1276.Settings.Fsk.Fdev = fdev;
 8007f06:	4a6a      	ldr	r2, [pc, #424]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007f0e:	4a68      	ldr	r2, [pc, #416]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.Datarate = datarate;
 8007f16:	4a66      	ldr	r2, [pc, #408]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007f1e:	4a64      	ldr	r2, [pc, #400]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007f22:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007f26:	4a62      	ldr	r2, [pc, #392]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007f2c:	f882 3106 	strb.w	r3, [r2, #262]	; 0x106
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007f30:	4a5f      	ldr	r2, [pc, #380]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f32:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007f36:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007f3a:	4a5d      	ldr	r2, [pc, #372]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007f40:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8007f44:	4a5a      	ldr	r2, [pc, #360]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8007f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f48:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8007f4c:	68b8      	ldr	r0, [r7, #8]
 8007f4e:	f7f8 fad1 	bl	80004f4 <__aeabi_ui2d>
 8007f52:	a353      	add	r3, pc, #332	; (adr r3, 80080a0 <SX1276SetTxConfig+0x300>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fc70 	bl	800083c <__aeabi_ddiv>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	f7f8 fe02 	bl	8000b6c <__aeabi_d2uiz>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	2004      	movs	r0, #4
 8007f78:	f000 ffbc 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	2005      	movs	r0, #5
 8007f84:	f000 ffb6 	bl	8008ef4 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8007f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8a:	f7f8 fab3 	bl	80004f4 <__aeabi_ui2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	a145      	add	r1, pc, #276	; (adr r1, 80080a8 <SX1276SetTxConfig+0x308>)
 8007f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f98:	f7f8 fc50 	bl	800083c <__aeabi_ddiv>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f7f8 fde2 	bl	8000b6c <__aeabi_d2uiz>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	0a1b      	lsrs	r3, r3, #8
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2002      	movs	r0, #2
 8007fb8:	f000 ff9c 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	2003      	movs	r0, #3
 8007fc4:	f000 ff96 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007fc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	2025      	movs	r0, #37	; 0x25
 8007fd4:	f000 ff8e 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8007fd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	4619      	mov	r1, r3
 8007fde:	2026      	movs	r0, #38	; 0x26
 8007fe0:	f000 ff88 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8007fe4:	2030      	movs	r0, #48	; 0x30
 8007fe6:	f000 ff97 	bl	8008f18 <SX1276Read>
 8007fea:	4603      	mov	r3, r0
 8007fec:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8007fee:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8007ff2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007ff4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d001      	beq.n	8008000 <SX1276SetTxConfig+0x260>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	e001      	b.n	8008004 <SX1276SetTxConfig+0x264>
 8008000:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8008004:	4313      	orrs	r3, r2
 8008006:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8008008:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800800c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800800e:	b25b      	sxtb	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4619      	mov	r1, r3
 8008018:	2030      	movs	r0, #48	; 0x30
 800801a:	f000 ff6b 	bl	8008ef4 <SX1276Write>
        break;
 800801e:	e0f8      	b.n	8008212 <SX1276SetTxConfig+0x472>
            SX1276.Settings.LoRa.Power = power;
 8008020:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
            if( bandwidth > 2 )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d900      	bls.n	8008030 <SX1276SetTxConfig+0x290>
                while( 1 );
 800802e:	e7fe      	b.n	800802e <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3307      	adds	r3, #7
 8008034:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8008036:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            SX1276.Settings.LoRa.Datarate = datarate;
 800803e:	4a1c      	ldr	r2, [pc, #112]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.Coderate = coderate;
 8008046:	4a1a      	ldr	r2, [pc, #104]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008048:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800804c:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8008050:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008052:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008054:	f8a2 312e 	strh.w	r3, [r2, #302]	; 0x12e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <SX1276SetTxConfig+0x310>)
 800805a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800805e:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008062:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008064:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008068:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800806c:	4a10      	ldr	r2, [pc, #64]	; (80080b0 <SX1276SetTxConfig+0x310>)
 800806e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008072:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008076:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008078:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800807c:	f882 3132 	strb.w	r3, [r2, #306]	; 0x132
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008080:	4a0b      	ldr	r2, [pc, #44]	; (80080b0 <SX1276SetTxConfig+0x310>)
 8008082:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008086:	f882 3135 	strb.w	r3, [r2, #309]	; 0x135
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <SX1276SetTxConfig+0x310>)
 800808c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
            if( datarate > 12 )
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d90d      	bls.n	80080b4 <SX1276SetTxConfig+0x314>
                datarate = 12;
 8008098:	230c      	movs	r3, #12
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
 800809c:	e00f      	b.n	80080be <SX1276SetTxConfig+0x31e>
 800809e:	bf00      	nop
 80080a0:	00000000 	.word	0x00000000
 80080a4:	404e8480 	.word	0x404e8480
 80080a8:	00000000 	.word	0x00000000
 80080ac:	417e8480 	.word	0x417e8480
 80080b0:	20000ae4 	.word	0x20000ae4
            else if( datarate < 6 )
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d801      	bhi.n	80080be <SX1276SetTxConfig+0x31e>
                datarate = 6;
 80080ba:	2306      	movs	r3, #6
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	d105      	bne.n	80080d0 <SX1276SetTxConfig+0x330>
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	2b0b      	cmp	r3, #11
 80080c8:	d008      	beq.n	80080dc <SX1276SetTxConfig+0x33c>
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	2b0c      	cmp	r3, #12
 80080ce:	d005      	beq.n	80080dc <SX1276SetTxConfig+0x33c>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d107      	bne.n	80080e6 <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	2b0c      	cmp	r3, #12
 80080da:	d104      	bne.n	80080e6 <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80080dc:	4b4f      	ldr	r3, [pc, #316]	; (800821c <SX1276SetTxConfig+0x47c>)
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80080e4:	e003      	b.n	80080ee <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80080e6:	4b4d      	ldr	r3, [pc, #308]	; (800821c <SX1276SetTxConfig+0x47c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80080ee:	4b4b      	ldr	r3, [pc, #300]	; (800821c <SX1276SetTxConfig+0x47c>)
 80080f0:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d011      	beq.n	800811c <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80080f8:	2044      	movs	r0, #68	; 0x44
 80080fa:	f000 ff0d 	bl	8008f18 <SX1276Read>
 80080fe:	4603      	mov	r3, r0
 8008100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	2044      	movs	r0, #68	; 0x44
 800810a:	f000 fef3 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800810e:	4b43      	ldr	r3, [pc, #268]	; (800821c <SX1276SetTxConfig+0x47c>)
 8008110:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8008114:	4619      	mov	r1, r3
 8008116:	2024      	movs	r0, #36	; 0x24
 8008118:	f000 feec 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800811c:	201d      	movs	r0, #29
 800811e:	f000 fefb 	bl	8008f18 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	b2da      	uxtb	r2, r3
 800812a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008136:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800813a:	4313      	orrs	r3, r2
 800813c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800813e:	4619      	mov	r1, r3
 8008140:	201d      	movs	r0, #29
 8008142:	f000 fed7 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8008146:	201e      	movs	r0, #30
 8008148:	f000 fee6 	bl	8008f18 <SX1276Read>
 800814c:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800814e:	f003 030b 	and.w	r3, r3, #11
 8008152:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	b2db      	uxtb	r3, r3
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800815c:	4313      	orrs	r3, r2
 800815e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008160:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8008168:	4313      	orrs	r3, r2
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	201e      	movs	r0, #30
 8008170:	f000 fec0 	bl	8008ef4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8008174:	2026      	movs	r0, #38	; 0x26
 8008176:	f000 fecf 	bl	8008f18 <SX1276Read>
 800817a:	4603      	mov	r3, r0
 800817c:	b25b      	sxtb	r3, r3
 800817e:	f023 0308 	bic.w	r3, r3, #8
 8008182:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <SX1276SetTxConfig+0x47c>)
 8008186:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800818a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800818c:	b25b      	sxtb	r3, r3
 800818e:	4313      	orrs	r3, r2
 8008190:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008192:	b2db      	uxtb	r3, r3
 8008194:	4619      	mov	r1, r3
 8008196:	2026      	movs	r0, #38	; 0x26
 8008198:	f000 feac 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800819c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	4619      	mov	r1, r3
 80081a6:	2020      	movs	r0, #32
 80081a8:	f000 fea4 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80081ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	4619      	mov	r1, r3
 80081b2:	2021      	movs	r0, #33	; 0x21
 80081b4:	f000 fe9e 	bl	8008ef4 <SX1276Write>
            if( datarate == 6 )
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	d114      	bne.n	80081e8 <SX1276SetTxConfig+0x448>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80081be:	2031      	movs	r0, #49	; 0x31
 80081c0:	f000 feaa 	bl	8008f18 <SX1276Read>
 80081c4:	4603      	mov	r3, r0
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	f023 0307 	bic.w	r3, r3, #7
 80081cc:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80081ce:	f043 0305 	orr.w	r3, r3, #5
 80081d2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	2031      	movs	r0, #49	; 0x31
 80081da:	f000 fe8b 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80081de:	210c      	movs	r1, #12
 80081e0:	2037      	movs	r0, #55	; 0x37
 80081e2:	f000 fe87 	bl	8008ef4 <SX1276Write>
        break;
 80081e6:	e013      	b.n	8008210 <SX1276SetTxConfig+0x470>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80081e8:	2031      	movs	r0, #49	; 0x31
 80081ea:	f000 fe95 	bl	8008f18 <SX1276Read>
 80081ee:	4603      	mov	r3, r0
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80081f8:	f043 0303 	orr.w	r3, r3, #3
 80081fc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	4619      	mov	r1, r3
 8008202:	2031      	movs	r0, #49	; 0x31
 8008204:	f000 fe76 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008208:	210a      	movs	r1, #10
 800820a:	2037      	movs	r0, #55	; 0x37
 800820c:	f000 fe72 	bl	8008ef4 <SX1276Write>
        break;
 8008210:	bf00      	nop
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	bd90      	pop	{r4, r7, pc}
 800821a:	bf00      	nop
 800821c:	20000ae4 	.word	0x20000ae4

08008220 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8008220:	b5b0      	push	{r4, r5, r7, lr}
 8008222:	b094      	sub	sp, #80	; 0x50
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	460a      	mov	r2, r1
 800822a:	71fb      	strb	r3, [r7, #7]
 800822c:	4613      	mov	r3, r2
 800822e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <SX1276GetTimeOnAir+0x22>
 800823a:	2b01      	cmp	r3, #1
 800823c:	f000 8092 	beq.w	8008364 <SX1276GetTimeOnAir+0x144>
 8008240:	e1a0      	b.n	8008584 <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008242:	4ba9      	ldr	r3, [pc, #676]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008244:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8008248:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800824a:	2027      	movs	r0, #39	; 0x27
 800824c:	f000 fe64 	bl	8008f18 <SX1276Read>
 8008250:	4603      	mov	r3, r0
 8008252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008256:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008258:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f95a 	bl	8000514 <__aeabi_i2d>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8008264:	49a0      	ldr	r1, [pc, #640]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008266:	f891 1106 	ldrb.w	r1, [r1, #262]	; 0x106
 800826a:	2900      	cmp	r1, #0
 800826c:	d004      	beq.n	8008278 <SX1276GetTimeOnAir+0x58>
 800826e:	f04f 0000 	mov.w	r0, #0
 8008272:	f04f 0100 	mov.w	r1, #0
 8008276:	e002      	b.n	800827e <SX1276GetTimeOnAir+0x5e>
 8008278:	f04f 0000 	mov.w	r0, #0
 800827c:	499b      	ldr	r1, [pc, #620]	; (80084ec <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800827e:	f7f7 fffd 	bl	800027c <__adddf3>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4614      	mov	r4, r2
 8008288:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800828a:	2030      	movs	r0, #48	; 0x30
 800828c:	f000 fe44 	bl	8008f18 <SX1276Read>
 8008290:	4603      	mov	r3, r0
 8008292:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <SX1276GetTimeOnAir+0x82>
 800829a:	f04f 0000 	mov.w	r0, #0
 800829e:	4993      	ldr	r1, [pc, #588]	; (80084ec <SX1276GetTimeOnAir+0x2cc>)
 80082a0:	e003      	b.n	80082aa <SX1276GetTimeOnAir+0x8a>
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80082aa:	4622      	mov	r2, r4
 80082ac:	462b      	mov	r3, r5
 80082ae:	f7f7 ffe5 	bl	800027c <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4614      	mov	r4, r2
 80082b8:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80082ba:	79bb      	ldrb	r3, [r7, #6]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7f8 f929 	bl	8000514 <__aeabi_i2d>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f7 ffd7 	bl	800027c <__adddf3>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4614      	mov	r4, r2
 80082d4:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80082d6:	4b84      	ldr	r3, [pc, #528]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 80082d8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <SX1276GetTimeOnAir+0xca>
 80082e0:	f04f 0000 	mov.w	r0, #0
 80082e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082e8:	e003      	b.n	80082f2 <SX1276GetTimeOnAir+0xd2>
 80082ea:	f04f 0000 	mov.w	r0, #0
 80082ee:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f7 ffc1 	bl	800027c <__adddf3>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	4b7a      	ldr	r3, [pc, #488]	; (80084f0 <SX1276GetTimeOnAir+0x2d0>)
 8008308:	f7f8 f96e 	bl	80005e8 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 8008314:	4b74      	ldr	r3, [pc, #464]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008316:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800831a:	4618      	mov	r0, r3
 800831c:	f7f8 f8ea 	bl	80004f4 <__aeabi_ui2d>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f8 fa88 	bl	800083c <__aeabi_ddiv>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4610      	mov	r0, r2
 8008332:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	4b6e      	ldr	r3, [pc, #440]	; (80084f4 <SX1276GetTimeOnAir+0x2d4>)
 800833a:	f7f8 f955 	bl	80005e8 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	ec43 2b17 	vmov	d7, r2, r3
 8008346:	eeb0 0a47 	vmov.f32	s0, s14
 800834a:	eef0 0a67 	vmov.f32	s1, s15
 800834e:	f002 fc07 	bl	800ab60 <round>
 8008352:	ec53 2b10 	vmov	r2, r3, d0
 8008356:	4610      	mov	r0, r2
 8008358:	4619      	mov	r1, r3
 800835a:	f7f8 fc07 	bl	8000b6c <__aeabi_d2uiz>
 800835e:	4603      	mov	r3, r0
 8008360:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8008362:	e10f      	b.n	8008584 <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8008370:	4b5d      	ldr	r3, [pc, #372]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008372:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008376:	2b09      	cmp	r3, #9
 8008378:	d012      	beq.n	80083a0 <SX1276GetTimeOnAir+0x180>
 800837a:	2b09      	cmp	r3, #9
 800837c:	d816      	bhi.n	80083ac <SX1276GetTimeOnAir+0x18c>
 800837e:	2b07      	cmp	r3, #7
 8008380:	d002      	beq.n	8008388 <SX1276GetTimeOnAir+0x168>
 8008382:	2b08      	cmp	r3, #8
 8008384:	d006      	beq.n	8008394 <SX1276GetTimeOnAir+0x174>
 8008386:	e011      	b.n	80083ac <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8008388:	a351      	add	r3, pc, #324	; (adr r3, 80084d0 <SX1276GetTimeOnAir+0x2b0>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 8008392:	e00b      	b.n	80083ac <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 8008394:	a350      	add	r3, pc, #320	; (adr r3, 80084d8 <SX1276GetTimeOnAir+0x2b8>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800839e:	e005      	b.n	80083ac <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 80083a0:	a34f      	add	r3, pc, #316	; (adr r3, 80084e0 <SX1276GetTimeOnAir+0x2c0>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 80083aa:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80083ac:	4b4e      	ldr	r3, [pc, #312]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 80083ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80083b2:	2201      	movs	r2, #1
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7f8 f8ab 	bl	8000514 <__aeabi_i2d>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083c6:	f7f8 fa39 	bl	800083c <__aeabi_ddiv>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            double ts = 1 / rs;
 80083d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083d6:	f04f 0000 	mov.w	r0, #0
 80083da:	4944      	ldr	r1, [pc, #272]	; (80084ec <SX1276GetTimeOnAir+0x2cc>)
 80083dc:	f7f8 fa2e 	bl	800083c <__aeabi_ddiv>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80083e8:	4b3f      	ldr	r3, [pc, #252]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 80083ea:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f8 f890 	bl	8000514 <__aeabi_i2d>
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	4b3f      	ldr	r3, [pc, #252]	; (80084f8 <SX1276GetTimeOnAir+0x2d8>)
 80083fa:	f7f7 ff3f 	bl	800027c <__adddf3>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008406:	f7f8 f8ef 	bl	80005e8 <__aeabi_dmul>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008412:	79bb      	ldrb	r3, [r7, #6]
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	461a      	mov	r2, r3
 8008418:	4b33      	ldr	r3, [pc, #204]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 800841a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8008422:	4a31      	ldr	r2, [pc, #196]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008424:	f892 2132 	ldrb.w	r2, [r2, #306]	; 0x132
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800842c:	4b2e      	ldr	r3, [pc, #184]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 800842e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <SX1276GetTimeOnAir+0x21a>
 8008436:	2314      	movs	r3, #20
 8008438:	e000      	b.n	800843c <SX1276GetTimeOnAir+0x21c>
 800843a:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008440:	4618      	mov	r0, r3
 8008442:	f7f8 f857 	bl	80004f4 <__aeabi_ui2d>
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800844a:	4b27      	ldr	r3, [pc, #156]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 800844c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8008450:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008452:	4b25      	ldr	r3, [pc, #148]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008454:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <SX1276GetTimeOnAir+0x240>
 800845c:	2302      	movs	r3, #2
 800845e:	e000      	b.n	8008462 <SX1276GetTimeOnAir+0x242>
 8008460:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	4618      	mov	r0, r3
 8008466:	f7f8 f845 	bl	80004f4 <__aeabi_ui2d>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f8 f9e3 	bl	800083c <__aeabi_ddiv>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	ec43 2b17 	vmov	d7, r2, r3
 800847e:	eeb0 0a47 	vmov.f32	s0, s14
 8008482:	eef0 0a67 	vmov.f32	s1, s15
 8008486:	f002 fa67 	bl	800a958 <ceil>
 800848a:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <SX1276GetTimeOnAir+0x2c8>)
 8008490:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8008494:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008496:	4618      	mov	r0, r3
 8008498:	f7f8 f83c 	bl	8000514 <__aeabi_i2d>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f8 f8a0 	bl	80005e8 <__aeabi_dmul>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084bc:	f7f8 fb24 	bl	8000b08 <__aeabi_dcmpgt>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01a      	beq.n	80084fc <SX1276GetTimeOnAir+0x2dc>
 80084c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084ca:	e01b      	b.n	8008504 <SX1276GetTimeOnAir+0x2e4>
 80084cc:	f3af 8000 	nop.w
 80084d0:	00000000 	.word	0x00000000
 80084d4:	40fe8480 	.word	0x40fe8480
 80084d8:	00000000 	.word	0x00000000
 80084dc:	410e8480 	.word	0x410e8480
 80084e0:	00000000 	.word	0x00000000
 80084e4:	411e8480 	.word	0x411e8480
 80084e8:	20000ae4 	.word	0x20000ae4
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40200000 	.word	0x40200000
 80084f4:	408f4000 	.word	0x408f4000
 80084f8:	40110000 	.word	0x40110000
 80084fc:	f04f 0000 	mov.w	r0, #0
 8008500:	f04f 0100 	mov.w	r1, #0
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	4b23      	ldr	r3, [pc, #140]	; (8008598 <SX1276GetTimeOnAir+0x378>)
 800850a:	f7f7 feb7 	bl	800027c <__adddf3>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8008516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800851a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800851e:	f7f8 f863 	bl	80005e8 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800852a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800852e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008532:	f7f7 fea3 	bl	800027c <__adddf3>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	4b16      	ldr	r3, [pc, #88]	; (800859c <SX1276GetTimeOnAir+0x37c>)
 8008544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008548:	f7f8 f84e 	bl	80005e8 <__aeabi_dmul>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4610      	mov	r0, r2
 8008552:	4619      	mov	r1, r3
 8008554:	a30e      	add	r3, pc, #56	; (adr r3, 8008590 <SX1276GetTimeOnAir+0x370>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fe8f 	bl	800027c <__adddf3>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	ec43 2b17 	vmov	d7, r2, r3
 8008566:	eeb0 0a47 	vmov.f32	s0, s14
 800856a:	eef0 0a67 	vmov.f32	s1, s15
 800856e:	f002 fa77 	bl	800aa60 <floor>
 8008572:	ec53 2b10 	vmov	r2, r3, d0
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 faf7 	bl	8000b6c <__aeabi_d2uiz>
 800857e:	4603      	mov	r3, r0
 8008580:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8008582:	bf00      	nop
    }
    return airTime;
 8008584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008586:	4618      	mov	r0, r3
 8008588:	3750      	adds	r7, #80	; 0x50
 800858a:	46bd      	mov	sp, r7
 800858c:	bdb0      	pop	{r4, r5, r7, pc}
 800858e:	bf00      	nop
 8008590:	d916872b 	.word	0xd916872b
 8008594:	3feff7ce 	.word	0x3feff7ce
 8008598:	40200000 	.word	0x40200000
 800859c:	408f4000 	.word	0x408f4000

080085a0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80085b0:	4b54      	ldr	r3, [pc, #336]	; (8008704 <SX1276Send+0x164>)
 80085b2:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <SX1276Send+0x20>
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d04a      	beq.n	8008654 <SX1276Send+0xb4>
 80085be:	e09a      	b.n	80086f6 <SX1276Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80085c0:	4b50      	ldr	r3, [pc, #320]	; (8008704 <SX1276Send+0x164>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
            SX1276.Settings.FskPacketHandler.Size = size;
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	4b4d      	ldr	r3, [pc, #308]	; (8008704 <SX1276Send+0x164>)
 80085ce:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a

            if( SX1276.Settings.Fsk.FixLen == false )
 80085d2:	4b4c      	ldr	r3, [pc, #304]	; (8008704 <SX1276Send+0x164>)
 80085d4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80085d8:	f083 0301 	eor.w	r3, r3, #1
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80085e2:	1cfb      	adds	r3, r7, #3
 80085e4:	2101      	movs	r1, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fd00 	bl	8008fec <SX1276WriteFifo>
 80085ec:	e004      	b.n	80085f8 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	4619      	mov	r1, r3
 80085f2:	2032      	movs	r0, #50	; 0x32
 80085f4:	f000 fc7e 	bl	8008ef4 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <SX1276Send+0x6e>
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d804      	bhi.n	800860e <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <SX1276Send+0x164>)
 8008608:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
 800860c:	e00a      	b.n	8008624 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	b29b      	uxth	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	483c      	ldr	r0, [pc, #240]	; (8008708 <SX1276Send+0x168>)
 8008618:	f7ff f82e 	bl	8007678 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800861c:	4b39      	ldr	r3, [pc, #228]	; (8008704 <SX1276Send+0x164>)
 800861e:	2220      	movs	r2, #32
 8008620:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008624:	4b37      	ldr	r3, [pc, #220]	; (8008704 <SX1276Send+0x164>)
 8008626:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fcdd 	bl	8008fec <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008632:	4b34      	ldr	r3, [pc, #208]	; (8008704 <SX1276Send+0x164>)
 8008634:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
 8008638:	4b32      	ldr	r3, [pc, #200]	; (8008704 <SX1276Send+0x164>)
 800863a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800863e:	b29b      	uxth	r3, r3
 8008640:	4413      	add	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	4b2f      	ldr	r3, [pc, #188]	; (8008704 <SX1276Send+0x164>)
 8008646:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800864a:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <SX1276Send+0x164>)
 800864c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008650:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008652:	e050      	b.n	80086f6 <SX1276Send+0x156>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008654:	4b2b      	ldr	r3, [pc, #172]	; (8008704 <SX1276Send+0x164>)
 8008656:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <SX1276Send+0xde>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800865e:	2033      	movs	r0, #51	; 0x33
 8008660:	f000 fc5a 	bl	8008f18 <SX1276Read>
 8008664:	4603      	mov	r3, r0
 8008666:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800866a:	b2db      	uxtb	r3, r3
 800866c:	4619      	mov	r1, r3
 800866e:	2033      	movs	r0, #51	; 0x33
 8008670:	f000 fc40 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008674:	2119      	movs	r1, #25
 8008676:	203b      	movs	r0, #59	; 0x3b
 8008678:	f000 fc3c 	bl	8008ef4 <SX1276Write>
 800867c:	e013      	b.n	80086a6 <SX1276Send+0x106>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800867e:	2033      	movs	r0, #51	; 0x33
 8008680:	f000 fc4a 	bl	8008f18 <SX1276Read>
 8008684:	4603      	mov	r3, r0
 8008686:	b25b      	sxtb	r3, r3
 8008688:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800868c:	b25b      	sxtb	r3, r3
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	b25b      	sxtb	r3, r3
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	2033      	movs	r0, #51	; 0x33
 800869a:	f000 fc2b 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800869e:	211d      	movs	r1, #29
 80086a0:	203b      	movs	r0, #59	; 0x3b
 80086a2:	f000 fc27 	bl	8008ef4 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <SX1276Send+0x164>)
 80086aa:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	4619      	mov	r1, r3
 80086b2:	2022      	movs	r0, #34	; 0x22
 80086b4:	f000 fc1e 	bl	8008ef4 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80086b8:	2100      	movs	r1, #0
 80086ba:	200e      	movs	r0, #14
 80086bc:	f000 fc1a 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80086c0:	2100      	movs	r1, #0
 80086c2:	200d      	movs	r0, #13
 80086c4:	f000 fc16 	bl	8008ef4 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80086c8:	2001      	movs	r0, #1
 80086ca:	f000 fc25 	bl	8008f18 <SX1276Read>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d104      	bne.n	80086e2 <SX1276Send+0x142>
            {
                SX1276SetStby( );
 80086d8:	f000 f830 	bl	800873c <SX1276SetStby>
                DelayMs( 1 );
 80086dc:	2001      	movs	r0, #1
 80086de:	f7fd fb43 	bl	8005d68 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fc80 	bl	8008fec <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <SX1276Send+0x164>)
 80086ee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80086f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80086f4:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fa8e 	bl	8008c18 <SX1276SetTx>
}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000ae4 	.word	0x20000ae4
 8008708:	200009e4 	.word	0x200009e4

0800870c <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8008710:	4807      	ldr	r0, [pc, #28]	; (8008730 <SX1276SetSleep+0x24>)
 8008712:	f7fe febf 	bl	8007494 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008716:	4807      	ldr	r0, [pc, #28]	; (8008734 <SX1276SetSleep+0x28>)
 8008718:	f7fe febc 	bl	8007494 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800871c:	2000      	movs	r0, #0
 800871e:	f000 fb79 	bl	8008e14 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <SX1276SetSleep+0x2c>)
 8008724:	2200      	movs	r2, #0
 8008726:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
}
 800872a:	bf00      	nop
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000c3c 	.word	0x20000c3c
 8008734:	20000c28 	.word	0x20000c28
 8008738:	20000ae4 	.word	0x20000ae4

0800873c <SX1276SetStby>:

void SX1276SetStby( void )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8008740:	4807      	ldr	r0, [pc, #28]	; (8008760 <SX1276SetStby+0x24>)
 8008742:	f7fe fea7 	bl	8007494 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008746:	4807      	ldr	r0, [pc, #28]	; (8008764 <SX1276SetStby+0x28>)
 8008748:	f7fe fea4 	bl	8007494 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800874c:	2001      	movs	r0, #1
 800874e:	f000 fb61 	bl	8008e14 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <SX1276SetStby+0x2c>)
 8008754:	2200      	movs	r2, #0
 8008756:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000c3c 	.word	0x20000c3c
 8008764:	20000c28 	.word	0x20000c28
 8008768:	20000ae4 	.word	0x20000ae4
 800876c:	00000000 	.word	0x00000000

08008770 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8008770:	b5b0      	push	{r4, r5, r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800877c:	4bc4      	ldr	r3, [pc, #784]	; (8008a90 <SX1276SetRx+0x320>)
 800877e:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <SX1276SetRx+0x1c>
 8008786:	2b01      	cmp	r3, #1
 8008788:	d03e      	beq.n	8008808 <SX1276SetRx+0x98>
 800878a:	e19b      	b.n	8008ac4 <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800878c:	4bc0      	ldr	r3, [pc, #768]	; (8008a90 <SX1276SetRx+0x320>)
 800878e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8008792:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008794:	2040      	movs	r0, #64	; 0x40
 8008796:	f000 fbbf 	bl	8008f18 <SX1276Read>
 800879a:	4603      	mov	r3, r0
 800879c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80087a4:	f043 030c 	orr.w	r3, r3, #12
 80087a8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	2040      	movs	r0, #64	; 0x40
 80087b0:	f000 fba0 	bl	8008ef4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80087b4:	2041      	movs	r0, #65	; 0x41
 80087b6:	f000 fbaf 	bl	8008f18 <SX1276Read>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	4619      	mov	r1, r3
 80087c4:	2041      	movs	r0, #65	; 0x41
 80087c6:	f000 fb95 	bl	8008ef4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80087ca:	2035      	movs	r0, #53	; 0x35
 80087cc:	f000 fba4 	bl	8008f18 <SX1276Read>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	4bad      	ldr	r3, [pc, #692]	; (8008a90 <SX1276SetRx+0x320>)
 80087da:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80087de:	211e      	movs	r1, #30
 80087e0:	200d      	movs	r0, #13
 80087e2:	f000 fb87 	bl	8008ef4 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80087e6:	4baa      	ldr	r3, [pc, #680]	; (8008a90 <SX1276SetRx+0x320>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80087ee:	4ba8      	ldr	r3, [pc, #672]	; (8008a90 <SX1276SetRx+0x320>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80087f6:	4ba6      	ldr	r3, [pc, #664]	; (8008a90 <SX1276SetRx+0x320>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80087fe:	4ba4      	ldr	r3, [pc, #656]	; (8008a90 <SX1276SetRx+0x320>)
 8008800:	2200      	movs	r2, #0
 8008802:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
        }
        break;
 8008806:	e15d      	b.n	8008ac4 <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008808:	4ba1      	ldr	r3, [pc, #644]	; (8008a90 <SX1276SetRx+0x320>)
 800880a:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00f      	beq.n	8008832 <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8008812:	2033      	movs	r0, #51	; 0x33
 8008814:	f000 fb80 	bl	8008f18 <SX1276Read>
 8008818:	4603      	mov	r3, r0
 800881a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800881e:	b2db      	uxtb	r3, r3
 8008820:	4619      	mov	r1, r3
 8008822:	2033      	movs	r0, #51	; 0x33
 8008824:	f000 fb66 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008828:	2119      	movs	r1, #25
 800882a:	203b      	movs	r0, #59	; 0x3b
 800882c:	f000 fb62 	bl	8008ef4 <SX1276Write>
 8008830:	e013      	b.n	800885a <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008832:	2033      	movs	r0, #51	; 0x33
 8008834:	f000 fb70 	bl	8008f18 <SX1276Read>
 8008838:	4603      	mov	r3, r0
 800883a:	b25b      	sxtb	r3, r3
 800883c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	b25b      	sxtb	r3, r3
 8008848:	b2db      	uxtb	r3, r3
 800884a:	4619      	mov	r1, r3
 800884c:	2033      	movs	r0, #51	; 0x33
 800884e:	f000 fb51 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008852:	211d      	movs	r1, #29
 8008854:	203b      	movs	r0, #59	; 0x3b
 8008856:	f000 fb4d 	bl	8008ef4 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800885a:	4b8d      	ldr	r3, [pc, #564]	; (8008a90 <SX1276SetRx+0x320>)
 800885c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008860:	2b08      	cmp	r3, #8
 8008862:	f200 80d6 	bhi.w	8008a12 <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008866:	2031      	movs	r0, #49	; 0x31
 8008868:	f000 fb56 	bl	8008f18 <SX1276Read>
 800886c:	4603      	mov	r3, r0
 800886e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008872:	b2db      	uxtb	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	2031      	movs	r0, #49	; 0x31
 8008878:	f000 fb3c 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800887c:	2100      	movs	r1, #0
 800887e:	2030      	movs	r0, #48	; 0x30
 8008880:	f000 fb38 	bl	8008ef4 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008884:	4b82      	ldr	r3, [pc, #520]	; (8008a90 <SX1276SetRx+0x320>)
 8008886:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800888a:	2b08      	cmp	r3, #8
 800888c:	f200 80cc 	bhi.w	8008a28 <SX1276SetRx+0x2b8>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <SX1276SetRx+0x128>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088bd 	.word	0x080088bd
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008959 	.word	0x08008959
 80088a8:	0800898d 	.word	0x0800898d
 80088ac:	080089c1 	.word	0x080089c1
 80088b0:	080089f5 	.word	0x080089f5
 80088b4:	080089ff 	.word	0x080089ff
 80088b8:	08008a09 	.word	0x08008a09
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 80088bc:	2148      	movs	r1, #72	; 0x48
 80088be:	202f      	movs	r0, #47	; 0x2f
 80088c0:	f000 fb18 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 80088c4:	4b72      	ldr	r3, [pc, #456]	; (8008a90 <SX1276SetRx+0x320>)
 80088c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f7 fe12 	bl	80004f4 <__aeabi_ui2d>
 80088d0:	a363      	add	r3, pc, #396	; (adr r3, 8008a60 <SX1276SetRx+0x2f0>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fcd1 	bl	800027c <__adddf3>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	f7f8 f943 	bl	8000b6c <__aeabi_d2uiz>
 80088e6:	4603      	mov	r3, r0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe ff4d 	bl	8007788 <SX1276SetChannel>
                    break;
 80088ee:	e09b      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80088f0:	2144      	movs	r1, #68	; 0x44
 80088f2:	202f      	movs	r0, #47	; 0x2f
 80088f4:	f000 fafe 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 80088f8:	4b65      	ldr	r3, [pc, #404]	; (8008a90 <SX1276SetRx+0x320>)
 80088fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fdf8 	bl	80004f4 <__aeabi_ui2d>
 8008904:	a358      	add	r3, pc, #352	; (adr r3, 8008a68 <SX1276SetRx+0x2f8>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 fcb7 	bl	800027c <__adddf3>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	f7f8 f929 	bl	8000b6c <__aeabi_d2uiz>
 800891a:	4603      	mov	r3, r0
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe ff33 	bl	8007788 <SX1276SetChannel>
                    break;
 8008922:	e081      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8008924:	2144      	movs	r1, #68	; 0x44
 8008926:	202f      	movs	r0, #47	; 0x2f
 8008928:	f000 fae4 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800892c:	4b58      	ldr	r3, [pc, #352]	; (8008a90 <SX1276SetRx+0x320>)
 800892e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008932:	4618      	mov	r0, r3
 8008934:	f7f7 fdde 	bl	80004f4 <__aeabi_ui2d>
 8008938:	a34d      	add	r3, pc, #308	; (adr r3, 8008a70 <SX1276SetRx+0x300>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fc9d 	bl	800027c <__adddf3>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	f7f8 f90f 	bl	8000b6c <__aeabi_d2uiz>
 800894e:	4603      	mov	r3, r0
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe ff19 	bl	8007788 <SX1276SetChannel>
                    break;
 8008956:	e067      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8008958:	2144      	movs	r1, #68	; 0x44
 800895a:	202f      	movs	r0, #47	; 0x2f
 800895c:	f000 faca 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 8008960:	4b4b      	ldr	r3, [pc, #300]	; (8008a90 <SX1276SetRx+0x320>)
 8008962:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fdc4 	bl	80004f4 <__aeabi_ui2d>
 800896c:	a342      	add	r3, pc, #264	; (adr r3, 8008a78 <SX1276SetRx+0x308>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fc83 	bl	800027c <__adddf3>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	f7f8 f8f5 	bl	8000b6c <__aeabi_d2uiz>
 8008982:	4603      	mov	r3, r0
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe feff 	bl	8007788 <SX1276SetChannel>
                    break;
 800898a:	e04d      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800898c:	2144      	movs	r1, #68	; 0x44
 800898e:	202f      	movs	r0, #47	; 0x2f
 8008990:	f000 fab0 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 8008994:	4b3e      	ldr	r3, [pc, #248]	; (8008a90 <SX1276SetRx+0x320>)
 8008996:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800899a:	4618      	mov	r0, r3
 800899c:	f7f7 fdaa 	bl	80004f4 <__aeabi_ui2d>
 80089a0:	a337      	add	r3, pc, #220	; (adr r3, 8008a80 <SX1276SetRx+0x310>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc69 	bl	800027c <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	f7f8 f8db 	bl	8000b6c <__aeabi_d2uiz>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fee5 	bl	8007788 <SX1276SetChannel>
                    break;
 80089be:	e033      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80089c0:	2144      	movs	r1, #68	; 0x44
 80089c2:	202f      	movs	r0, #47	; 0x2f
 80089c4:	f000 fa96 	bl	8008ef4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 80089c8:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <SX1276SetRx+0x320>)
 80089ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fd90 	bl	80004f4 <__aeabi_ui2d>
 80089d4:	a32c      	add	r3, pc, #176	; (adr r3, 8008a88 <SX1276SetRx+0x318>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc4f 	bl	800027c <__adddf3>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4610      	mov	r0, r2
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7f8 f8c1 	bl	8000b6c <__aeabi_d2uiz>
 80089ea:	4603      	mov	r3, r0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fecb 	bl	8007788 <SX1276SetChannel>
                    break;
 80089f2:	e019      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80089f4:	2140      	movs	r1, #64	; 0x40
 80089f6:	202f      	movs	r0, #47	; 0x2f
 80089f8:	f000 fa7c 	bl	8008ef4 <SX1276Write>
                    break;
 80089fc:	e014      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80089fe:	2140      	movs	r1, #64	; 0x40
 8008a00:	202f      	movs	r0, #47	; 0x2f
 8008a02:	f000 fa77 	bl	8008ef4 <SX1276Write>
                    break;
 8008a06:	e00f      	b.n	8008a28 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8008a08:	2140      	movs	r1, #64	; 0x40
 8008a0a:	202f      	movs	r0, #47	; 0x2f
 8008a0c:	f000 fa72 	bl	8008ef4 <SX1276Write>
                    break;
 8008a10:	e00a      	b.n	8008a28 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8008a12:	2031      	movs	r0, #49	; 0x31
 8008a14:	f000 fa80 	bl	8008f18 <SX1276Read>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	4619      	mov	r1, r3
 8008a22:	2031      	movs	r0, #49	; 0x31
 8008a24:	f000 fa66 	bl	8008ef4 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8008a28:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <SX1276SetRx+0x320>)
 8008a2a:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8008a2e:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008a30:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <SX1276SetRx+0x320>)
 8008a32:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d02c      	beq.n	8008a94 <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008a3a:	211d      	movs	r1, #29
 8008a3c:	2011      	movs	r0, #17
 8008a3e:	f000 fa59 	bl	8008ef4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8008a42:	2040      	movs	r0, #64	; 0x40
 8008a44:	f000 fa68 	bl	8008f18 <SX1276Read>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	2040      	movs	r0, #64	; 0x40
 8008a54:	f000 fa4e 	bl	8008ef4 <SX1276Write>
 8008a58:	e02b      	b.n	8008ab2 <SX1276SetRx+0x342>
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	00000000 	.word	0x00000000
 8008a64:	40be8200 	.word	0x40be8200
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	40c45a00 	.word	0x40c45a00
 8008a70:	00000000 	.word	0x00000000
 8008a74:	40ce8200 	.word	0x40ce8200
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	40d45780 	.word	0x40d45780
 8008a80:	00000000 	.word	0x00000000
 8008a84:	40de8480 	.word	0x40de8480
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	40e458c0 	.word	0x40e458c0
 8008a90:	20000ae4 	.word	0x20000ae4
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008a94:	211f      	movs	r1, #31
 8008a96:	2011      	movs	r0, #17
 8008a98:	f000 fa2c 	bl	8008ef4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008a9c:	2040      	movs	r0, #64	; 0x40
 8008a9e:	f000 fa3b 	bl	8008f18 <SX1276Read>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4619      	mov	r1, r3
 8008aac:	2040      	movs	r0, #64	; 0x40
 8008aae:	f000 fa21 	bl	8008ef4 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	200f      	movs	r0, #15
 8008ab6:	f000 fa1d 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008aba:	2100      	movs	r1, #0
 8008abc:	200d      	movs	r0, #13
 8008abe:	f000 fa19 	bl	8008ef4 <SX1276Write>
        }
        break;
 8008ac2:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8008ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ac8:	2100      	movs	r1, #0
 8008aca:	484a      	ldr	r0, [pc, #296]	; (8008bf4 <SX1276SetRx+0x484>)
 8008acc:	f000 ffae 	bl	8009a2c <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8008ad0:	4b49      	ldr	r3, [pc, #292]	; (8008bf8 <SX1276SetRx+0x488>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    if( timeout != 0 )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d006      	beq.n	8008aec <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4846      	ldr	r0, [pc, #280]	; (8008bfc <SX1276SetRx+0x48c>)
 8008ae2:	f7fe fd95 	bl	8007610 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8008ae6:	4845      	ldr	r0, [pc, #276]	; (8008bfc <SX1276SetRx+0x48c>)
 8008ae8:	f7fe fb90 	bl	800720c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8008aec:	4b42      	ldr	r3, [pc, #264]	; (8008bf8 <SX1276SetRx+0x488>)
 8008aee:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d16f      	bne.n	8008bd6 <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008af6:	2005      	movs	r0, #5
 8008af8:	f000 f98c 	bl	8008e14 <SX1276SetOpMode>

        if( rxContinuous == false )
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d070      	beq.n	8008bea <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8008b08:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <SX1276SetRx+0x488>)
 8008b0a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f7 fd00 	bl	8000514 <__aeabi_i2d>
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 8008b18:	2027      	movs	r0, #39	; 0x27
 8008b1a:	f000 f9fd 	bl	8008f18 <SX1276Read>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f7 fcf5 	bl	8000514 <__aeabi_i2d>
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	4b34      	ldr	r3, [pc, #208]	; (8008c00 <SX1276SetRx+0x490>)
 8008b30:	f7f7 fba4 	bl	800027c <__adddf3>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fb9e 	bl	800027c <__adddf3>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4610      	mov	r0, r2
 8008b46:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 8008b48:	f04f 0200 	mov.w	r2, #0
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	; (8008c04 <SX1276SetRx+0x494>)
 8008b4e:	f7f7 fb95 	bl	800027c <__adddf3>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <SX1276SetRx+0x498>)
 8008b60:	f7f7 fd42 	bl	80005e8 <__aeabi_dmul>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8008b6c:	4b22      	ldr	r3, [pc, #136]	; (8008bf8 <SX1276SetRx+0x488>)
 8008b6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f7 fcbe 	bl	80004f4 <__aeabi_ui2d>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fe5c 	bl	800083c <__aeabi_ddiv>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <SX1276SetRx+0x49c>)
 8008b92:	f7f7 fd29 	bl	80005e8 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	ec43 2b17 	vmov	d7, r2, r3
 8008b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008ba2:	eef0 0a67 	vmov.f32	s1, s15
 8008ba6:	f001 fed7 	bl	800a958 <ceil>
 8008baa:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <SX1276SetRx+0x4a0>)
 8008bb4:	f7f7 fb62 	bl	800027c <__adddf3>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	f7f7 ffd4 	bl	8000b6c <__aeabi_d2uiz>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4812      	ldr	r0, [pc, #72]	; (8008c14 <SX1276SetRx+0x4a4>)
 8008bca:	f7fe fd21 	bl	8007610 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8008bce:	4811      	ldr	r0, [pc, #68]	; (8008c14 <SX1276SetRx+0x4a4>)
 8008bd0:	f7fe fb1c 	bl	800720c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8008bd4:	e009      	b.n	8008bea <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8008bdc:	2005      	movs	r0, #5
 8008bde:	f000 f919 	bl	8008e14 <SX1276SetOpMode>
}
 8008be2:	e002      	b.n	8008bea <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8008be4:	2006      	movs	r0, #6
 8008be6:	f000 f915 	bl	8008e14 <SX1276SetOpMode>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200009e4 	.word	0x200009e4
 8008bf8:	20000ae4 	.word	0x20000ae4
 8008bfc:	20000c3c 	.word	0x20000c3c
 8008c00:	3ff00000 	.word	0x3ff00000
 8008c04:	40240000 	.word	0x40240000
 8008c08:	40200000 	.word	0x40200000
 8008c0c:	408f4000 	.word	0x408f4000
 8008c10:	40100000 	.word	0x40100000
 8008c14:	20000c50 	.word	0x20000c50

08008c18 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4837      	ldr	r0, [pc, #220]	; (8008d00 <SX1276SetTx+0xe8>)
 8008c24:	f7fe fcf4 	bl	8007610 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8008c28:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <SX1276SetTx+0xec>)
 8008c2a:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <SX1276SetTx+0x20>
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d026      	beq.n	8008c84 <SX1276SetTx+0x6c>
 8008c36:	e054      	b.n	8008ce2 <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c38:	2040      	movs	r0, #64	; 0x40
 8008c3a:	f000 f96d 	bl	8008f18 <SX1276Read>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8008c48:	f043 0310 	orr.w	r3, r3, #16
 8008c4c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4619      	mov	r1, r3
 8008c52:	2040      	movs	r0, #64	; 0x40
 8008c54:	f000 f94e 	bl	8008ef4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008c58:	2041      	movs	r0, #65	; 0x41
 8008c5a:	f000 f95d 	bl	8008f18 <SX1276Read>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	4619      	mov	r1, r3
 8008c68:	2041      	movs	r0, #65	; 0x41
 8008c6a:	f000 f943 	bl	8008ef4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008c6e:	2035      	movs	r0, #53	; 0x35
 8008c70:	f000 f952 	bl	8008f18 <SX1276Read>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	4b21      	ldr	r3, [pc, #132]	; (8008d04 <SX1276SetTx+0xec>)
 8008c7e:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
        }
        break;
 8008c82:	e02e      	b.n	8008ce2 <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008c84:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <SX1276SetTx+0xec>)
 8008c86:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d014      	beq.n	8008cb8 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008c8e:	21f5      	movs	r1, #245	; 0xf5
 8008c90:	2011      	movs	r0, #17
 8008c92:	f000 f92f 	bl	8008ef4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8008c96:	2040      	movs	r0, #64	; 0x40
 8008c98:	f000 f93e 	bl	8008f18 <SX1276Read>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	b25b      	sxtb	r3, r3
 8008ca0:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	2040      	movs	r0, #64	; 0x40
 8008cb2:	f000 f91f 	bl	8008ef4 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8008cb6:	e013      	b.n	8008ce0 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008cb8:	21f7      	movs	r1, #247	; 0xf7
 8008cba:	2011      	movs	r0, #17
 8008cbc:	f000 f91a 	bl	8008ef4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8008cc0:	2040      	movs	r0, #64	; 0x40
 8008cc2:	f000 f929 	bl	8008f18 <SX1276Read>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	2040      	movs	r0, #64	; 0x40
 8008cdc:	f000 f90a 	bl	8008ef4 <SX1276Write>
        break;
 8008ce0:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8008ce2:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <SX1276SetTx+0xec>)
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    TimerStart( &TxTimeoutTimer );
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <SX1276SetTx+0xe8>)
 8008cec:	f7fe fa8e 	bl	800720c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008cf0:	2003      	movs	r0, #3
 8008cf2:	f000 f88f 	bl	8008e14 <SX1276SetOpMode>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000c28 	.word	0x20000c28
 8008d04:	20000ae4 	.word	0x20000ae4

08008d08 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <SX1276StartCad+0x48>)
 8008d0e:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d019      	beq.n	8008d4a <SX1276StartCad+0x42>
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d000      	beq.n	8008d1c <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8008d1a:	e017      	b.n	8008d4c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008d1c:	21fa      	movs	r1, #250	; 0xfa
 8008d1e:	2011      	movs	r0, #17
 8008d20:	f000 f8e8 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008d24:	2040      	movs	r0, #64	; 0x40
 8008d26:	f000 f8f7 	bl	8008f18 <SX1276Read>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	4619      	mov	r1, r3
 8008d34:	2040      	movs	r0, #64	; 0x40
 8008d36:	f000 f8dd 	bl	8008ef4 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <SX1276StartCad+0x48>)
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8008d42:	2007      	movs	r0, #7
 8008d44:	f000 f866 	bl	8008e14 <SX1276SetOpMode>
        break;
 8008d48:	e000      	b.n	8008d4c <SX1276StartCad+0x44>
        break;
 8008d4a:	bf00      	nop
    }
}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000ae4 	.word	0x20000ae4

08008d54 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <SX1276ReadRssi+0x1a>
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d00b      	beq.n	8008d84 <SX1276ReadRssi+0x30>
 8008d6c:	e022      	b.n	8008db4 <SX1276ReadRssi+0x60>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008d6e:	2011      	movs	r0, #17
 8008d70:	f000 f8d2 	bl	8008f18 <SX1276Read>
 8008d74:	4603      	mov	r3, r0
 8008d76:	085b      	lsrs	r3, r3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	81fb      	strh	r3, [r7, #14]
        break;
 8008d82:	e01b      	b.n	8008dbc <SX1276ReadRssi+0x68>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <SX1276ReadRssi+0x74>)
 8008d86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008d8a:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <SX1276ReadRssi+0x78>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d908      	bls.n	8008da2 <SX1276ReadRssi+0x4e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8008d90:	201b      	movs	r0, #27
 8008d92:	f000 f8c1 	bl	8008f18 <SX1276Read>
 8008d96:	4603      	mov	r3, r0
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b9d      	subs	r3, #157	; 0x9d
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8008da0:	e00c      	b.n	8008dbc <SX1276ReadRssi+0x68>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8008da2:	201b      	movs	r0, #27
 8008da4:	f000 f8b8 	bl	8008f18 <SX1276Read>
 8008da8:	4603      	mov	r3, r0
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	3ba4      	subs	r3, #164	; 0xa4
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	81fb      	strh	r3, [r7, #14]
        break;
 8008db2:	e003      	b.n	8008dbc <SX1276ReadRssi+0x68>
    default:
        rssi = -1;
 8008db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008db8:	81fb      	strh	r3, [r7, #14]
        break;
 8008dba:	bf00      	nop
    }
    return rssi;
 8008dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000ae4 	.word	0x20000ae4
 8008dcc:	1f4add40 	.word	0x1f4add40

08008dd0 <SX1276Reset>:

void SX1276Reset( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	2300      	movs	r3, #0
 8008de0:	2201      	movs	r2, #1
 8008de2:	2124      	movs	r1, #36	; 0x24
 8008de4:	480a      	ldr	r0, [pc, #40]	; (8008e10 <SX1276Reset+0x40>)
 8008de6:	f7fd fa57 	bl	8006298 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 8008dea:	2001      	movs	r0, #1
 8008dec:	f7fc ffbc 	bl	8005d68 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8008df0:	2301      	movs	r3, #1
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	2300      	movs	r3, #0
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2124      	movs	r1, #36	; 0x24
 8008dfe:	4804      	ldr	r0, [pc, #16]	; (8008e10 <SX1276Reset+0x40>)
 8008e00:	f7fd fa4a 	bl	8006298 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 8008e04:	2006      	movs	r0, #6
 8008e06:	f7fc ffaf 	bl	8005d68 <DelayMs>
}
 8008e0a:	bf00      	nop
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000ae4 	.word	0x20000ae4

08008e14 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8008e24:	2001      	movs	r0, #1
 8008e26:	f7fe f94f 	bl	80070c8 <SX1276SetAntSwLowPower>
 8008e2a:	e00c      	b.n	8008e46 <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	f7fe f94b 	bl	80070c8 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d103      	bne.n	8008e40 <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f7fe f99f 	bl	800717c <SX1276SetAntSw>
 8008e3e:	e002      	b.n	8008e46 <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 8008e40:	2000      	movs	r0, #0
 8008e42:	f7fe f99b 	bl	800717c <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8008e46:	2001      	movs	r0, #1
 8008e48:	f000 f866 	bl	8008f18 <SX1276Read>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	b25a      	sxtb	r2, r3
 8008e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b25b      	sxtb	r3, r3
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4619      	mov	r1, r3
 8008e62:	2001      	movs	r0, #1
 8008e64:	f000 f846 	bl	8008ef4 <SX1276Write>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 8008e7a:	4a1d      	ldr	r2, [pc, #116]	; (8008ef0 <SX1276SetModem+0x80>)
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
    switch( SX1276.Settings.Modem )
 8008e82:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <SX1276SetModem+0x80>)
 8008e84:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d016      	beq.n	8008eba <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	f7ff ffc1 	bl	8008e14 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008e92:	2001      	movs	r0, #1
 8008e94:	f000 f840 	bl	8008f18 <SX1276Read>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	f000 f826 	bl	8008ef4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	2040      	movs	r0, #64	; 0x40
 8008eac:	f000 f822 	bl	8008ef4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008eb0:	2130      	movs	r1, #48	; 0x30
 8008eb2:	2041      	movs	r0, #65	; 0x41
 8008eb4:	f000 f81e 	bl	8008ef4 <SX1276Write>
        break;
 8008eb8:	e016      	b.n	8008ee8 <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f7ff ffaa 	bl	8008e14 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	f000 f829 	bl	8008f18 <SX1276Read>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4619      	mov	r1, r3
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	f000 f80f 	bl	8008ef4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2040      	movs	r0, #64	; 0x40
 8008eda:	f000 f80b 	bl	8008ef4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008ede:	2100      	movs	r1, #0
 8008ee0:	2041      	movs	r0, #65	; 0x41
 8008ee2:	f000 f807 	bl	8008ef4 <SX1276Write>
        break;
 8008ee6:	bf00      	nop
    }
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000ae4 	.word	0x20000ae4

08008ef4 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	460a      	mov	r2, r1
 8008efe:	71fb      	strb	r3, [r7, #7]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 8008f04:	1db9      	adds	r1, r7, #6
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f816 	bl	8008f3c <SX1276WriteBuffer>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8008f22:	f107 010f 	add.w	r1, r7, #15
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f832 	bl	8008f94 <SX1276ReadBuffer>
    return data;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	480f      	ldr	r0, [pc, #60]	; (8008f8c <SX1276WriteBuffer+0x50>)
 8008f50:	f7fd f9e1 	bl	8006316 <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 8008f5e:	1df9      	adds	r1, r7, #7
 8008f60:	f04f 33ff 	mov.w	r3, #4294967295
 8008f64:	2201      	movs	r2, #1
 8008f66:	480a      	ldr	r0, [pc, #40]	; (8008f90 <SX1276WriteBuffer+0x54>)
 8008f68:	f7fb fa16 	bl	8004398 <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 8008f6c:	79bb      	ldrb	r3, [r7, #6]
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	f04f 33ff 	mov.w	r3, #4294967295
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	4806      	ldr	r0, [pc, #24]	; (8008f90 <SX1276WriteBuffer+0x54>)
 8008f78:	f7fb fa0e 	bl	8004398 <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	4803      	ldr	r0, [pc, #12]	; (8008f8c <SX1276WriteBuffer+0x50>)
 8008f80:	f7fd f9c9 	bl	8006316 <GpioWrite>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000bc0 	.word	0x20000bc0
 8008f90:	20000b38 	.word	0x20000b38

08008f94 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	480f      	ldr	r0, [pc, #60]	; (8008fe4 <SX1276ReadBuffer+0x50>)
 8008fa8:	f7fd f9b5 	bl	8006316 <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 8008fb6:	1df9      	adds	r1, r7, #7
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	480a      	ldr	r0, [pc, #40]	; (8008fe8 <SX1276ReadBuffer+0x54>)
 8008fc0:	f7fb f9ea 	bl	8004398 <HAL_SPI_Transmit>

    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 8008fc4:	79bb      	ldrb	r3, [r7, #6]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	4806      	ldr	r0, [pc, #24]	; (8008fe8 <SX1276ReadBuffer+0x54>)
 8008fd0:	f7fb fb50 	bl	8004674 <HAL_SPI_Receive>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	4803      	ldr	r0, [pc, #12]	; (8008fe4 <SX1276ReadBuffer+0x50>)
 8008fd8:	f7fd f99d 	bl	8006316 <GpioWrite>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20000bc0 	.word	0x20000bc0
 8008fe8:	20000b38 	.word	0x20000b38

08008fec <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	2000      	movs	r0, #0
 8009000:	f7ff ff9c 	bl	8008f3c <SX1276WriteBuffer>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	461a      	mov	r2, r3
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	2000      	movs	r0, #0
 8009020:	f7ff ffb8 	bl	8008f94 <SX1276ReadBuffer>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	460a      	mov	r2, r1
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	4613      	mov	r3, r2
 800903a:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff ff16 	bl	8008e70 <SX1276SetModem>

    switch( modem )
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <SX1276SetMaxPayloadLength+0x24>
 800904a:	2b01      	cmp	r3, #1
 800904c:	d00e      	beq.n	800906c <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800904e:	e014      	b.n	800907a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <SX1276SetMaxPayloadLength+0x58>)
 8009052:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009056:	f083 0301 	eor.w	r3, r3, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009060:	79bb      	ldrb	r3, [r7, #6]
 8009062:	4619      	mov	r1, r3
 8009064:	2032      	movs	r0, #50	; 0x32
 8009066:	f7ff ff45 	bl	8008ef4 <SX1276Write>
        break;
 800906a:	e005      	b.n	8009078 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800906c:	79bb      	ldrb	r3, [r7, #6]
 800906e:	4619      	mov	r1, r3
 8009070:	2023      	movs	r0, #35	; 0x23
 8009072:	f7ff ff3f 	bl	8008ef4 <SX1276Write>
        break;
 8009076:	e000      	b.n	800907a <SX1276SetMaxPayloadLength+0x4e>
        break;
 8009078:	bf00      	nop
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20000ae4 	.word	0x20000ae4

08009088 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800908c:	4b32      	ldr	r3, [pc, #200]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 800908e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009092:	2b01      	cmp	r3, #1
 8009094:	d002      	beq.n	800909c <SX1276OnTimeoutIrq+0x14>
 8009096:	2b02      	cmp	r3, #2
 8009098:	d046      	beq.n	8009128 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800909a:	e05a      	b.n	8009152 <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800909c:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 800909e:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d132      	bne.n	800910c <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80090a6:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80090ae:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80090b6:	4b28      	ldr	r3, [pc, #160]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80090be:	4b26      	ldr	r3, [pc, #152]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80090c6:	210b      	movs	r1, #11
 80090c8:	203e      	movs	r0, #62	; 0x3e
 80090ca:	f7ff ff13 	bl	8008ef4 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80090ce:	2110      	movs	r1, #16
 80090d0:	203f      	movs	r0, #63	; 0x3f
 80090d2:	f7ff ff0f 	bl	8008ef4 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80090d6:	4b20      	ldr	r3, [pc, #128]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 80090d8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00e      	beq.n	80090fe <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80090e0:	200d      	movs	r0, #13
 80090e2:	f7ff ff19 	bl	8008f18 <SX1276Read>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	4619      	mov	r1, r3
 80090f0:	200d      	movs	r0, #13
 80090f2:	f7ff feff 	bl	8008ef4 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80090f6:	4819      	ldr	r0, [pc, #100]	; (800915c <SX1276OnTimeoutIrq+0xd4>)
 80090f8:	f7fe f888 	bl	800720c <TimerStart>
 80090fc:	e006      	b.n	800910c <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 80090fe:	4b16      	ldr	r3, [pc, #88]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 8009100:	2200      	movs	r2, #0
 8009102:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                TimerStop( &RxTimeoutSyncWord );
 8009106:	4815      	ldr	r0, [pc, #84]	; (800915c <SX1276OnTimeoutIrq+0xd4>)
 8009108:	f7fe f9c4 	bl	8007494 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800910c:	4b14      	ldr	r3, [pc, #80]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01b      	beq.n	800914c <SX1276OnTimeoutIrq+0xc4>
 8009114:	4b12      	ldr	r3, [pc, #72]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d016      	beq.n	800914c <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 800911e:	4b10      	ldr	r3, [pc, #64]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	4798      	blx	r3
        break;
 8009126:	e011      	b.n	800914c <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 8009128:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <SX1276OnTimeoutIrq+0xd0>)
 800912a:	2200      	movs	r2, #0
 800912c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <SX1276OnTimeoutIrq+0xc8>
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <SX1276OnTimeoutIrq+0xd8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4798      	blx	r3
        break;
 800914a:	e001      	b.n	8009150 <SX1276OnTimeoutIrq+0xc8>
        break;
 800914c:	bf00      	nop
 800914e:	e000      	b.n	8009152 <SX1276OnTimeoutIrq+0xca>
        break;
 8009150:	bf00      	nop
    }
}
 8009152:	bf00      	nop
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000ae4 	.word	0x20000ae4
 800915c:	20000c50 	.word	0x20000c50
 8009160:	200009e0 	.word	0x200009e0

08009164 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8009164:	b590      	push	{r4, r7, lr}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 800916e:	4ba7      	ldr	r3, [pc, #668]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009170:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009174:	2b01      	cmp	r3, #1
 8009176:	d003      	beq.n	8009180 <SX1276OnDio0Irq+0x1c>
 8009178:	2b02      	cmp	r3, #2
 800917a:	f000 81f0 	beq.w	800955e <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 800917e:	e20d      	b.n	800959c <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 8009180:	4ba2      	ldr	r3, [pc, #648]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009182:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <SX1276OnDio0Irq+0x2e>
 800918a:	2b01      	cmp	r3, #1
 800918c:	f000 80ef 	beq.w	800936e <SX1276OnDio0Irq+0x20a>
                break;
 8009190:	e1e4      	b.n	800955c <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8009192:	4b9e      	ldr	r3, [pc, #632]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009194:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8009198:	2b00      	cmp	r3, #0
 800919a:	d051      	beq.n	8009240 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800919c:	203f      	movs	r0, #63	; 0x3f
 800919e:	f7ff febb 	bl	8008f18 <SX1276Read>
 80091a2:	4603      	mov	r3, r0
 80091a4:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d046      	beq.n	8009240 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80091b2:	210b      	movs	r1, #11
 80091b4:	203e      	movs	r0, #62	; 0x3e
 80091b6:	f7ff fe9d 	bl	8008ef4 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80091ba:	2110      	movs	r1, #16
 80091bc:	203f      	movs	r0, #63	; 0x3f
 80091be:	f7ff fe99 	bl	8008ef4 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80091c2:	4893      	ldr	r0, [pc, #588]	; (8009410 <SX1276OnDio0Irq+0x2ac>)
 80091c4:	f7fe f966 	bl	8007494 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80091c8:	4b90      	ldr	r3, [pc, #576]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80091ca:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80091ce:	f083 0301 	eor.w	r3, r3, #1
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d007      	beq.n	80091e8 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 80091d8:	488e      	ldr	r0, [pc, #568]	; (8009414 <SX1276OnDio0Irq+0x2b0>)
 80091da:	f7fe f95b 	bl	8007494 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80091de:	4b8b      	ldr	r3, [pc, #556]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 80091e6:	e00d      	b.n	8009204 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80091e8:	200d      	movs	r0, #13
 80091ea:	f7ff fe95 	bl	8008f18 <SX1276Read>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	4619      	mov	r1, r3
 80091f8:	200d      	movs	r0, #13
 80091fa:	f7ff fe7b 	bl	8008ef4 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80091fe:	4885      	ldr	r0, [pc, #532]	; (8009414 <SX1276OnDio0Irq+0x2b0>)
 8009200:	f7fe f804 	bl	800720c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8009204:	4b84      	ldr	r3, [pc, #528]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <SX1276OnDio0Irq+0xba>
 800920c:	4b82      	ldr	r3, [pc, #520]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 8009216:	4b80      	ldr	r3, [pc, #512]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800921e:	4b7b      	ldr	r3, [pc, #492]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009226:	4b79      	ldr	r3, [pc, #484]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800922e:	4b77      	ldr	r3, [pc, #476]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8009236:	4b75      	ldr	r3, [pc, #468]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
                        break;
 800923e:	e18d      	b.n	800955c <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009240:	4b72      	ldr	r3, [pc, #456]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009242:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8009246:	2b00      	cmp	r3, #0
 8009248:	d133      	bne.n	80092b2 <SX1276OnDio0Irq+0x14e>
 800924a:	4b70      	ldr	r3, [pc, #448]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800924c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d12e      	bne.n	80092b2 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8009254:	4b6d      	ldr	r3, [pc, #436]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009256:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800925a:	f083 0301 	eor.w	r3, r3, #1
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009264:	2101      	movs	r1, #1
 8009266:	486d      	ldr	r0, [pc, #436]	; (800941c <SX1276OnDio0Irq+0x2b8>)
 8009268:	f7ff fed0 	bl	800900c <SX1276ReadFifo>
 800926c:	e007      	b.n	800927e <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800926e:	2032      	movs	r0, #50	; 0x32
 8009270:	f7ff fe52 	bl	8008f18 <SX1276Read>
 8009274:	4603      	mov	r3, r0
 8009276:	b29a      	uxth	r2, r3
 8009278:	4b64      	ldr	r3, [pc, #400]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800927a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800927e:	4b63      	ldr	r3, [pc, #396]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009280:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009284:	461a      	mov	r2, r3
 8009286:	4b66      	ldr	r3, [pc, #408]	; (8009420 <SX1276OnDio0Irq+0x2bc>)
 8009288:	18d0      	adds	r0, r2, r3
 800928a:	4b60      	ldr	r3, [pc, #384]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800928c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8009290:	b2da      	uxtb	r2, r3
 8009292:	4b5e      	ldr	r3, [pc, #376]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009294:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4619      	mov	r1, r3
 80092a0:	f7ff feb4 	bl	800900c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092a6:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 80092aa:	4b58      	ldr	r3, [pc, #352]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092ac:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80092b0:	e018      	b.n	80092e4 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80092b2:	4b56      	ldr	r3, [pc, #344]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092b4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80092b8:	461a      	mov	r2, r3
 80092ba:	4b59      	ldr	r3, [pc, #356]	; (8009420 <SX1276OnDio0Irq+0x2bc>)
 80092bc:	18d0      	adds	r0, r2, r3
 80092be:	4b53      	ldr	r3, [pc, #332]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092c0:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	4b51      	ldr	r3, [pc, #324]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092c8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	4619      	mov	r1, r3
 80092d4:	f7ff fe9a 	bl	800900c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80092d8:	4b4c      	ldr	r3, [pc, #304]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092da:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 80092de:	4b4b      	ldr	r3, [pc, #300]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092e0:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80092e4:	4b49      	ldr	r3, [pc, #292]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092e6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80092ea:	f083 0301 	eor.w	r3, r3, #1
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 80092f4:	4b45      	ldr	r3, [pc, #276]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    TimerStart( &RxTimeoutSyncWord );
 80092fc:	4845      	ldr	r0, [pc, #276]	; (8009414 <SX1276OnDio0Irq+0x2b0>)
 80092fe:	f7fd ff85 	bl	800720c <TimerStart>
 8009302:	e00a      	b.n	800931a <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009304:	200d      	movs	r0, #13
 8009306:	f7ff fe07 	bl	8008f18 <SX1276Read>
 800930a:	4603      	mov	r3, r0
 800930c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	200d      	movs	r0, #13
 8009316:	f7ff fded 	bl	8008ef4 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 800931a:	483d      	ldr	r0, [pc, #244]	; (8009410 <SX1276OnDio0Irq+0x2ac>)
 800931c:	f7fe f8ba 	bl	8007494 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009320:	4b3d      	ldr	r3, [pc, #244]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d011      	beq.n	800934c <SX1276OnDio0Irq+0x1e8>
 8009328:	4b3b      	ldr	r3, [pc, #236]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00c      	beq.n	800934c <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8009332:	4b39      	ldr	r3, [pc, #228]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689c      	ldr	r4, [r3, #8]
 8009338:	4b34      	ldr	r3, [pc, #208]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800933a:	f8b3 111a 	ldrh.w	r1, [r3, #282]	; 0x11a
 800933e:	4b33      	ldr	r3, [pc, #204]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009340:	f993 3112 	ldrsb.w	r3, [r3, #274]	; 0x112
 8009344:	b21a      	sxth	r2, r3
 8009346:	2300      	movs	r3, #0
 8009348:	4835      	ldr	r0, [pc, #212]	; (8009420 <SX1276OnDio0Irq+0x2bc>)
 800934a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800934c:	4b2f      	ldr	r3, [pc, #188]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009354:	4b2d      	ldr	r3, [pc, #180]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800935c:	4b2b      	ldr	r3, [pc, #172]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800935e:	2200      	movs	r2, #0
 8009360:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8009364:	4b29      	ldr	r3, [pc, #164]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
                break;
 800936c:	e0f6      	b.n	800955c <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8009372:	2140      	movs	r1, #64	; 0x40
 8009374:	2012      	movs	r0, #18
 8009376:	f7ff fdbd 	bl	8008ef4 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800937a:	2012      	movs	r0, #18
 800937c:	f7ff fdcc 	bl	8008f18 <SX1276Read>
 8009380:	4603      	mov	r3, r0
 8009382:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b20      	cmp	r3, #32
 800938e:	d122      	bne.n	80093d6 <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8009390:	2120      	movs	r1, #32
 8009392:	2012      	movs	r0, #18
 8009394:	f7ff fdae 	bl	8008ef4 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8009398:	4b1c      	ldr	r3, [pc, #112]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 800939a:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800939e:	f083 0301 	eor.w	r3, r3, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 80093a8:	4b18      	ldr	r3, [pc, #96]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                        TimerStop( &RxTimeoutTimer );
 80093b0:	4817      	ldr	r0, [pc, #92]	; (8009410 <SX1276OnDio0Irq+0x2ac>)
 80093b2:	f7fe f86f 	bl	8007494 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80093b6:	4b18      	ldr	r3, [pc, #96]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 80cb 	beq.w	8009556 <SX1276OnDio0Irq+0x3f2>
 80093c0:	4b15      	ldr	r3, [pc, #84]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 80c5 	beq.w	8009556 <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 80093cc:	4b12      	ldr	r3, [pc, #72]	; (8009418 <SX1276OnDio0Irq+0x2b4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	4798      	blx	r3
                        break;
 80093d4:	e0bf      	b.n	8009556 <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 80093d6:	2019      	movs	r0, #25
 80093d8:	f7ff fd9e 	bl	8008f18 <SX1276Read>
 80093dc:	4603      	mov	r3, r0
 80093de:	b25a      	sxtb	r2, r3
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80093e2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80093e8:	f993 313c 	ldrsb.w	r3, [r3, #316]	; 0x13c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da19      	bge.n	8009424 <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <SX1276OnDio0Irq+0x2a8>)
 80093f2:	f993 313c 	ldrsb.w	r3, [r3, #316]	; 0x13c
 80093f6:	425b      	negs	r3, r3
 80093f8:	109b      	asrs	r3, r3, #2
 80093fa:	b25b      	sxtb	r3, r3
 80093fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009400:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	425b      	negs	r3, r3
 8009406:	b2db      	uxtb	r3, r3
 8009408:	71fb      	strb	r3, [r7, #7]
 800940a:	e013      	b.n	8009434 <SX1276OnDio0Irq+0x2d0>
 800940c:	20000ae4 	.word	0x20000ae4
 8009410:	20000c3c 	.word	0x20000c3c
 8009414:	20000c50 	.word	0x20000c50
 8009418:	200009e0 	.word	0x200009e0
 800941c:	20000bfe 	.word	0x20000bfe
 8009420:	200009e4 	.word	0x200009e4
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8009424:	4b5f      	ldr	r3, [pc, #380]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009426:	f993 313c 	ldrsb.w	r3, [r3, #316]	; 0x13c
 800942a:	109b      	asrs	r3, r3, #2
 800942c:	b25b      	sxtb	r3, r3
 800942e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009432:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8009434:	201a      	movs	r0, #26
 8009436:	f7ff fd6f 	bl	8008f18 <SX1276Read>
 800943a:	4603      	mov	r3, r0
 800943c:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800943e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009442:	2b00      	cmp	r3, #0
 8009444:	da2d      	bge.n	80094a2 <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009446:	4b57      	ldr	r3, [pc, #348]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009448:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800944c:	4a56      	ldr	r2, [pc, #344]	; (80095a8 <SX1276OnDio0Irq+0x444>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d913      	bls.n	800947a <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8009452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009456:	111b      	asrs	r3, r3, #4
 8009458:	b21b      	sxth	r3, r3
 800945a:	b29a      	uxth	r2, r3
 800945c:	88bb      	ldrh	r3, [r7, #4]
 800945e:	4413      	add	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009466:	b29b      	uxth	r3, r3
 8009468:	4413      	add	r3, r2
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b9d      	subs	r3, #157	; 0x9d
 800946e:	b29b      	uxth	r3, r3
 8009470:	b21a      	sxth	r2, r3
 8009472:	4b4c      	ldr	r3, [pc, #304]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009474:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8009478:	e036      	b.n	80094e8 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800947a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800947e:	111b      	asrs	r3, r3, #4
 8009480:	b21b      	sxth	r3, r3
 8009482:	b29a      	uxth	r2, r3
 8009484:	88bb      	ldrh	r3, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	b29a      	uxth	r2, r3
 800948a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800948e:	b29b      	uxth	r3, r3
 8009490:	4413      	add	r3, r2
 8009492:	b29b      	uxth	r3, r3
 8009494:	3ba4      	subs	r3, #164	; 0xa4
 8009496:	b29b      	uxth	r3, r3
 8009498:	b21a      	sxth	r2, r3
 800949a:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 800949c:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80094a0:	e022      	b.n	80094e8 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80094a2:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 80094a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80094a8:	4a3f      	ldr	r2, [pc, #252]	; (80095a8 <SX1276OnDio0Irq+0x444>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d90e      	bls.n	80094cc <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80094ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094b2:	111b      	asrs	r3, r3, #4
 80094b4:	b21b      	sxth	r3, r3
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	88bb      	ldrh	r3, [r7, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b9d      	subs	r3, #157	; 0x9d
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	b21a      	sxth	r2, r3
 80094c4:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 80094c6:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80094ca:	e00d      	b.n	80094e8 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80094cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094d0:	111b      	asrs	r3, r3, #4
 80094d2:	b21b      	sxth	r3, r3
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	88bb      	ldrh	r3, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3ba4      	subs	r3, #164	; 0xa4
 80094de:	b29b      	uxth	r3, r3
 80094e0:	b21a      	sxth	r2, r3
 80094e2:	4b30      	ldr	r3, [pc, #192]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 80094e4:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80094e8:	2013      	movs	r0, #19
 80094ea:	f7ff fd15 	bl	8008f18 <SX1276Read>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b2c      	ldr	r3, [pc, #176]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 80094f4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80094f8:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 80094fa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80094fe:	4619      	mov	r1, r3
 8009500:	482a      	ldr	r0, [pc, #168]	; (80095ac <SX1276OnDio0Irq+0x448>)
 8009502:	f7ff fd83 	bl	800900c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8009506:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009508:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800950c:	f083 0301 	eor.w	r3, r3, #1
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 8009516:	4b23      	ldr	r3, [pc, #140]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009518:	2200      	movs	r2, #0
 800951a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    TimerStop( &RxTimeoutTimer );
 800951e:	4824      	ldr	r0, [pc, #144]	; (80095b0 <SX1276OnDio0Irq+0x44c>)
 8009520:	f7fd ffb8 	bl	8007494 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009524:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d016      	beq.n	800955a <SX1276OnDio0Irq+0x3f6>
 800952c:	4b21      	ldr	r3, [pc, #132]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d011      	beq.n	800955a <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8009536:	4b1f      	ldr	r3, [pc, #124]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689c      	ldr	r4, [r3, #8]
 800953c:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 800953e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009542:	b299      	uxth	r1, r3
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009546:	f9b3 213e 	ldrsh.w	r2, [r3, #318]	; 0x13e
 800954a:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 800954c:	f993 313c 	ldrsb.w	r3, [r3, #316]	; 0x13c
 8009550:	4816      	ldr	r0, [pc, #88]	; (80095ac <SX1276OnDio0Irq+0x448>)
 8009552:	47a0      	blx	r4
                break;
 8009554:	e001      	b.n	800955a <SX1276OnDio0Irq+0x3f6>
                        break;
 8009556:	bf00      	nop
 8009558:	e020      	b.n	800959c <SX1276OnDio0Irq+0x438>
                break;
 800955a:	bf00      	nop
            break;
 800955c:	e01e      	b.n	800959c <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 800955e:	4816      	ldr	r0, [pc, #88]	; (80095b8 <SX1276OnDio0Irq+0x454>)
 8009560:	f7fd ff98 	bl	8007494 <TimerStop>
            switch( SX1276.Settings.Modem )
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009566:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800956a:	2b01      	cmp	r3, #1
 800956c:	d103      	bne.n	8009576 <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800956e:	2108      	movs	r1, #8
 8009570:	2012      	movs	r0, #18
 8009572:	f7ff fcbf 	bl	8008ef4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8009576:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <SX1276OnDio0Irq+0x440>)
 8009578:	2200      	movs	r2, #0
 800957a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800957e:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d008      	beq.n	8009598 <SX1276OnDio0Irq+0x434>
 8009586:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 8009590:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <SX1276OnDio0Irq+0x450>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4798      	blx	r3
                break;
 8009598:	bf00      	nop
            break;
 800959a:	bf00      	nop
    }
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd90      	pop	{r4, r7, pc}
 80095a4:	20000ae4 	.word	0x20000ae4
 80095a8:	1f4add40 	.word	0x1f4add40
 80095ac:	200009e4 	.word	0x200009e4
 80095b0:	20000c3c 	.word	0x20000c3c
 80095b4:	200009e0 	.word	0x200009e0
 80095b8:	20000c28 	.word	0x20000c28

080095bc <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 80095c0:	4b6a      	ldr	r3, [pc, #424]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80095c2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d003      	beq.n	80095d2 <SX1276OnDio1Irq+0x16>
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	f000 8083 	beq.w	80096d6 <SX1276OnDio1Irq+0x11a>
            default:
                break;
            }
            break;
        default:
            break;
 80095d0:	e0ca      	b.n	8009768 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 80095d2:	4b66      	ldr	r3, [pc, #408]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80095d4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SX1276OnDio1Irq+0x26>
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d060      	beq.n	80096a2 <SX1276OnDio1Irq+0xe6>
                break;
 80095e0:	e078      	b.n	80096d4 <SX1276OnDio1Irq+0x118>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80095e2:	4b62      	ldr	r3, [pc, #392]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80095e4:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d119      	bne.n	8009620 <SX1276OnDio1Irq+0x64>
 80095ec:	4b5f      	ldr	r3, [pc, #380]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80095ee:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d114      	bne.n	8009620 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80095f6:	4b5d      	ldr	r3, [pc, #372]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80095f8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80095fc:	f083 0301 	eor.w	r3, r3, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009606:	2101      	movs	r1, #1
 8009608:	4859      	ldr	r0, [pc, #356]	; (8009770 <SX1276OnDio1Irq+0x1b4>)
 800960a:	f7ff fcff 	bl	800900c <SX1276ReadFifo>
 800960e:	e007      	b.n	8009620 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009610:	2032      	movs	r0, #50	; 0x32
 8009612:	f7ff fc81 	bl	8008f18 <SX1276Read>
 8009616:	4603      	mov	r3, r0
 8009618:	b29a      	uxth	r2, r3
 800961a:	4b54      	ldr	r3, [pc, #336]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800961c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8009620:	4b52      	ldr	r3, [pc, #328]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009622:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8009626:	461a      	mov	r2, r3
 8009628:	4b50      	ldr	r3, [pc, #320]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800962a:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	4a4e      	ldr	r2, [pc, #312]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009632:	f892 211e 	ldrb.w	r2, [r2, #286]	; 0x11e
 8009636:	4293      	cmp	r3, r2
 8009638:	dd19      	ble.n	800966e <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800963a:	4b4c      	ldr	r3, [pc, #304]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800963c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009640:	461a      	mov	r2, r3
 8009642:	4b4c      	ldr	r3, [pc, #304]	; (8009774 <SX1276OnDio1Irq+0x1b8>)
 8009644:	4413      	add	r3, r2
 8009646:	4a49      	ldr	r2, [pc, #292]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009648:	f892 211e 	ldrb.w	r2, [r2, #286]	; 0x11e
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fcdc 	bl	800900c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 8009654:	4b45      	ldr	r3, [pc, #276]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009656:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
 800965a:	4b44      	ldr	r3, [pc, #272]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800965c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8009660:	b29b      	uxth	r3, r3
 8009662:	4413      	add	r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009668:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                break;
 800966c:	e032      	b.n	80096d4 <SX1276OnDio1Irq+0x118>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800966e:	4b3f      	ldr	r3, [pc, #252]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009670:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009674:	461a      	mov	r2, r3
 8009676:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <SX1276OnDio1Irq+0x1b8>)
 8009678:	18d0      	adds	r0, r2, r3
 800967a:	4b3c      	ldr	r3, [pc, #240]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800967c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8009680:	b2da      	uxtb	r2, r3
 8009682:	4b3a      	ldr	r3, [pc, #232]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009684:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4619      	mov	r1, r3
 8009690:	f7ff fcbc 	bl	800900c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009694:	4b35      	ldr	r3, [pc, #212]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009696:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 800969a:	4b34      	ldr	r3, [pc, #208]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800969c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                break;
 80096a0:	e018      	b.n	80096d4 <SX1276OnDio1Irq+0x118>
                TimerStop( &RxTimeoutTimer );
 80096a2:	4835      	ldr	r0, [pc, #212]	; (8009778 <SX1276OnDio1Irq+0x1bc>)
 80096a4:	f7fd fef6 	bl	8007494 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80096a8:	2180      	movs	r1, #128	; 0x80
 80096aa:	2012      	movs	r0, #18
 80096ac:	f7ff fc22 	bl	8008ef4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80096b0:	4b2e      	ldr	r3, [pc, #184]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80096b8:	4b30      	ldr	r3, [pc, #192]	; (800977c <SX1276OnDio1Irq+0x1c0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <SX1276OnDio1Irq+0x116>
 80096c0:	4b2e      	ldr	r3, [pc, #184]	; (800977c <SX1276OnDio1Irq+0x1c0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <SX1276OnDio1Irq+0x116>
                    RadioEvents->RxTimeout( );
 80096ca:	4b2c      	ldr	r3, [pc, #176]	; (800977c <SX1276OnDio1Irq+0x1c0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	4798      	blx	r3
                break;
 80096d2:	bf00      	nop
            break;
 80096d4:	e048      	b.n	8009768 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 80096d6:	4b25      	ldr	r3, [pc, #148]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80096d8:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <SX1276OnDio1Irq+0x128>
 80096e0:	2b01      	cmp	r3, #1
                break;
 80096e2:	e040      	b.n	8009766 <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80096e4:	4b21      	ldr	r3, [pc, #132]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80096e6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80096ea:	461a      	mov	r2, r3
 80096ec:	4b1f      	ldr	r3, [pc, #124]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80096ee:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	4a1d      	ldr	r2, [pc, #116]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 80096f6:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 80096fa:	4293      	cmp	r3, r2
 80096fc:	dd19      	ble.n	8009732 <SX1276OnDio1Irq+0x176>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80096fe:	4b1b      	ldr	r3, [pc, #108]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009700:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009704:	461a      	mov	r2, r3
 8009706:	4b1b      	ldr	r3, [pc, #108]	; (8009774 <SX1276OnDio1Irq+0x1b8>)
 8009708:	4413      	add	r3, r2
 800970a:	4a18      	ldr	r2, [pc, #96]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800970c:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fc6a 	bl	8008fec <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800971a:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009720:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8009724:	b29b      	uxth	r3, r3
 8009726:	4413      	add	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	4b10      	ldr	r3, [pc, #64]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800972c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                break;
 8009730:	e018      	b.n	8009764 <SX1276OnDio1Irq+0x1a8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009732:	4b0e      	ldr	r3, [pc, #56]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009734:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8009738:	461a      	mov	r2, r3
 800973a:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <SX1276OnDio1Irq+0x1b8>)
 800973c:	18d0      	adds	r0, r2, r3
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009740:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8009744:	b2da      	uxtb	r2, r3
 8009746:	4b09      	ldr	r3, [pc, #36]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009748:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800974c:	b2db      	uxtb	r3, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	b2db      	uxtb	r3, r3
 8009752:	4619      	mov	r1, r3
 8009754:	f7ff fc4a 	bl	8008fec <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 800975a:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 800975e:	4b03      	ldr	r3, [pc, #12]	; (800976c <SX1276OnDio1Irq+0x1b0>)
 8009760:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
                break;
 8009764:	bf00      	nop
            break;
 8009766:	bf00      	nop
    }
}
 8009768:	bf00      	nop
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000ae4 	.word	0x20000ae4
 8009770:	20000bfe 	.word	0x20000bfe
 8009774:	200009e4 	.word	0x200009e4
 8009778:	20000c3c 	.word	0x20000c3c
 800977c:	200009e0 	.word	0x200009e0

08009780 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8009780:	b598      	push	{r3, r4, r7, lr}
 8009782:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8009784:	4b5a      	ldr	r3, [pc, #360]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 8009786:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800978a:	2b01      	cmp	r3, #1
 800978c:	d002      	beq.n	8009794 <SX1276OnDio2Irq+0x14>
 800978e:	2b02      	cmp	r3, #2
 8009790:	d07b      	beq.n	800988a <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 8009792:	e0a6      	b.n	80098e2 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8009794:	4b56      	ldr	r3, [pc, #344]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 8009796:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <SX1276OnDio2Irq+0x24>
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d050      	beq.n	8009844 <SX1276OnDio2Irq+0xc4>
                break;
 80097a2:	e071      	b.n	8009888 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80097a4:	4b52      	ldr	r3, [pc, #328]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 80097a6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d169      	bne.n	8009882 <SX1276OnDio2Irq+0x102>
 80097ae:	4b50      	ldr	r3, [pc, #320]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 80097b0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d164      	bne.n	8009882 <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 80097b8:	484e      	ldr	r0, [pc, #312]	; (80098f4 <SX1276OnDio2Irq+0x174>)
 80097ba:	f7fd fe6b 	bl	8007494 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80097be:	4b4c      	ldr	r3, [pc, #304]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80097c6:	2011      	movs	r0, #17
 80097c8:	f7ff fba6 	bl	8008f18 <SX1276Read>
 80097cc:	4603      	mov	r3, r0
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	425b      	negs	r3, r3
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	b25a      	sxtb	r2, r3
 80097d8:	4b45      	ldr	r3, [pc, #276]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 80097da:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80097de:	201b      	movs	r0, #27
 80097e0:	f7ff fb9a 	bl	8008f18 <SX1276Read>
 80097e4:	4603      	mov	r3, r0
 80097e6:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80097e8:	201c      	movs	r0, #28
 80097ea:	f7ff fb95 	bl	8008f18 <SX1276Read>
 80097ee:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80097f0:	4323      	orrs	r3, r4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f6 fe8e 	bl	8000514 <__aeabi_i2d>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4610      	mov	r0, r2
 80097fe:	4619      	mov	r1, r3
 8009800:	f7f7 f98c 	bl	8000b1c <__aeabi_d2iz>
 8009804:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 8009806:	4618      	mov	r0, r3
 8009808:	f7f6 fe84 	bl	8000514 <__aeabi_i2d>
 800980c:	a336      	add	r3, pc, #216	; (adr r3, 80098e8 <SX1276OnDio2Irq+0x168>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fee9 	bl	80005e8 <__aeabi_dmul>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800981a:	4610      	mov	r0, r2
 800981c:	4619      	mov	r1, r3
 800981e:	f7f7 f97d 	bl	8000b1c <__aeabi_d2iz>
 8009822:	4603      	mov	r3, r0
 8009824:	4a32      	ldr	r2, [pc, #200]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 8009826:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800982a:	200c      	movs	r0, #12
 800982c:	f7ff fb74 	bl	8008f18 <SX1276Read>
 8009830:	4603      	mov	r3, r0
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	b2da      	uxtb	r2, r3
 800983c:	4b2c      	ldr	r3, [pc, #176]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 800983e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
                break;
 8009842:	e01e      	b.n	8009882 <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009844:	4b2a      	ldr	r3, [pc, #168]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 8009846:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01b      	beq.n	8009886 <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800984e:	2102      	movs	r1, #2
 8009850:	2012      	movs	r0, #18
 8009852:	f7ff fb4f 	bl	8008ef4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8009856:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d013      	beq.n	8009886 <SX1276OnDio2Irq+0x106>
 800985e:	4b26      	ldr	r3, [pc, #152]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00e      	beq.n	8009886 <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8009868:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	695c      	ldr	r4, [r3, #20]
 800986e:	201c      	movs	r0, #28
 8009870:	f7ff fb52 	bl	8008f18 <SX1276Read>
 8009874:	4603      	mov	r3, r0
 8009876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4618      	mov	r0, r3
 800987e:	47a0      	blx	r4
                break;
 8009880:	e001      	b.n	8009886 <SX1276OnDio2Irq+0x106>
                break;
 8009882:	bf00      	nop
 8009884:	e02d      	b.n	80098e2 <SX1276OnDio2Irq+0x162>
                break;
 8009886:	bf00      	nop
            break;
 8009888:	e02b      	b.n	80098e2 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800988a:	4b19      	ldr	r3, [pc, #100]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 800988c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8009890:	2b00      	cmp	r3, #0
 8009892:	d020      	beq.n	80098d6 <SX1276OnDio2Irq+0x156>
 8009894:	2b01      	cmp	r3, #1
 8009896:	d120      	bne.n	80098da <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009898:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <SX1276OnDio2Irq+0x170>)
 800989a:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d01d      	beq.n	80098de <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80098a2:	2102      	movs	r1, #2
 80098a4:	2012      	movs	r0, #18
 80098a6:	f7ff fb25 	bl	8008ef4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80098aa:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d015      	beq.n	80098de <SX1276OnDio2Irq+0x15e>
 80098b2:	4b11      	ldr	r3, [pc, #68]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d010      	beq.n	80098de <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80098bc:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <SX1276OnDio2Irq+0x178>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695c      	ldr	r4, [r3, #20]
 80098c2:	201c      	movs	r0, #28
 80098c4:	f7ff fb28 	bl	8008f18 <SX1276Read>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	47a0      	blx	r4
                break;
 80098d4:	e003      	b.n	80098de <SX1276OnDio2Irq+0x15e>
                break;
 80098d6:	bf00      	nop
 80098d8:	e002      	b.n	80098e0 <SX1276OnDio2Irq+0x160>
                break;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <SX1276OnDio2Irq+0x160>
                break;
 80098de:	bf00      	nop
            break;
 80098e0:	bf00      	nop
    }
}
 80098e2:	bf00      	nop
 80098e4:	bd98      	pop	{r3, r4, r7, pc}
 80098e6:	bf00      	nop
 80098e8:	00000000 	.word	0x00000000
 80098ec:	404e8480 	.word	0x404e8480
 80098f0:	20000ae4 	.word	0x20000ae4
 80098f4:	20000c50 	.word	0x20000c50
 80098f8:	200009e0 	.word	0x200009e0

080098fc <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8009900:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <SX1276OnDio3Irq+0x7c>)
 8009902:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8009906:	2b00      	cmp	r3, #0
 8009908:	d030      	beq.n	800996c <SX1276OnDio3Irq+0x70>
 800990a:	2b01      	cmp	r3, #1
 800990c:	d000      	beq.n	8009910 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800990e:	e030      	b.n	8009972 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8009910:	2012      	movs	r0, #18
 8009912:	f7ff fb01 	bl	8008f18 <SX1276Read>
 8009916:	4603      	mov	r3, r0
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b01      	cmp	r3, #1
 800991e:	d112      	bne.n	8009946 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8009920:	2105      	movs	r1, #5
 8009922:	2012      	movs	r0, #18
 8009924:	f7ff fae6 	bl	8008ef4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009928:	4b14      	ldr	r3, [pc, #80]	; (800997c <SX1276OnDio3Irq+0x80>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01f      	beq.n	8009970 <SX1276OnDio3Irq+0x74>
 8009930:	4b12      	ldr	r3, [pc, #72]	; (800997c <SX1276OnDio3Irq+0x80>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d01a      	beq.n	8009970 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800993a:	4b10      	ldr	r3, [pc, #64]	; (800997c <SX1276OnDio3Irq+0x80>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2001      	movs	r0, #1
 8009942:	4798      	blx	r3
        break;
 8009944:	e014      	b.n	8009970 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8009946:	2104      	movs	r1, #4
 8009948:	2012      	movs	r0, #18
 800994a:	f7ff fad3 	bl	8008ef4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <SX1276OnDio3Irq+0x80>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00c      	beq.n	8009970 <SX1276OnDio3Irq+0x74>
 8009956:	4b09      	ldr	r3, [pc, #36]	; (800997c <SX1276OnDio3Irq+0x80>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <SX1276OnDio3Irq+0x80>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	2000      	movs	r0, #0
 8009968:	4798      	blx	r3
        break;
 800996a:	e001      	b.n	8009970 <SX1276OnDio3Irq+0x74>
        break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <SX1276OnDio3Irq+0x76>
        break;
 8009970:	bf00      	nop
    }
}
 8009972:	bf00      	nop
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000ae4 	.word	0x20000ae4
 800997c:	200009e0 	.word	0x200009e0

08009980 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <SX1276OnDio4Irq+0x38>)
 8009986:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <SX1276OnDio4Irq+0x14>
 800998e:	2b01      	cmp	r3, #1
 8009990:	d00a      	beq.n	80099a8 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8009992:	e00c      	b.n	80099ae <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8009994:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <SX1276OnDio4Irq+0x38>)
 8009996:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800999e:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <SX1276OnDio4Irq+0x38>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        break;
 80099a6:	e001      	b.n	80099ac <SX1276OnDio4Irq+0x2c>
        break;
 80099a8:	bf00      	nop
 80099aa:	e000      	b.n	80099ae <SX1276OnDio4Irq+0x2e>
        break;
 80099ac:	bf00      	nop
    }
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000ae4 	.word	0x20000ae4

080099bc <__errno>:
 80099bc:	4b01      	ldr	r3, [pc, #4]	; (80099c4 <__errno+0x8>)
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20000028 	.word	0x20000028

080099c8 <__libc_init_array>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	4d0d      	ldr	r5, [pc, #52]	; (8009a00 <__libc_init_array+0x38>)
 80099cc:	4c0d      	ldr	r4, [pc, #52]	; (8009a04 <__libc_init_array+0x3c>)
 80099ce:	1b64      	subs	r4, r4, r5
 80099d0:	10a4      	asrs	r4, r4, #2
 80099d2:	2600      	movs	r6, #0
 80099d4:	42a6      	cmp	r6, r4
 80099d6:	d109      	bne.n	80099ec <__libc_init_array+0x24>
 80099d8:	4d0b      	ldr	r5, [pc, #44]	; (8009a08 <__libc_init_array+0x40>)
 80099da:	4c0c      	ldr	r4, [pc, #48]	; (8009a0c <__libc_init_array+0x44>)
 80099dc:	f001 f906 	bl	800abec <_init>
 80099e0:	1b64      	subs	r4, r4, r5
 80099e2:	10a4      	asrs	r4, r4, #2
 80099e4:	2600      	movs	r6, #0
 80099e6:	42a6      	cmp	r6, r4
 80099e8:	d105      	bne.n	80099f6 <__libc_init_array+0x2e>
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f0:	4798      	blx	r3
 80099f2:	3601      	adds	r6, #1
 80099f4:	e7ee      	b.n	80099d4 <__libc_init_array+0xc>
 80099f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fa:	4798      	blx	r3
 80099fc:	3601      	adds	r6, #1
 80099fe:	e7f2      	b.n	80099e6 <__libc_init_array+0x1e>
 8009a00:	0800ae4c 	.word	0x0800ae4c
 8009a04:	0800ae4c 	.word	0x0800ae4c
 8009a08:	0800ae4c 	.word	0x0800ae4c
 8009a0c:	0800ae50 	.word	0x0800ae50

08009a10 <memcpy>:
 8009a10:	440a      	add	r2, r1
 8009a12:	4291      	cmp	r1, r2
 8009a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a18:	d100      	bne.n	8009a1c <memcpy+0xc>
 8009a1a:	4770      	bx	lr
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a26:	4291      	cmp	r1, r2
 8009a28:	d1f9      	bne.n	8009a1e <memcpy+0xe>
 8009a2a:	bd10      	pop	{r4, pc}

08009a2c <memset>:
 8009a2c:	4402      	add	r2, r0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d100      	bne.n	8009a36 <memset+0xa>
 8009a34:	4770      	bx	lr
 8009a36:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3a:	e7f9      	b.n	8009a30 <memset+0x4>

08009a3c <iprintf>:
 8009a3c:	b40f      	push	{r0, r1, r2, r3}
 8009a3e:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <iprintf+0x2c>)
 8009a40:	b513      	push	{r0, r1, r4, lr}
 8009a42:	681c      	ldr	r4, [r3, #0]
 8009a44:	b124      	cbz	r4, 8009a50 <iprintf+0x14>
 8009a46:	69a3      	ldr	r3, [r4, #24]
 8009a48:	b913      	cbnz	r3, 8009a50 <iprintf+0x14>
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f9e8 	bl	8009e20 <__sinit>
 8009a50:	ab05      	add	r3, sp, #20
 8009a52:	9a04      	ldr	r2, [sp, #16]
 8009a54:	68a1      	ldr	r1, [r4, #8]
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fbf1 	bl	800a240 <_vfiprintf_r>
 8009a5e:	b002      	add	sp, #8
 8009a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a64:	b004      	add	sp, #16
 8009a66:	4770      	bx	lr
 8009a68:	20000028 	.word	0x20000028

08009a6c <__swbuf_r>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	460e      	mov	r6, r1
 8009a70:	4614      	mov	r4, r2
 8009a72:	4605      	mov	r5, r0
 8009a74:	b118      	cbz	r0, 8009a7e <__swbuf_r+0x12>
 8009a76:	6983      	ldr	r3, [r0, #24]
 8009a78:	b90b      	cbnz	r3, 8009a7e <__swbuf_r+0x12>
 8009a7a:	f000 f9d1 	bl	8009e20 <__sinit>
 8009a7e:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <__swbuf_r+0x98>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	d12b      	bne.n	8009adc <__swbuf_r+0x70>
 8009a84:	686c      	ldr	r4, [r5, #4]
 8009a86:	69a3      	ldr	r3, [r4, #24]
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	071a      	lsls	r2, r3, #28
 8009a8e:	d52f      	bpl.n	8009af0 <__swbuf_r+0x84>
 8009a90:	6923      	ldr	r3, [r4, #16]
 8009a92:	b36b      	cbz	r3, 8009af0 <__swbuf_r+0x84>
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1ac0      	subs	r0, r0, r3
 8009a9a:	6963      	ldr	r3, [r4, #20]
 8009a9c:	b2f6      	uxtb	r6, r6
 8009a9e:	4283      	cmp	r3, r0
 8009aa0:	4637      	mov	r7, r6
 8009aa2:	dc04      	bgt.n	8009aae <__swbuf_r+0x42>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f926 	bl	8009cf8 <_fflush_r>
 8009aac:	bb30      	cbnz	r0, 8009afc <__swbuf_r+0x90>
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	60a3      	str	r3, [r4, #8]
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	6022      	str	r2, [r4, #0]
 8009aba:	701e      	strb	r6, [r3, #0]
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	3001      	adds	r0, #1
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	d004      	beq.n	8009ace <__swbuf_r+0x62>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	07db      	lsls	r3, r3, #31
 8009ac8:	d506      	bpl.n	8009ad8 <__swbuf_r+0x6c>
 8009aca:	2e0a      	cmp	r6, #10
 8009acc:	d104      	bne.n	8009ad8 <__swbuf_r+0x6c>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f000 f911 	bl	8009cf8 <_fflush_r>
 8009ad6:	b988      	cbnz	r0, 8009afc <__swbuf_r+0x90>
 8009ad8:	4638      	mov	r0, r7
 8009ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <__swbuf_r+0x9c>)
 8009ade:	429c      	cmp	r4, r3
 8009ae0:	d101      	bne.n	8009ae6 <__swbuf_r+0x7a>
 8009ae2:	68ac      	ldr	r4, [r5, #8]
 8009ae4:	e7cf      	b.n	8009a86 <__swbuf_r+0x1a>
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <__swbuf_r+0xa0>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	bf08      	it	eq
 8009aec:	68ec      	ldreq	r4, [r5, #12]
 8009aee:	e7ca      	b.n	8009a86 <__swbuf_r+0x1a>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f80c 	bl	8009b10 <__swsetup_r>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0cb      	beq.n	8009a94 <__swbuf_r+0x28>
 8009afc:	f04f 37ff 	mov.w	r7, #4294967295
 8009b00:	e7ea      	b.n	8009ad8 <__swbuf_r+0x6c>
 8009b02:	bf00      	nop
 8009b04:	0800add0 	.word	0x0800add0
 8009b08:	0800adf0 	.word	0x0800adf0
 8009b0c:	0800adb0 	.word	0x0800adb0

08009b10 <__swsetup_r>:
 8009b10:	4b32      	ldr	r3, [pc, #200]	; (8009bdc <__swsetup_r+0xcc>)
 8009b12:	b570      	push	{r4, r5, r6, lr}
 8009b14:	681d      	ldr	r5, [r3, #0]
 8009b16:	4606      	mov	r6, r0
 8009b18:	460c      	mov	r4, r1
 8009b1a:	b125      	cbz	r5, 8009b26 <__swsetup_r+0x16>
 8009b1c:	69ab      	ldr	r3, [r5, #24]
 8009b1e:	b913      	cbnz	r3, 8009b26 <__swsetup_r+0x16>
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f97d 	bl	8009e20 <__sinit>
 8009b26:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <__swsetup_r+0xd0>)
 8009b28:	429c      	cmp	r4, r3
 8009b2a:	d10f      	bne.n	8009b4c <__swsetup_r+0x3c>
 8009b2c:	686c      	ldr	r4, [r5, #4]
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b34:	0719      	lsls	r1, r3, #28
 8009b36:	d42c      	bmi.n	8009b92 <__swsetup_r+0x82>
 8009b38:	06dd      	lsls	r5, r3, #27
 8009b3a:	d411      	bmi.n	8009b60 <__swsetup_r+0x50>
 8009b3c:	2309      	movs	r3, #9
 8009b3e:	6033      	str	r3, [r6, #0]
 8009b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b44:	81a3      	strh	r3, [r4, #12]
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	e03e      	b.n	8009bca <__swsetup_r+0xba>
 8009b4c:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <__swsetup_r+0xd4>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d101      	bne.n	8009b56 <__swsetup_r+0x46>
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	e7eb      	b.n	8009b2e <__swsetup_r+0x1e>
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <__swsetup_r+0xd8>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	bf08      	it	eq
 8009b5c:	68ec      	ldreq	r4, [r5, #12]
 8009b5e:	e7e6      	b.n	8009b2e <__swsetup_r+0x1e>
 8009b60:	0758      	lsls	r0, r3, #29
 8009b62:	d512      	bpl.n	8009b8a <__swsetup_r+0x7a>
 8009b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b66:	b141      	cbz	r1, 8009b7a <__swsetup_r+0x6a>
 8009b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b6c:	4299      	cmp	r1, r3
 8009b6e:	d002      	beq.n	8009b76 <__swsetup_r+0x66>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f000 fa5b 	bl	800a02c <_free_r>
 8009b76:	2300      	movs	r3, #0
 8009b78:	6363      	str	r3, [r4, #52]	; 0x34
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	2300      	movs	r3, #0
 8009b84:	6063      	str	r3, [r4, #4]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f043 0308 	orr.w	r3, r3, #8
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	b94b      	cbnz	r3, 8009baa <__swsetup_r+0x9a>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ba0:	d003      	beq.n	8009baa <__swsetup_r+0x9a>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 fa01 	bl	8009fac <__smakebuf_r>
 8009baa:	89a0      	ldrh	r0, [r4, #12]
 8009bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb0:	f010 0301 	ands.w	r3, r0, #1
 8009bb4:	d00a      	beq.n	8009bcc <__swsetup_r+0xbc>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60a3      	str	r3, [r4, #8]
 8009bba:	6963      	ldr	r3, [r4, #20]
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	61a3      	str	r3, [r4, #24]
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	b943      	cbnz	r3, 8009bd6 <__swsetup_r+0xc6>
 8009bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bc8:	d1ba      	bne.n	8009b40 <__swsetup_r+0x30>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	0781      	lsls	r1, r0, #30
 8009bce:	bf58      	it	pl
 8009bd0:	6963      	ldrpl	r3, [r4, #20]
 8009bd2:	60a3      	str	r3, [r4, #8]
 8009bd4:	e7f4      	b.n	8009bc0 <__swsetup_r+0xb0>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e7f7      	b.n	8009bca <__swsetup_r+0xba>
 8009bda:	bf00      	nop
 8009bdc:	20000028 	.word	0x20000028
 8009be0:	0800add0 	.word	0x0800add0
 8009be4:	0800adf0 	.word	0x0800adf0
 8009be8:	0800adb0 	.word	0x0800adb0

08009bec <__sflush_r>:
 8009bec:	898a      	ldrh	r2, [r1, #12]
 8009bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	0710      	lsls	r0, r2, #28
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	d458      	bmi.n	8009cac <__sflush_r+0xc0>
 8009bfa:	684b      	ldr	r3, [r1, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dc05      	bgt.n	8009c0c <__sflush_r+0x20>
 8009c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dc02      	bgt.n	8009c0c <__sflush_r+0x20>
 8009c06:	2000      	movs	r0, #0
 8009c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d0f9      	beq.n	8009c06 <__sflush_r+0x1a>
 8009c12:	2300      	movs	r3, #0
 8009c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c18:	682f      	ldr	r7, [r5, #0]
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	d032      	beq.n	8009c84 <__sflush_r+0x98>
 8009c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	075a      	lsls	r2, r3, #29
 8009c24:	d505      	bpl.n	8009c32 <__sflush_r+0x46>
 8009c26:	6863      	ldr	r3, [r4, #4]
 8009c28:	1ac0      	subs	r0, r0, r3
 8009c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c2c:	b10b      	cbz	r3, 8009c32 <__sflush_r+0x46>
 8009c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c30:	1ac0      	subs	r0, r0, r3
 8009c32:	2300      	movs	r3, #0
 8009c34:	4602      	mov	r2, r0
 8009c36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c38:	6a21      	ldr	r1, [r4, #32]
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b0      	blx	r6
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	d106      	bne.n	8009c52 <__sflush_r+0x66>
 8009c44:	6829      	ldr	r1, [r5, #0]
 8009c46:	291d      	cmp	r1, #29
 8009c48:	d82c      	bhi.n	8009ca4 <__sflush_r+0xb8>
 8009c4a:	4a2a      	ldr	r2, [pc, #168]	; (8009cf4 <__sflush_r+0x108>)
 8009c4c:	40ca      	lsrs	r2, r1
 8009c4e:	07d6      	lsls	r6, r2, #31
 8009c50:	d528      	bpl.n	8009ca4 <__sflush_r+0xb8>
 8009c52:	2200      	movs	r2, #0
 8009c54:	6062      	str	r2, [r4, #4]
 8009c56:	04d9      	lsls	r1, r3, #19
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	d504      	bpl.n	8009c68 <__sflush_r+0x7c>
 8009c5e:	1c42      	adds	r2, r0, #1
 8009c60:	d101      	bne.n	8009c66 <__sflush_r+0x7a>
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	b903      	cbnz	r3, 8009c68 <__sflush_r+0x7c>
 8009c66:	6560      	str	r0, [r4, #84]	; 0x54
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	602f      	str	r7, [r5, #0]
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d0ca      	beq.n	8009c06 <__sflush_r+0x1a>
 8009c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c74:	4299      	cmp	r1, r3
 8009c76:	d002      	beq.n	8009c7e <__sflush_r+0x92>
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f000 f9d7 	bl	800a02c <_free_r>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	6360      	str	r0, [r4, #52]	; 0x34
 8009c82:	e7c1      	b.n	8009c08 <__sflush_r+0x1c>
 8009c84:	6a21      	ldr	r1, [r4, #32]
 8009c86:	2301      	movs	r3, #1
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b0      	blx	r6
 8009c8c:	1c41      	adds	r1, r0, #1
 8009c8e:	d1c7      	bne.n	8009c20 <__sflush_r+0x34>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0c4      	beq.n	8009c20 <__sflush_r+0x34>
 8009c96:	2b1d      	cmp	r3, #29
 8009c98:	d001      	beq.n	8009c9e <__sflush_r+0xb2>
 8009c9a:	2b16      	cmp	r3, #22
 8009c9c:	d101      	bne.n	8009ca2 <__sflush_r+0xb6>
 8009c9e:	602f      	str	r7, [r5, #0]
 8009ca0:	e7b1      	b.n	8009c06 <__sflush_r+0x1a>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	e7ad      	b.n	8009c08 <__sflush_r+0x1c>
 8009cac:	690f      	ldr	r7, [r1, #16]
 8009cae:	2f00      	cmp	r7, #0
 8009cb0:	d0a9      	beq.n	8009c06 <__sflush_r+0x1a>
 8009cb2:	0793      	lsls	r3, r2, #30
 8009cb4:	680e      	ldr	r6, [r1, #0]
 8009cb6:	bf08      	it	eq
 8009cb8:	694b      	ldreq	r3, [r1, #20]
 8009cba:	600f      	str	r7, [r1, #0]
 8009cbc:	bf18      	it	ne
 8009cbe:	2300      	movne	r3, #0
 8009cc0:	eba6 0807 	sub.w	r8, r6, r7
 8009cc4:	608b      	str	r3, [r1, #8]
 8009cc6:	f1b8 0f00 	cmp.w	r8, #0
 8009cca:	dd9c      	ble.n	8009c06 <__sflush_r+0x1a>
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cd0:	4643      	mov	r3, r8
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b0      	blx	r6
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	dc06      	bgt.n	8009cea <__sflush_r+0xfe>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	e78e      	b.n	8009c08 <__sflush_r+0x1c>
 8009cea:	4407      	add	r7, r0
 8009cec:	eba8 0800 	sub.w	r8, r8, r0
 8009cf0:	e7e9      	b.n	8009cc6 <__sflush_r+0xda>
 8009cf2:	bf00      	nop
 8009cf4:	20400001 	.word	0x20400001

08009cf8 <_fflush_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	690b      	ldr	r3, [r1, #16]
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	b913      	cbnz	r3, 8009d08 <_fflush_r+0x10>
 8009d02:	2500      	movs	r5, #0
 8009d04:	4628      	mov	r0, r5
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	b118      	cbz	r0, 8009d12 <_fflush_r+0x1a>
 8009d0a:	6983      	ldr	r3, [r0, #24]
 8009d0c:	b90b      	cbnz	r3, 8009d12 <_fflush_r+0x1a>
 8009d0e:	f000 f887 	bl	8009e20 <__sinit>
 8009d12:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <_fflush_r+0x6c>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	d11b      	bne.n	8009d50 <_fflush_r+0x58>
 8009d18:	686c      	ldr	r4, [r5, #4]
 8009d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0ef      	beq.n	8009d02 <_fflush_r+0xa>
 8009d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d24:	07d0      	lsls	r0, r2, #31
 8009d26:	d404      	bmi.n	8009d32 <_fflush_r+0x3a>
 8009d28:	0599      	lsls	r1, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_fflush_r+0x3a>
 8009d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2e:	f000 f915 	bl	8009f5c <__retarget_lock_acquire_recursive>
 8009d32:	4628      	mov	r0, r5
 8009d34:	4621      	mov	r1, r4
 8009d36:	f7ff ff59 	bl	8009bec <__sflush_r>
 8009d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d3c:	07da      	lsls	r2, r3, #31
 8009d3e:	4605      	mov	r5, r0
 8009d40:	d4e0      	bmi.n	8009d04 <_fflush_r+0xc>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	059b      	lsls	r3, r3, #22
 8009d46:	d4dd      	bmi.n	8009d04 <_fflush_r+0xc>
 8009d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d4a:	f000 f908 	bl	8009f5e <__retarget_lock_release_recursive>
 8009d4e:	e7d9      	b.n	8009d04 <_fflush_r+0xc>
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <_fflush_r+0x70>)
 8009d52:	429c      	cmp	r4, r3
 8009d54:	d101      	bne.n	8009d5a <_fflush_r+0x62>
 8009d56:	68ac      	ldr	r4, [r5, #8]
 8009d58:	e7df      	b.n	8009d1a <_fflush_r+0x22>
 8009d5a:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <_fflush_r+0x74>)
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	bf08      	it	eq
 8009d60:	68ec      	ldreq	r4, [r5, #12]
 8009d62:	e7da      	b.n	8009d1a <_fflush_r+0x22>
 8009d64:	0800add0 	.word	0x0800add0
 8009d68:	0800adf0 	.word	0x0800adf0
 8009d6c:	0800adb0 	.word	0x0800adb0

08009d70 <std>:
 8009d70:	2300      	movs	r3, #0
 8009d72:	b510      	push	{r4, lr}
 8009d74:	4604      	mov	r4, r0
 8009d76:	e9c0 3300 	strd	r3, r3, [r0]
 8009d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d7e:	6083      	str	r3, [r0, #8]
 8009d80:	8181      	strh	r1, [r0, #12]
 8009d82:	6643      	str	r3, [r0, #100]	; 0x64
 8009d84:	81c2      	strh	r2, [r0, #14]
 8009d86:	6183      	str	r3, [r0, #24]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	305c      	adds	r0, #92	; 0x5c
 8009d8e:	f7ff fe4d 	bl	8009a2c <memset>
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <std+0x38>)
 8009d94:	6263      	str	r3, [r4, #36]	; 0x24
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <std+0x3c>)
 8009d98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d9a:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <std+0x40>)
 8009d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <std+0x44>)
 8009da0:	6224      	str	r4, [r4, #32]
 8009da2:	6323      	str	r3, [r4, #48]	; 0x30
 8009da4:	bd10      	pop	{r4, pc}
 8009da6:	bf00      	nop
 8009da8:	0800a7e9 	.word	0x0800a7e9
 8009dac:	0800a80b 	.word	0x0800a80b
 8009db0:	0800a843 	.word	0x0800a843
 8009db4:	0800a867 	.word	0x0800a867

08009db8 <_cleanup_r>:
 8009db8:	4901      	ldr	r1, [pc, #4]	; (8009dc0 <_cleanup_r+0x8>)
 8009dba:	f000 b8af 	b.w	8009f1c <_fwalk_reent>
 8009dbe:	bf00      	nop
 8009dc0:	08009cf9 	.word	0x08009cf9

08009dc4 <__sfmoreglue>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	2268      	movs	r2, #104	; 0x68
 8009dc8:	1e4d      	subs	r5, r1, #1
 8009dca:	4355      	muls	r5, r2
 8009dcc:	460e      	mov	r6, r1
 8009dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dd2:	f000 f997 	bl	800a104 <_malloc_r>
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	b140      	cbz	r0, 8009dec <__sfmoreglue+0x28>
 8009dda:	2100      	movs	r1, #0
 8009ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8009de0:	300c      	adds	r0, #12
 8009de2:	60a0      	str	r0, [r4, #8]
 8009de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de8:	f7ff fe20 	bl	8009a2c <memset>
 8009dec:	4620      	mov	r0, r4
 8009dee:	bd70      	pop	{r4, r5, r6, pc}

08009df0 <__sfp_lock_acquire>:
 8009df0:	4801      	ldr	r0, [pc, #4]	; (8009df8 <__sfp_lock_acquire+0x8>)
 8009df2:	f000 b8b3 	b.w	8009f5c <__retarget_lock_acquire_recursive>
 8009df6:	bf00      	nop
 8009df8:	20000c65 	.word	0x20000c65

08009dfc <__sfp_lock_release>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__sfp_lock_release+0x8>)
 8009dfe:	f000 b8ae 	b.w	8009f5e <__retarget_lock_release_recursive>
 8009e02:	bf00      	nop
 8009e04:	20000c65 	.word	0x20000c65

08009e08 <__sinit_lock_acquire>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__sinit_lock_acquire+0x8>)
 8009e0a:	f000 b8a7 	b.w	8009f5c <__retarget_lock_acquire_recursive>
 8009e0e:	bf00      	nop
 8009e10:	20000c66 	.word	0x20000c66

08009e14 <__sinit_lock_release>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__sinit_lock_release+0x8>)
 8009e16:	f000 b8a2 	b.w	8009f5e <__retarget_lock_release_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20000c66 	.word	0x20000c66

08009e20 <__sinit>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	4604      	mov	r4, r0
 8009e24:	f7ff fff0 	bl	8009e08 <__sinit_lock_acquire>
 8009e28:	69a3      	ldr	r3, [r4, #24]
 8009e2a:	b11b      	cbz	r3, 8009e34 <__sinit+0x14>
 8009e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e30:	f7ff bff0 	b.w	8009e14 <__sinit_lock_release>
 8009e34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e38:	6523      	str	r3, [r4, #80]	; 0x50
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <__sinit+0x68>)
 8009e3c:	4a13      	ldr	r2, [pc, #76]	; (8009e8c <__sinit+0x6c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	bf04      	itt	eq
 8009e46:	2301      	moveq	r3, #1
 8009e48:	61a3      	streq	r3, [r4, #24]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 f820 	bl	8009e90 <__sfp>
 8009e50:	6060      	str	r0, [r4, #4]
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 f81c 	bl	8009e90 <__sfp>
 8009e58:	60a0      	str	r0, [r4, #8]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f818 	bl	8009e90 <__sfp>
 8009e60:	2200      	movs	r2, #0
 8009e62:	60e0      	str	r0, [r4, #12]
 8009e64:	2104      	movs	r1, #4
 8009e66:	6860      	ldr	r0, [r4, #4]
 8009e68:	f7ff ff82 	bl	8009d70 <std>
 8009e6c:	68a0      	ldr	r0, [r4, #8]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	2109      	movs	r1, #9
 8009e72:	f7ff ff7d 	bl	8009d70 <std>
 8009e76:	68e0      	ldr	r0, [r4, #12]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	2112      	movs	r1, #18
 8009e7c:	f7ff ff78 	bl	8009d70 <std>
 8009e80:	2301      	movs	r3, #1
 8009e82:	61a3      	str	r3, [r4, #24]
 8009e84:	e7d2      	b.n	8009e2c <__sinit+0xc>
 8009e86:	bf00      	nop
 8009e88:	0800adac 	.word	0x0800adac
 8009e8c:	08009db9 	.word	0x08009db9

08009e90 <__sfp>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	4607      	mov	r7, r0
 8009e94:	f7ff ffac 	bl	8009df0 <__sfp_lock_acquire>
 8009e98:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <__sfp+0x84>)
 8009e9a:	681e      	ldr	r6, [r3, #0]
 8009e9c:	69b3      	ldr	r3, [r6, #24]
 8009e9e:	b913      	cbnz	r3, 8009ea6 <__sfp+0x16>
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ffbd 	bl	8009e20 <__sinit>
 8009ea6:	3648      	adds	r6, #72	; 0x48
 8009ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	d503      	bpl.n	8009eb8 <__sfp+0x28>
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	b30b      	cbz	r3, 8009ef8 <__sfp+0x68>
 8009eb4:	6836      	ldr	r6, [r6, #0]
 8009eb6:	e7f7      	b.n	8009ea8 <__sfp+0x18>
 8009eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ebc:	b9d5      	cbnz	r5, 8009ef4 <__sfp+0x64>
 8009ebe:	4b16      	ldr	r3, [pc, #88]	; (8009f18 <__sfp+0x88>)
 8009ec0:	60e3      	str	r3, [r4, #12]
 8009ec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ec6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ec8:	f000 f847 	bl	8009f5a <__retarget_lock_init_recursive>
 8009ecc:	f7ff ff96 	bl	8009dfc <__sfp_lock_release>
 8009ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ed8:	6025      	str	r5, [r4, #0]
 8009eda:	61a5      	str	r5, [r4, #24]
 8009edc:	2208      	movs	r2, #8
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ee4:	f7ff fda2 	bl	8009a2c <memset>
 8009ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef4:	3468      	adds	r4, #104	; 0x68
 8009ef6:	e7d9      	b.n	8009eac <__sfp+0x1c>
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7ff ff62 	bl	8009dc4 <__sfmoreglue>
 8009f00:	4604      	mov	r4, r0
 8009f02:	6030      	str	r0, [r6, #0]
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1d5      	bne.n	8009eb4 <__sfp+0x24>
 8009f08:	f7ff ff78 	bl	8009dfc <__sfp_lock_release>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	603b      	str	r3, [r7, #0]
 8009f10:	e7ee      	b.n	8009ef0 <__sfp+0x60>
 8009f12:	bf00      	nop
 8009f14:	0800adac 	.word	0x0800adac
 8009f18:	ffff0001 	.word	0xffff0001

08009f1c <_fwalk_reent>:
 8009f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f20:	4606      	mov	r6, r0
 8009f22:	4688      	mov	r8, r1
 8009f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f28:	2700      	movs	r7, #0
 8009f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f32:	d505      	bpl.n	8009f40 <_fwalk_reent+0x24>
 8009f34:	6824      	ldr	r4, [r4, #0]
 8009f36:	2c00      	cmp	r4, #0
 8009f38:	d1f7      	bne.n	8009f2a <_fwalk_reent+0xe>
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f40:	89ab      	ldrh	r3, [r5, #12]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d907      	bls.n	8009f56 <_fwalk_reent+0x3a>
 8009f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	d003      	beq.n	8009f56 <_fwalk_reent+0x3a>
 8009f4e:	4629      	mov	r1, r5
 8009f50:	4630      	mov	r0, r6
 8009f52:	47c0      	blx	r8
 8009f54:	4307      	orrs	r7, r0
 8009f56:	3568      	adds	r5, #104	; 0x68
 8009f58:	e7e9      	b.n	8009f2e <_fwalk_reent+0x12>

08009f5a <__retarget_lock_init_recursive>:
 8009f5a:	4770      	bx	lr

08009f5c <__retarget_lock_acquire_recursive>:
 8009f5c:	4770      	bx	lr

08009f5e <__retarget_lock_release_recursive>:
 8009f5e:	4770      	bx	lr

08009f60 <__swhatbuf_r>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	460e      	mov	r6, r1
 8009f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	b096      	sub	sp, #88	; 0x58
 8009f6c:	4614      	mov	r4, r2
 8009f6e:	461d      	mov	r5, r3
 8009f70:	da08      	bge.n	8009f84 <__swhatbuf_r+0x24>
 8009f72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	602a      	str	r2, [r5, #0]
 8009f7a:	061a      	lsls	r2, r3, #24
 8009f7c:	d410      	bmi.n	8009fa0 <__swhatbuf_r+0x40>
 8009f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f82:	e00e      	b.n	8009fa2 <__swhatbuf_r+0x42>
 8009f84:	466a      	mov	r2, sp
 8009f86:	f000 fc95 	bl	800a8b4 <_fstat_r>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	dbf1      	blt.n	8009f72 <__swhatbuf_r+0x12>
 8009f8e:	9a01      	ldr	r2, [sp, #4]
 8009f90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f98:	425a      	negs	r2, r3
 8009f9a:	415a      	adcs	r2, r3
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	e7ee      	b.n	8009f7e <__swhatbuf_r+0x1e>
 8009fa0:	2340      	movs	r3, #64	; 0x40
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	b016      	add	sp, #88	; 0x58
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fac <__smakebuf_r>:
 8009fac:	898b      	ldrh	r3, [r1, #12]
 8009fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fb0:	079d      	lsls	r5, r3, #30
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	d507      	bpl.n	8009fc8 <__smakebuf_r+0x1c>
 8009fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	6163      	str	r3, [r4, #20]
 8009fc4:	b002      	add	sp, #8
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	ab01      	add	r3, sp, #4
 8009fca:	466a      	mov	r2, sp
 8009fcc:	f7ff ffc8 	bl	8009f60 <__swhatbuf_r>
 8009fd0:	9900      	ldr	r1, [sp, #0]
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f000 f895 	bl	800a104 <_malloc_r>
 8009fda:	b948      	cbnz	r0, 8009ff0 <__smakebuf_r+0x44>
 8009fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe0:	059a      	lsls	r2, r3, #22
 8009fe2:	d4ef      	bmi.n	8009fc4 <__smakebuf_r+0x18>
 8009fe4:	f023 0303 	bic.w	r3, r3, #3
 8009fe8:	f043 0302 	orr.w	r3, r3, #2
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e7e3      	b.n	8009fb8 <__smakebuf_r+0xc>
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <__smakebuf_r+0x7c>)
 8009ff2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	6020      	str	r0, [r4, #0]
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	9b01      	ldr	r3, [sp, #4]
 800a004:	6120      	str	r0, [r4, #16]
 800a006:	b15b      	cbz	r3, 800a020 <__smakebuf_r+0x74>
 800a008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 fc63 	bl	800a8d8 <_isatty_r>
 800a012:	b128      	cbz	r0, 800a020 <__smakebuf_r+0x74>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	89a0      	ldrh	r0, [r4, #12]
 800a022:	4305      	orrs	r5, r0
 800a024:	81a5      	strh	r5, [r4, #12]
 800a026:	e7cd      	b.n	8009fc4 <__smakebuf_r+0x18>
 800a028:	08009db9 	.word	0x08009db9

0800a02c <_free_r>:
 800a02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a02e:	2900      	cmp	r1, #0
 800a030:	d044      	beq.n	800a0bc <_free_r+0x90>
 800a032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a036:	9001      	str	r0, [sp, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f1a1 0404 	sub.w	r4, r1, #4
 800a03e:	bfb8      	it	lt
 800a040:	18e4      	addlt	r4, r4, r3
 800a042:	f000 fc6b 	bl	800a91c <__malloc_lock>
 800a046:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <_free_r+0x94>)
 800a048:	9801      	ldr	r0, [sp, #4]
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	b933      	cbnz	r3, 800a05c <_free_r+0x30>
 800a04e:	6063      	str	r3, [r4, #4]
 800a050:	6014      	str	r4, [r2, #0]
 800a052:	b003      	add	sp, #12
 800a054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a058:	f000 bc66 	b.w	800a928 <__malloc_unlock>
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	d908      	bls.n	800a072 <_free_r+0x46>
 800a060:	6825      	ldr	r5, [r4, #0]
 800a062:	1961      	adds	r1, r4, r5
 800a064:	428b      	cmp	r3, r1
 800a066:	bf01      	itttt	eq
 800a068:	6819      	ldreq	r1, [r3, #0]
 800a06a:	685b      	ldreq	r3, [r3, #4]
 800a06c:	1949      	addeq	r1, r1, r5
 800a06e:	6021      	streq	r1, [r4, #0]
 800a070:	e7ed      	b.n	800a04e <_free_r+0x22>
 800a072:	461a      	mov	r2, r3
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	b10b      	cbz	r3, 800a07c <_free_r+0x50>
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d9fa      	bls.n	800a072 <_free_r+0x46>
 800a07c:	6811      	ldr	r1, [r2, #0]
 800a07e:	1855      	adds	r5, r2, r1
 800a080:	42a5      	cmp	r5, r4
 800a082:	d10b      	bne.n	800a09c <_free_r+0x70>
 800a084:	6824      	ldr	r4, [r4, #0]
 800a086:	4421      	add	r1, r4
 800a088:	1854      	adds	r4, r2, r1
 800a08a:	42a3      	cmp	r3, r4
 800a08c:	6011      	str	r1, [r2, #0]
 800a08e:	d1e0      	bne.n	800a052 <_free_r+0x26>
 800a090:	681c      	ldr	r4, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	6053      	str	r3, [r2, #4]
 800a096:	4421      	add	r1, r4
 800a098:	6011      	str	r1, [r2, #0]
 800a09a:	e7da      	b.n	800a052 <_free_r+0x26>
 800a09c:	d902      	bls.n	800a0a4 <_free_r+0x78>
 800a09e:	230c      	movs	r3, #12
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	e7d6      	b.n	800a052 <_free_r+0x26>
 800a0a4:	6825      	ldr	r5, [r4, #0]
 800a0a6:	1961      	adds	r1, r4, r5
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	bf04      	itt	eq
 800a0ac:	6819      	ldreq	r1, [r3, #0]
 800a0ae:	685b      	ldreq	r3, [r3, #4]
 800a0b0:	6063      	str	r3, [r4, #4]
 800a0b2:	bf04      	itt	eq
 800a0b4:	1949      	addeq	r1, r1, r5
 800a0b6:	6021      	streq	r1, [r4, #0]
 800a0b8:	6054      	str	r4, [r2, #4]
 800a0ba:	e7ca      	b.n	800a052 <_free_r+0x26>
 800a0bc:	b003      	add	sp, #12
 800a0be:	bd30      	pop	{r4, r5, pc}
 800a0c0:	20000c68 	.word	0x20000c68

0800a0c4 <sbrk_aligned>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4e0e      	ldr	r6, [pc, #56]	; (800a100 <sbrk_aligned+0x3c>)
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	6831      	ldr	r1, [r6, #0]
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	b911      	cbnz	r1, 800a0d6 <sbrk_aligned+0x12>
 800a0d0:	f000 fb7a 	bl	800a7c8 <_sbrk_r>
 800a0d4:	6030      	str	r0, [r6, #0]
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 fb75 	bl	800a7c8 <_sbrk_r>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d00a      	beq.n	800a0f8 <sbrk_aligned+0x34>
 800a0e2:	1cc4      	adds	r4, r0, #3
 800a0e4:	f024 0403 	bic.w	r4, r4, #3
 800a0e8:	42a0      	cmp	r0, r4
 800a0ea:	d007      	beq.n	800a0fc <sbrk_aligned+0x38>
 800a0ec:	1a21      	subs	r1, r4, r0
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 fb6a 	bl	800a7c8 <_sbrk_r>
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d101      	bne.n	800a0fc <sbrk_aligned+0x38>
 800a0f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	20000c6c 	.word	0x20000c6c

0800a104 <_malloc_r>:
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a108:	1ccd      	adds	r5, r1, #3
 800a10a:	f025 0503 	bic.w	r5, r5, #3
 800a10e:	3508      	adds	r5, #8
 800a110:	2d0c      	cmp	r5, #12
 800a112:	bf38      	it	cc
 800a114:	250c      	movcc	r5, #12
 800a116:	2d00      	cmp	r5, #0
 800a118:	4607      	mov	r7, r0
 800a11a:	db01      	blt.n	800a120 <_malloc_r+0x1c>
 800a11c:	42a9      	cmp	r1, r5
 800a11e:	d905      	bls.n	800a12c <_malloc_r+0x28>
 800a120:	230c      	movs	r3, #12
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	2600      	movs	r6, #0
 800a126:	4630      	mov	r0, r6
 800a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12c:	4e2e      	ldr	r6, [pc, #184]	; (800a1e8 <_malloc_r+0xe4>)
 800a12e:	f000 fbf5 	bl	800a91c <__malloc_lock>
 800a132:	6833      	ldr	r3, [r6, #0]
 800a134:	461c      	mov	r4, r3
 800a136:	bb34      	cbnz	r4, 800a186 <_malloc_r+0x82>
 800a138:	4629      	mov	r1, r5
 800a13a:	4638      	mov	r0, r7
 800a13c:	f7ff ffc2 	bl	800a0c4 <sbrk_aligned>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	4604      	mov	r4, r0
 800a144:	d14d      	bne.n	800a1e2 <_malloc_r+0xde>
 800a146:	6834      	ldr	r4, [r6, #0]
 800a148:	4626      	mov	r6, r4
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	d140      	bne.n	800a1d0 <_malloc_r+0xcc>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	4631      	mov	r1, r6
 800a152:	4638      	mov	r0, r7
 800a154:	eb04 0803 	add.w	r8, r4, r3
 800a158:	f000 fb36 	bl	800a7c8 <_sbrk_r>
 800a15c:	4580      	cmp	r8, r0
 800a15e:	d13a      	bne.n	800a1d6 <_malloc_r+0xd2>
 800a160:	6821      	ldr	r1, [r4, #0]
 800a162:	3503      	adds	r5, #3
 800a164:	1a6d      	subs	r5, r5, r1
 800a166:	f025 0503 	bic.w	r5, r5, #3
 800a16a:	3508      	adds	r5, #8
 800a16c:	2d0c      	cmp	r5, #12
 800a16e:	bf38      	it	cc
 800a170:	250c      	movcc	r5, #12
 800a172:	4629      	mov	r1, r5
 800a174:	4638      	mov	r0, r7
 800a176:	f7ff ffa5 	bl	800a0c4 <sbrk_aligned>
 800a17a:	3001      	adds	r0, #1
 800a17c:	d02b      	beq.n	800a1d6 <_malloc_r+0xd2>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	442b      	add	r3, r5
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	e00e      	b.n	800a1a4 <_malloc_r+0xa0>
 800a186:	6822      	ldr	r2, [r4, #0]
 800a188:	1b52      	subs	r2, r2, r5
 800a18a:	d41e      	bmi.n	800a1ca <_malloc_r+0xc6>
 800a18c:	2a0b      	cmp	r2, #11
 800a18e:	d916      	bls.n	800a1be <_malloc_r+0xba>
 800a190:	1961      	adds	r1, r4, r5
 800a192:	42a3      	cmp	r3, r4
 800a194:	6025      	str	r5, [r4, #0]
 800a196:	bf18      	it	ne
 800a198:	6059      	strne	r1, [r3, #4]
 800a19a:	6863      	ldr	r3, [r4, #4]
 800a19c:	bf08      	it	eq
 800a19e:	6031      	streq	r1, [r6, #0]
 800a1a0:	5162      	str	r2, [r4, r5]
 800a1a2:	604b      	str	r3, [r1, #4]
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f104 060b 	add.w	r6, r4, #11
 800a1aa:	f000 fbbd 	bl	800a928 <__malloc_unlock>
 800a1ae:	f026 0607 	bic.w	r6, r6, #7
 800a1b2:	1d23      	adds	r3, r4, #4
 800a1b4:	1af2      	subs	r2, r6, r3
 800a1b6:	d0b6      	beq.n	800a126 <_malloc_r+0x22>
 800a1b8:	1b9b      	subs	r3, r3, r6
 800a1ba:	50a3      	str	r3, [r4, r2]
 800a1bc:	e7b3      	b.n	800a126 <_malloc_r+0x22>
 800a1be:	6862      	ldr	r2, [r4, #4]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	bf0c      	ite	eq
 800a1c4:	6032      	streq	r2, [r6, #0]
 800a1c6:	605a      	strne	r2, [r3, #4]
 800a1c8:	e7ec      	b.n	800a1a4 <_malloc_r+0xa0>
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	6864      	ldr	r4, [r4, #4]
 800a1ce:	e7b2      	b.n	800a136 <_malloc_r+0x32>
 800a1d0:	4634      	mov	r4, r6
 800a1d2:	6876      	ldr	r6, [r6, #4]
 800a1d4:	e7b9      	b.n	800a14a <_malloc_r+0x46>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	603b      	str	r3, [r7, #0]
 800a1da:	4638      	mov	r0, r7
 800a1dc:	f000 fba4 	bl	800a928 <__malloc_unlock>
 800a1e0:	e7a1      	b.n	800a126 <_malloc_r+0x22>
 800a1e2:	6025      	str	r5, [r4, #0]
 800a1e4:	e7de      	b.n	800a1a4 <_malloc_r+0xa0>
 800a1e6:	bf00      	nop
 800a1e8:	20000c68 	.word	0x20000c68

0800a1ec <__sfputc_r>:
 800a1ec:	6893      	ldr	r3, [r2, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	b410      	push	{r4}
 800a1f4:	6093      	str	r3, [r2, #8]
 800a1f6:	da08      	bge.n	800a20a <__sfputc_r+0x1e>
 800a1f8:	6994      	ldr	r4, [r2, #24]
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	db01      	blt.n	800a202 <__sfputc_r+0x16>
 800a1fe:	290a      	cmp	r1, #10
 800a200:	d103      	bne.n	800a20a <__sfputc_r+0x1e>
 800a202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a206:	f7ff bc31 	b.w	8009a6c <__swbuf_r>
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	1c58      	adds	r0, r3, #1
 800a20e:	6010      	str	r0, [r2, #0]
 800a210:	7019      	strb	r1, [r3, #0]
 800a212:	4608      	mov	r0, r1
 800a214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <__sfputs_r>:
 800a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4614      	mov	r4, r2
 800a222:	18d5      	adds	r5, r2, r3
 800a224:	42ac      	cmp	r4, r5
 800a226:	d101      	bne.n	800a22c <__sfputs_r+0x12>
 800a228:	2000      	movs	r0, #0
 800a22a:	e007      	b.n	800a23c <__sfputs_r+0x22>
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	463a      	mov	r2, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ffda 	bl	800a1ec <__sfputc_r>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d1f3      	bne.n	800a224 <__sfputs_r+0xa>
 800a23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a240 <_vfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	460d      	mov	r5, r1
 800a246:	b09d      	sub	sp, #116	; 0x74
 800a248:	4614      	mov	r4, r2
 800a24a:	4698      	mov	r8, r3
 800a24c:	4606      	mov	r6, r0
 800a24e:	b118      	cbz	r0, 800a258 <_vfiprintf_r+0x18>
 800a250:	6983      	ldr	r3, [r0, #24]
 800a252:	b90b      	cbnz	r3, 800a258 <_vfiprintf_r+0x18>
 800a254:	f7ff fde4 	bl	8009e20 <__sinit>
 800a258:	4b89      	ldr	r3, [pc, #548]	; (800a480 <_vfiprintf_r+0x240>)
 800a25a:	429d      	cmp	r5, r3
 800a25c:	d11b      	bne.n	800a296 <_vfiprintf_r+0x56>
 800a25e:	6875      	ldr	r5, [r6, #4]
 800a260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a262:	07d9      	lsls	r1, r3, #31
 800a264:	d405      	bmi.n	800a272 <_vfiprintf_r+0x32>
 800a266:	89ab      	ldrh	r3, [r5, #12]
 800a268:	059a      	lsls	r2, r3, #22
 800a26a:	d402      	bmi.n	800a272 <_vfiprintf_r+0x32>
 800a26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a26e:	f7ff fe75 	bl	8009f5c <__retarget_lock_acquire_recursive>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	071b      	lsls	r3, r3, #28
 800a276:	d501      	bpl.n	800a27c <_vfiprintf_r+0x3c>
 800a278:	692b      	ldr	r3, [r5, #16]
 800a27a:	b9eb      	cbnz	r3, 800a2b8 <_vfiprintf_r+0x78>
 800a27c:	4629      	mov	r1, r5
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff fc46 	bl	8009b10 <__swsetup_r>
 800a284:	b1c0      	cbz	r0, 800a2b8 <_vfiprintf_r+0x78>
 800a286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a288:	07dc      	lsls	r4, r3, #31
 800a28a:	d50e      	bpl.n	800a2aa <_vfiprintf_r+0x6a>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	b01d      	add	sp, #116	; 0x74
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	4b7b      	ldr	r3, [pc, #492]	; (800a484 <_vfiprintf_r+0x244>)
 800a298:	429d      	cmp	r5, r3
 800a29a:	d101      	bne.n	800a2a0 <_vfiprintf_r+0x60>
 800a29c:	68b5      	ldr	r5, [r6, #8]
 800a29e:	e7df      	b.n	800a260 <_vfiprintf_r+0x20>
 800a2a0:	4b79      	ldr	r3, [pc, #484]	; (800a488 <_vfiprintf_r+0x248>)
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	bf08      	it	eq
 800a2a6:	68f5      	ldreq	r5, [r6, #12]
 800a2a8:	e7da      	b.n	800a260 <_vfiprintf_r+0x20>
 800a2aa:	89ab      	ldrh	r3, [r5, #12]
 800a2ac:	0598      	lsls	r0, r3, #22
 800a2ae:	d4ed      	bmi.n	800a28c <_vfiprintf_r+0x4c>
 800a2b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b2:	f7ff fe54 	bl	8009f5e <__retarget_lock_release_recursive>
 800a2b6:	e7e9      	b.n	800a28c <_vfiprintf_r+0x4c>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a2bc:	2320      	movs	r3, #32
 800a2be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2c6:	2330      	movs	r3, #48	; 0x30
 800a2c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a48c <_vfiprintf_r+0x24c>
 800a2cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2d0:	f04f 0901 	mov.w	r9, #1
 800a2d4:	4623      	mov	r3, r4
 800a2d6:	469a      	mov	sl, r3
 800a2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2dc:	b10a      	cbz	r2, 800a2e2 <_vfiprintf_r+0xa2>
 800a2de:	2a25      	cmp	r2, #37	; 0x25
 800a2e0:	d1f9      	bne.n	800a2d6 <_vfiprintf_r+0x96>
 800a2e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2e6:	d00b      	beq.n	800a300 <_vfiprintf_r+0xc0>
 800a2e8:	465b      	mov	r3, fp
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff93 	bl	800a21a <__sfputs_r>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f000 80aa 	beq.w	800a44e <_vfiprintf_r+0x20e>
 800a2fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2fc:	445a      	add	r2, fp
 800a2fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a300:	f89a 3000 	ldrb.w	r3, [sl]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80a2 	beq.w	800a44e <_vfiprintf_r+0x20e>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f04f 32ff 	mov.w	r2, #4294967295
 800a310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a314:	f10a 0a01 	add.w	sl, sl, #1
 800a318:	9304      	str	r3, [sp, #16]
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a320:	931a      	str	r3, [sp, #104]	; 0x68
 800a322:	4654      	mov	r4, sl
 800a324:	2205      	movs	r2, #5
 800a326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a32a:	4858      	ldr	r0, [pc, #352]	; (800a48c <_vfiprintf_r+0x24c>)
 800a32c:	f7f5 ff50 	bl	80001d0 <memchr>
 800a330:	9a04      	ldr	r2, [sp, #16]
 800a332:	b9d8      	cbnz	r0, 800a36c <_vfiprintf_r+0x12c>
 800a334:	06d1      	lsls	r1, r2, #27
 800a336:	bf44      	itt	mi
 800a338:	2320      	movmi	r3, #32
 800a33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a33e:	0713      	lsls	r3, r2, #28
 800a340:	bf44      	itt	mi
 800a342:	232b      	movmi	r3, #43	; 0x2b
 800a344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a348:	f89a 3000 	ldrb.w	r3, [sl]
 800a34c:	2b2a      	cmp	r3, #42	; 0x2a
 800a34e:	d015      	beq.n	800a37c <_vfiprintf_r+0x13c>
 800a350:	9a07      	ldr	r2, [sp, #28]
 800a352:	4654      	mov	r4, sl
 800a354:	2000      	movs	r0, #0
 800a356:	f04f 0c0a 	mov.w	ip, #10
 800a35a:	4621      	mov	r1, r4
 800a35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a360:	3b30      	subs	r3, #48	; 0x30
 800a362:	2b09      	cmp	r3, #9
 800a364:	d94e      	bls.n	800a404 <_vfiprintf_r+0x1c4>
 800a366:	b1b0      	cbz	r0, 800a396 <_vfiprintf_r+0x156>
 800a368:	9207      	str	r2, [sp, #28]
 800a36a:	e014      	b.n	800a396 <_vfiprintf_r+0x156>
 800a36c:	eba0 0308 	sub.w	r3, r0, r8
 800a370:	fa09 f303 	lsl.w	r3, r9, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	46a2      	mov	sl, r4
 800a37a:	e7d2      	b.n	800a322 <_vfiprintf_r+0xe2>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	1d19      	adds	r1, r3, #4
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	9103      	str	r1, [sp, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	bfbb      	ittet	lt
 800a388:	425b      	neglt	r3, r3
 800a38a:	f042 0202 	orrlt.w	r2, r2, #2
 800a38e:	9307      	strge	r3, [sp, #28]
 800a390:	9307      	strlt	r3, [sp, #28]
 800a392:	bfb8      	it	lt
 800a394:	9204      	strlt	r2, [sp, #16]
 800a396:	7823      	ldrb	r3, [r4, #0]
 800a398:	2b2e      	cmp	r3, #46	; 0x2e
 800a39a:	d10c      	bne.n	800a3b6 <_vfiprintf_r+0x176>
 800a39c:	7863      	ldrb	r3, [r4, #1]
 800a39e:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a0:	d135      	bne.n	800a40e <_vfiprintf_r+0x1ce>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	9203      	str	r2, [sp, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	bfb8      	it	lt
 800a3ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3b2:	3402      	adds	r4, #2
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a49c <_vfiprintf_r+0x25c>
 800a3ba:	7821      	ldrb	r1, [r4, #0]
 800a3bc:	2203      	movs	r2, #3
 800a3be:	4650      	mov	r0, sl
 800a3c0:	f7f5 ff06 	bl	80001d0 <memchr>
 800a3c4:	b140      	cbz	r0, 800a3d8 <_vfiprintf_r+0x198>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	eba0 000a 	sub.w	r0, r0, sl
 800a3cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	4303      	orrs	r3, r0
 800a3d4:	3401      	adds	r4, #1
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3dc:	482c      	ldr	r0, [pc, #176]	; (800a490 <_vfiprintf_r+0x250>)
 800a3de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3e2:	2206      	movs	r2, #6
 800a3e4:	f7f5 fef4 	bl	80001d0 <memchr>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d03f      	beq.n	800a46c <_vfiprintf_r+0x22c>
 800a3ec:	4b29      	ldr	r3, [pc, #164]	; (800a494 <_vfiprintf_r+0x254>)
 800a3ee:	bb1b      	cbnz	r3, 800a438 <_vfiprintf_r+0x1f8>
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	3307      	adds	r3, #7
 800a3f4:	f023 0307 	bic.w	r3, r3, #7
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	9303      	str	r3, [sp, #12]
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	443b      	add	r3, r7
 800a400:	9309      	str	r3, [sp, #36]	; 0x24
 800a402:	e767      	b.n	800a2d4 <_vfiprintf_r+0x94>
 800a404:	fb0c 3202 	mla	r2, ip, r2, r3
 800a408:	460c      	mov	r4, r1
 800a40a:	2001      	movs	r0, #1
 800a40c:	e7a5      	b.n	800a35a <_vfiprintf_r+0x11a>
 800a40e:	2300      	movs	r3, #0
 800a410:	3401      	adds	r4, #1
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	4619      	mov	r1, r3
 800a416:	f04f 0c0a 	mov.w	ip, #10
 800a41a:	4620      	mov	r0, r4
 800a41c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a420:	3a30      	subs	r2, #48	; 0x30
 800a422:	2a09      	cmp	r2, #9
 800a424:	d903      	bls.n	800a42e <_vfiprintf_r+0x1ee>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0c5      	beq.n	800a3b6 <_vfiprintf_r+0x176>
 800a42a:	9105      	str	r1, [sp, #20]
 800a42c:	e7c3      	b.n	800a3b6 <_vfiprintf_r+0x176>
 800a42e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a432:	4604      	mov	r4, r0
 800a434:	2301      	movs	r3, #1
 800a436:	e7f0      	b.n	800a41a <_vfiprintf_r+0x1da>
 800a438:	ab03      	add	r3, sp, #12
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	462a      	mov	r2, r5
 800a43e:	4b16      	ldr	r3, [pc, #88]	; (800a498 <_vfiprintf_r+0x258>)
 800a440:	a904      	add	r1, sp, #16
 800a442:	4630      	mov	r0, r6
 800a444:	f3af 8000 	nop.w
 800a448:	4607      	mov	r7, r0
 800a44a:	1c78      	adds	r0, r7, #1
 800a44c:	d1d6      	bne.n	800a3fc <_vfiprintf_r+0x1bc>
 800a44e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a450:	07d9      	lsls	r1, r3, #31
 800a452:	d405      	bmi.n	800a460 <_vfiprintf_r+0x220>
 800a454:	89ab      	ldrh	r3, [r5, #12]
 800a456:	059a      	lsls	r2, r3, #22
 800a458:	d402      	bmi.n	800a460 <_vfiprintf_r+0x220>
 800a45a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a45c:	f7ff fd7f 	bl	8009f5e <__retarget_lock_release_recursive>
 800a460:	89ab      	ldrh	r3, [r5, #12]
 800a462:	065b      	lsls	r3, r3, #25
 800a464:	f53f af12 	bmi.w	800a28c <_vfiprintf_r+0x4c>
 800a468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a46a:	e711      	b.n	800a290 <_vfiprintf_r+0x50>
 800a46c:	ab03      	add	r3, sp, #12
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	462a      	mov	r2, r5
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <_vfiprintf_r+0x258>)
 800a474:	a904      	add	r1, sp, #16
 800a476:	4630      	mov	r0, r6
 800a478:	f000 f880 	bl	800a57c <_printf_i>
 800a47c:	e7e4      	b.n	800a448 <_vfiprintf_r+0x208>
 800a47e:	bf00      	nop
 800a480:	0800add0 	.word	0x0800add0
 800a484:	0800adf0 	.word	0x0800adf0
 800a488:	0800adb0 	.word	0x0800adb0
 800a48c:	0800ae10 	.word	0x0800ae10
 800a490:	0800ae1a 	.word	0x0800ae1a
 800a494:	00000000 	.word	0x00000000
 800a498:	0800a21b 	.word	0x0800a21b
 800a49c:	0800ae16 	.word	0x0800ae16

0800a4a0 <_printf_common>:
 800a4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	4699      	mov	r9, r3
 800a4a8:	688a      	ldr	r2, [r1, #8]
 800a4aa:	690b      	ldr	r3, [r1, #16]
 800a4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	bfb8      	it	lt
 800a4b4:	4613      	movlt	r3, r2
 800a4b6:	6033      	str	r3, [r6, #0]
 800a4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4bc:	4607      	mov	r7, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	b10a      	cbz	r2, 800a4c6 <_printf_common+0x26>
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	6033      	str	r3, [r6, #0]
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	0699      	lsls	r1, r3, #26
 800a4ca:	bf42      	ittt	mi
 800a4cc:	6833      	ldrmi	r3, [r6, #0]
 800a4ce:	3302      	addmi	r3, #2
 800a4d0:	6033      	strmi	r3, [r6, #0]
 800a4d2:	6825      	ldr	r5, [r4, #0]
 800a4d4:	f015 0506 	ands.w	r5, r5, #6
 800a4d8:	d106      	bne.n	800a4e8 <_printf_common+0x48>
 800a4da:	f104 0a19 	add.w	sl, r4, #25
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	6832      	ldr	r2, [r6, #0]
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dc26      	bgt.n	800a536 <_printf_common+0x96>
 800a4e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4ec:	1e13      	subs	r3, r2, #0
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	bf18      	it	ne
 800a4f2:	2301      	movne	r3, #1
 800a4f4:	0692      	lsls	r2, r2, #26
 800a4f6:	d42b      	bmi.n	800a550 <_printf_common+0xb0>
 800a4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c0      	blx	r8
 800a502:	3001      	adds	r0, #1
 800a504:	d01e      	beq.n	800a544 <_printf_common+0xa4>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	68e5      	ldr	r5, [r4, #12]
 800a50a:	6832      	ldr	r2, [r6, #0]
 800a50c:	f003 0306 	and.w	r3, r3, #6
 800a510:	2b04      	cmp	r3, #4
 800a512:	bf08      	it	eq
 800a514:	1aad      	subeq	r5, r5, r2
 800a516:	68a3      	ldr	r3, [r4, #8]
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	bf0c      	ite	eq
 800a51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a520:	2500      	movne	r5, #0
 800a522:	4293      	cmp	r3, r2
 800a524:	bfc4      	itt	gt
 800a526:	1a9b      	subgt	r3, r3, r2
 800a528:	18ed      	addgt	r5, r5, r3
 800a52a:	2600      	movs	r6, #0
 800a52c:	341a      	adds	r4, #26
 800a52e:	42b5      	cmp	r5, r6
 800a530:	d11a      	bne.n	800a568 <_printf_common+0xc8>
 800a532:	2000      	movs	r0, #0
 800a534:	e008      	b.n	800a548 <_printf_common+0xa8>
 800a536:	2301      	movs	r3, #1
 800a538:	4652      	mov	r2, sl
 800a53a:	4649      	mov	r1, r9
 800a53c:	4638      	mov	r0, r7
 800a53e:	47c0      	blx	r8
 800a540:	3001      	adds	r0, #1
 800a542:	d103      	bne.n	800a54c <_printf_common+0xac>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54c:	3501      	adds	r5, #1
 800a54e:	e7c6      	b.n	800a4de <_printf_common+0x3e>
 800a550:	18e1      	adds	r1, r4, r3
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	2030      	movs	r0, #48	; 0x30
 800a556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a55a:	4422      	add	r2, r4
 800a55c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a564:	3302      	adds	r3, #2
 800a566:	e7c7      	b.n	800a4f8 <_printf_common+0x58>
 800a568:	2301      	movs	r3, #1
 800a56a:	4622      	mov	r2, r4
 800a56c:	4649      	mov	r1, r9
 800a56e:	4638      	mov	r0, r7
 800a570:	47c0      	blx	r8
 800a572:	3001      	adds	r0, #1
 800a574:	d0e6      	beq.n	800a544 <_printf_common+0xa4>
 800a576:	3601      	adds	r6, #1
 800a578:	e7d9      	b.n	800a52e <_printf_common+0x8e>
	...

0800a57c <_printf_i>:
 800a57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a580:	7e0f      	ldrb	r7, [r1, #24]
 800a582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a584:	2f78      	cmp	r7, #120	; 0x78
 800a586:	4691      	mov	r9, r2
 800a588:	4680      	mov	r8, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	469a      	mov	sl, r3
 800a58e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a592:	d807      	bhi.n	800a5a4 <_printf_i+0x28>
 800a594:	2f62      	cmp	r7, #98	; 0x62
 800a596:	d80a      	bhi.n	800a5ae <_printf_i+0x32>
 800a598:	2f00      	cmp	r7, #0
 800a59a:	f000 80d8 	beq.w	800a74e <_printf_i+0x1d2>
 800a59e:	2f58      	cmp	r7, #88	; 0x58
 800a5a0:	f000 80a3 	beq.w	800a6ea <_printf_i+0x16e>
 800a5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5ac:	e03a      	b.n	800a624 <_printf_i+0xa8>
 800a5ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5b2:	2b15      	cmp	r3, #21
 800a5b4:	d8f6      	bhi.n	800a5a4 <_printf_i+0x28>
 800a5b6:	a101      	add	r1, pc, #4	; (adr r1, 800a5bc <_printf_i+0x40>)
 800a5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5bc:	0800a615 	.word	0x0800a615
 800a5c0:	0800a629 	.word	0x0800a629
 800a5c4:	0800a5a5 	.word	0x0800a5a5
 800a5c8:	0800a5a5 	.word	0x0800a5a5
 800a5cc:	0800a5a5 	.word	0x0800a5a5
 800a5d0:	0800a5a5 	.word	0x0800a5a5
 800a5d4:	0800a629 	.word	0x0800a629
 800a5d8:	0800a5a5 	.word	0x0800a5a5
 800a5dc:	0800a5a5 	.word	0x0800a5a5
 800a5e0:	0800a5a5 	.word	0x0800a5a5
 800a5e4:	0800a5a5 	.word	0x0800a5a5
 800a5e8:	0800a735 	.word	0x0800a735
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a717 	.word	0x0800a717
 800a5f4:	0800a5a5 	.word	0x0800a5a5
 800a5f8:	0800a5a5 	.word	0x0800a5a5
 800a5fc:	0800a757 	.word	0x0800a757
 800a600:	0800a5a5 	.word	0x0800a5a5
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a5a5 	.word	0x0800a5a5
 800a60c:	0800a5a5 	.word	0x0800a5a5
 800a610:	0800a71f 	.word	0x0800a71f
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	1d1a      	adds	r2, r3, #4
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	602a      	str	r2, [r5, #0]
 800a61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a624:	2301      	movs	r3, #1
 800a626:	e0a3      	b.n	800a770 <_printf_i+0x1f4>
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	6829      	ldr	r1, [r5, #0]
 800a62c:	0606      	lsls	r6, r0, #24
 800a62e:	f101 0304 	add.w	r3, r1, #4
 800a632:	d50a      	bpl.n	800a64a <_printf_i+0xce>
 800a634:	680e      	ldr	r6, [r1, #0]
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	2e00      	cmp	r6, #0
 800a63a:	da03      	bge.n	800a644 <_printf_i+0xc8>
 800a63c:	232d      	movs	r3, #45	; 0x2d
 800a63e:	4276      	negs	r6, r6
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	485e      	ldr	r0, [pc, #376]	; (800a7c0 <_printf_i+0x244>)
 800a646:	230a      	movs	r3, #10
 800a648:	e019      	b.n	800a67e <_printf_i+0x102>
 800a64a:	680e      	ldr	r6, [r1, #0]
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a652:	bf18      	it	ne
 800a654:	b236      	sxthne	r6, r6
 800a656:	e7ef      	b.n	800a638 <_printf_i+0xbc>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	6820      	ldr	r0, [r4, #0]
 800a65c:	1d19      	adds	r1, r3, #4
 800a65e:	6029      	str	r1, [r5, #0]
 800a660:	0601      	lsls	r1, r0, #24
 800a662:	d501      	bpl.n	800a668 <_printf_i+0xec>
 800a664:	681e      	ldr	r6, [r3, #0]
 800a666:	e002      	b.n	800a66e <_printf_i+0xf2>
 800a668:	0646      	lsls	r6, r0, #25
 800a66a:	d5fb      	bpl.n	800a664 <_printf_i+0xe8>
 800a66c:	881e      	ldrh	r6, [r3, #0]
 800a66e:	4854      	ldr	r0, [pc, #336]	; (800a7c0 <_printf_i+0x244>)
 800a670:	2f6f      	cmp	r7, #111	; 0x6f
 800a672:	bf0c      	ite	eq
 800a674:	2308      	moveq	r3, #8
 800a676:	230a      	movne	r3, #10
 800a678:	2100      	movs	r1, #0
 800a67a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a67e:	6865      	ldr	r5, [r4, #4]
 800a680:	60a5      	str	r5, [r4, #8]
 800a682:	2d00      	cmp	r5, #0
 800a684:	bfa2      	ittt	ge
 800a686:	6821      	ldrge	r1, [r4, #0]
 800a688:	f021 0104 	bicge.w	r1, r1, #4
 800a68c:	6021      	strge	r1, [r4, #0]
 800a68e:	b90e      	cbnz	r6, 800a694 <_printf_i+0x118>
 800a690:	2d00      	cmp	r5, #0
 800a692:	d04d      	beq.n	800a730 <_printf_i+0x1b4>
 800a694:	4615      	mov	r5, r2
 800a696:	fbb6 f1f3 	udiv	r1, r6, r3
 800a69a:	fb03 6711 	mls	r7, r3, r1, r6
 800a69e:	5dc7      	ldrb	r7, [r0, r7]
 800a6a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6a4:	4637      	mov	r7, r6
 800a6a6:	42bb      	cmp	r3, r7
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	d9f4      	bls.n	800a696 <_printf_i+0x11a>
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d10b      	bne.n	800a6c8 <_printf_i+0x14c>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	07de      	lsls	r6, r3, #31
 800a6b4:	d508      	bpl.n	800a6c8 <_printf_i+0x14c>
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	4299      	cmp	r1, r3
 800a6bc:	bfde      	ittt	le
 800a6be:	2330      	movle	r3, #48	; 0x30
 800a6c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6c8:	1b52      	subs	r2, r2, r5
 800a6ca:	6122      	str	r2, [r4, #16]
 800a6cc:	f8cd a000 	str.w	sl, [sp]
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	aa03      	add	r2, sp, #12
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fee2 	bl	800a4a0 <_printf_common>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d14c      	bne.n	800a77a <_printf_i+0x1fe>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	b004      	add	sp, #16
 800a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ea:	4835      	ldr	r0, [pc, #212]	; (800a7c0 <_printf_i+0x244>)
 800a6ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6f0:	6829      	ldr	r1, [r5, #0]
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6f8:	6029      	str	r1, [r5, #0]
 800a6fa:	061d      	lsls	r5, r3, #24
 800a6fc:	d514      	bpl.n	800a728 <_printf_i+0x1ac>
 800a6fe:	07df      	lsls	r7, r3, #31
 800a700:	bf44      	itt	mi
 800a702:	f043 0320 	orrmi.w	r3, r3, #32
 800a706:	6023      	strmi	r3, [r4, #0]
 800a708:	b91e      	cbnz	r6, 800a712 <_printf_i+0x196>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	f023 0320 	bic.w	r3, r3, #32
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	2310      	movs	r3, #16
 800a714:	e7b0      	b.n	800a678 <_printf_i+0xfc>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f043 0320 	orr.w	r3, r3, #32
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	2378      	movs	r3, #120	; 0x78
 800a720:	4828      	ldr	r0, [pc, #160]	; (800a7c4 <_printf_i+0x248>)
 800a722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a726:	e7e3      	b.n	800a6f0 <_printf_i+0x174>
 800a728:	0659      	lsls	r1, r3, #25
 800a72a:	bf48      	it	mi
 800a72c:	b2b6      	uxthmi	r6, r6
 800a72e:	e7e6      	b.n	800a6fe <_printf_i+0x182>
 800a730:	4615      	mov	r5, r2
 800a732:	e7bb      	b.n	800a6ac <_printf_i+0x130>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	6826      	ldr	r6, [r4, #0]
 800a738:	6961      	ldr	r1, [r4, #20]
 800a73a:	1d18      	adds	r0, r3, #4
 800a73c:	6028      	str	r0, [r5, #0]
 800a73e:	0635      	lsls	r5, r6, #24
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	d501      	bpl.n	800a748 <_printf_i+0x1cc>
 800a744:	6019      	str	r1, [r3, #0]
 800a746:	e002      	b.n	800a74e <_printf_i+0x1d2>
 800a748:	0670      	lsls	r0, r6, #25
 800a74a:	d5fb      	bpl.n	800a744 <_printf_i+0x1c8>
 800a74c:	8019      	strh	r1, [r3, #0]
 800a74e:	2300      	movs	r3, #0
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	4615      	mov	r5, r2
 800a754:	e7ba      	b.n	800a6cc <_printf_i+0x150>
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	1d1a      	adds	r2, r3, #4
 800a75a:	602a      	str	r2, [r5, #0]
 800a75c:	681d      	ldr	r5, [r3, #0]
 800a75e:	6862      	ldr	r2, [r4, #4]
 800a760:	2100      	movs	r1, #0
 800a762:	4628      	mov	r0, r5
 800a764:	f7f5 fd34 	bl	80001d0 <memchr>
 800a768:	b108      	cbz	r0, 800a76e <_printf_i+0x1f2>
 800a76a:	1b40      	subs	r0, r0, r5
 800a76c:	6060      	str	r0, [r4, #4]
 800a76e:	6863      	ldr	r3, [r4, #4]
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	2300      	movs	r3, #0
 800a774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a778:	e7a8      	b.n	800a6cc <_printf_i+0x150>
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	462a      	mov	r2, r5
 800a77e:	4649      	mov	r1, r9
 800a780:	4640      	mov	r0, r8
 800a782:	47d0      	blx	sl
 800a784:	3001      	adds	r0, #1
 800a786:	d0ab      	beq.n	800a6e0 <_printf_i+0x164>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	079b      	lsls	r3, r3, #30
 800a78c:	d413      	bmi.n	800a7b6 <_printf_i+0x23a>
 800a78e:	68e0      	ldr	r0, [r4, #12]
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	4298      	cmp	r0, r3
 800a794:	bfb8      	it	lt
 800a796:	4618      	movlt	r0, r3
 800a798:	e7a4      	b.n	800a6e4 <_printf_i+0x168>
 800a79a:	2301      	movs	r3, #1
 800a79c:	4632      	mov	r2, r6
 800a79e:	4649      	mov	r1, r9
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	47d0      	blx	sl
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d09b      	beq.n	800a6e0 <_printf_i+0x164>
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	68e3      	ldr	r3, [r4, #12]
 800a7ac:	9903      	ldr	r1, [sp, #12]
 800a7ae:	1a5b      	subs	r3, r3, r1
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	dcf2      	bgt.n	800a79a <_printf_i+0x21e>
 800a7b4:	e7eb      	b.n	800a78e <_printf_i+0x212>
 800a7b6:	2500      	movs	r5, #0
 800a7b8:	f104 0619 	add.w	r6, r4, #25
 800a7bc:	e7f5      	b.n	800a7aa <_printf_i+0x22e>
 800a7be:	bf00      	nop
 800a7c0:	0800ae21 	.word	0x0800ae21
 800a7c4:	0800ae32 	.word	0x0800ae32

0800a7c8 <_sbrk_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d06      	ldr	r5, [pc, #24]	; (800a7e4 <_sbrk_r+0x1c>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f7f6 ffbe 	bl	8001754 <_sbrk>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d102      	bne.n	800a7e2 <_sbrk_r+0x1a>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b103      	cbz	r3, 800a7e2 <_sbrk_r+0x1a>
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	20000c70 	.word	0x20000c70

0800a7e8 <__sread>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f0:	f000 f8a0 	bl	800a934 <_read_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	bfab      	itete	ge
 800a7f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a7fc:	181b      	addge	r3, r3, r0
 800a7fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a802:	bfac      	ite	ge
 800a804:	6563      	strge	r3, [r4, #84]	; 0x54
 800a806:	81a3      	strhlt	r3, [r4, #12]
 800a808:	bd10      	pop	{r4, pc}

0800a80a <__swrite>:
 800a80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80e:	461f      	mov	r7, r3
 800a810:	898b      	ldrh	r3, [r1, #12]
 800a812:	05db      	lsls	r3, r3, #23
 800a814:	4605      	mov	r5, r0
 800a816:	460c      	mov	r4, r1
 800a818:	4616      	mov	r6, r2
 800a81a:	d505      	bpl.n	800a828 <__swrite+0x1e>
 800a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a820:	2302      	movs	r3, #2
 800a822:	2200      	movs	r2, #0
 800a824:	f000 f868 	bl	800a8f8 <_lseek_r>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a832:	81a3      	strh	r3, [r4, #12]
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	4628      	mov	r0, r5
 800a83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83e:	f000 b817 	b.w	800a870 <_write_r>

0800a842 <__sseek>:
 800a842:	b510      	push	{r4, lr}
 800a844:	460c      	mov	r4, r1
 800a846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84a:	f000 f855 	bl	800a8f8 <_lseek_r>
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	bf15      	itete	ne
 800a854:	6560      	strne	r0, [r4, #84]	; 0x54
 800a856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a85a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a85e:	81a3      	strheq	r3, [r4, #12]
 800a860:	bf18      	it	ne
 800a862:	81a3      	strhne	r3, [r4, #12]
 800a864:	bd10      	pop	{r4, pc}

0800a866 <__sclose>:
 800a866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a86a:	f000 b813 	b.w	800a894 <_close_r>
	...

0800a870 <_write_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	; (800a890 <_write_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f6 ff17 	bl	80016b2 <_write>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_write_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_write_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000c70 	.word	0x20000c70

0800a894 <_close_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	; (800a8b0 <_close_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f6 ff23 	bl	80016ea <_close>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_close_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_close_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000c70 	.word	0x20000c70

0800a8b4 <_fstat_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d07      	ldr	r5, [pc, #28]	; (800a8d4 <_fstat_r+0x20>)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	4611      	mov	r1, r2
 800a8c0:	602b      	str	r3, [r5, #0]
 800a8c2:	f7f6 ff1e 	bl	8001702 <_fstat>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	d102      	bne.n	800a8d0 <_fstat_r+0x1c>
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	b103      	cbz	r3, 800a8d0 <_fstat_r+0x1c>
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000c70 	.word	0x20000c70

0800a8d8 <_isatty_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4d06      	ldr	r5, [pc, #24]	; (800a8f4 <_isatty_r+0x1c>)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	f7f6 ff1d 	bl	8001722 <_isatty>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_isatty_r+0x1a>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_isatty_r+0x1a>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	20000c70 	.word	0x20000c70

0800a8f8 <_lseek_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d07      	ldr	r5, [pc, #28]	; (800a918 <_lseek_r+0x20>)
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	4608      	mov	r0, r1
 800a900:	4611      	mov	r1, r2
 800a902:	2200      	movs	r2, #0
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	f7f6 ff16 	bl	8001738 <_lseek>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_lseek_r+0x1e>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_lseek_r+0x1e>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	20000c70 	.word	0x20000c70

0800a91c <__malloc_lock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_lock+0x8>)
 800a91e:	f7ff bb1d 	b.w	8009f5c <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	20000c64 	.word	0x20000c64

0800a928 <__malloc_unlock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_unlock+0x8>)
 800a92a:	f7ff bb18 	b.w	8009f5e <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	20000c64 	.word	0x20000c64

0800a934 <_read_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_read_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f6 fe98 	bl	8001678 <_read>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_read_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_read_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20000c70 	.word	0x20000c70

0800a958 <ceil>:
 800a958:	ec51 0b10 	vmov	r0, r1, d0
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a964:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a968:	2e13      	cmp	r6, #19
 800a96a:	ee10 5a10 	vmov	r5, s0
 800a96e:	ee10 8a10 	vmov	r8, s0
 800a972:	460c      	mov	r4, r1
 800a974:	dc30      	bgt.n	800a9d8 <ceil+0x80>
 800a976:	2e00      	cmp	r6, #0
 800a978:	da12      	bge.n	800a9a0 <ceil+0x48>
 800a97a:	a335      	add	r3, pc, #212	; (adr r3, 800aa50 <ceil+0xf8>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f7f5 fc7c 	bl	800027c <__adddf3>
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	f7f6 f8be 	bl	8000b08 <__aeabi_dcmpgt>
 800a98c:	b128      	cbz	r0, 800a99a <ceil+0x42>
 800a98e:	2c00      	cmp	r4, #0
 800a990:	db55      	blt.n	800aa3e <ceil+0xe6>
 800a992:	432c      	orrs	r4, r5
 800a994:	d057      	beq.n	800aa46 <ceil+0xee>
 800a996:	4c30      	ldr	r4, [pc, #192]	; (800aa58 <ceil+0x100>)
 800a998:	2500      	movs	r5, #0
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	e025      	b.n	800a9ec <ceil+0x94>
 800a9a0:	4f2e      	ldr	r7, [pc, #184]	; (800aa5c <ceil+0x104>)
 800a9a2:	4137      	asrs	r7, r6
 800a9a4:	ea01 0307 	and.w	r3, r1, r7
 800a9a8:	4303      	orrs	r3, r0
 800a9aa:	d01f      	beq.n	800a9ec <ceil+0x94>
 800a9ac:	a328      	add	r3, pc, #160	; (adr r3, 800aa50 <ceil+0xf8>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 fc63 	bl	800027c <__adddf3>
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f7f6 f8a5 	bl	8000b08 <__aeabi_dcmpgt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0eb      	beq.n	800a99a <ceil+0x42>
 800a9c2:	2c00      	cmp	r4, #0
 800a9c4:	bfc2      	ittt	gt
 800a9c6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800a9ca:	fa43 f606 	asrgt.w	r6, r3, r6
 800a9ce:	19a4      	addgt	r4, r4, r6
 800a9d0:	ea24 0407 	bic.w	r4, r4, r7
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	e7e0      	b.n	800a99a <ceil+0x42>
 800a9d8:	2e33      	cmp	r6, #51	; 0x33
 800a9da:	dd0b      	ble.n	800a9f4 <ceil+0x9c>
 800a9dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a9e0:	d104      	bne.n	800a9ec <ceil+0x94>
 800a9e2:	ee10 2a10 	vmov	r2, s0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	f7f5 fc48 	bl	800027c <__adddf3>
 800a9ec:	ec41 0b10 	vmov	d0, r0, r1
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	fa23 f707 	lsr.w	r7, r3, r7
 800aa00:	4207      	tst	r7, r0
 800aa02:	d0f3      	beq.n	800a9ec <ceil+0x94>
 800aa04:	a312      	add	r3, pc, #72	; (adr r3, 800aa50 <ceil+0xf8>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fc37 	bl	800027c <__adddf3>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	f7f6 f879 	bl	8000b08 <__aeabi_dcmpgt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d0bf      	beq.n	800a99a <ceil+0x42>
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	dd02      	ble.n	800aa24 <ceil+0xcc>
 800aa1e:	2e14      	cmp	r6, #20
 800aa20:	d103      	bne.n	800aa2a <ceil+0xd2>
 800aa22:	3401      	adds	r4, #1
 800aa24:	ea25 0507 	bic.w	r5, r5, r7
 800aa28:	e7b7      	b.n	800a99a <ceil+0x42>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aa30:	fa03 f606 	lsl.w	r6, r3, r6
 800aa34:	4435      	add	r5, r6
 800aa36:	4545      	cmp	r5, r8
 800aa38:	bf38      	it	cc
 800aa3a:	18e4      	addcc	r4, r4, r3
 800aa3c:	e7f2      	b.n	800aa24 <ceil+0xcc>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aa44:	e7a9      	b.n	800a99a <ceil+0x42>
 800aa46:	4625      	mov	r5, r4
 800aa48:	e7a7      	b.n	800a99a <ceil+0x42>
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w
 800aa50:	8800759c 	.word	0x8800759c
 800aa54:	7e37e43c 	.word	0x7e37e43c
 800aa58:	3ff00000 	.word	0x3ff00000
 800aa5c:	000fffff 	.word	0x000fffff

0800aa60 <floor>:
 800aa60:	ec51 0b10 	vmov	r0, r1, d0
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aa6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800aa70:	2e13      	cmp	r6, #19
 800aa72:	ee10 5a10 	vmov	r5, s0
 800aa76:	ee10 8a10 	vmov	r8, s0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	dc32      	bgt.n	800aae4 <floor+0x84>
 800aa7e:	2e00      	cmp	r6, #0
 800aa80:	da14      	bge.n	800aaac <floor+0x4c>
 800aa82:	a333      	add	r3, pc, #204	; (adr r3, 800ab50 <floor+0xf0>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fbf8 	bl	800027c <__adddf3>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f7f6 f83a 	bl	8000b08 <__aeabi_dcmpgt>
 800aa94:	b138      	cbz	r0, 800aaa6 <floor+0x46>
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	da57      	bge.n	800ab4a <floor+0xea>
 800aa9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aa9e:	431d      	orrs	r5, r3
 800aaa0:	d001      	beq.n	800aaa6 <floor+0x46>
 800aaa2:	4c2d      	ldr	r4, [pc, #180]	; (800ab58 <floor+0xf8>)
 800aaa4:	2500      	movs	r5, #0
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	e025      	b.n	800aaf8 <floor+0x98>
 800aaac:	4f2b      	ldr	r7, [pc, #172]	; (800ab5c <floor+0xfc>)
 800aaae:	4137      	asrs	r7, r6
 800aab0:	ea01 0307 	and.w	r3, r1, r7
 800aab4:	4303      	orrs	r3, r0
 800aab6:	d01f      	beq.n	800aaf8 <floor+0x98>
 800aab8:	a325      	add	r3, pc, #148	; (adr r3, 800ab50 <floor+0xf0>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fbdd 	bl	800027c <__adddf3>
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	f7f6 f81f 	bl	8000b08 <__aeabi_dcmpgt>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d0eb      	beq.n	800aaa6 <floor+0x46>
 800aace:	2c00      	cmp	r4, #0
 800aad0:	bfbe      	ittt	lt
 800aad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aad6:	fa43 f606 	asrlt.w	r6, r3, r6
 800aada:	19a4      	addlt	r4, r4, r6
 800aadc:	ea24 0407 	bic.w	r4, r4, r7
 800aae0:	2500      	movs	r5, #0
 800aae2:	e7e0      	b.n	800aaa6 <floor+0x46>
 800aae4:	2e33      	cmp	r6, #51	; 0x33
 800aae6:	dd0b      	ble.n	800ab00 <floor+0xa0>
 800aae8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aaec:	d104      	bne.n	800aaf8 <floor+0x98>
 800aaee:	ee10 2a10 	vmov	r2, s0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	f7f5 fbc2 	bl	800027c <__adddf3>
 800aaf8:	ec41 0b10 	vmov	d0, r0, r1
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ab04:	f04f 33ff 	mov.w	r3, #4294967295
 800ab08:	fa23 f707 	lsr.w	r7, r3, r7
 800ab0c:	4207      	tst	r7, r0
 800ab0e:	d0f3      	beq.n	800aaf8 <floor+0x98>
 800ab10:	a30f      	add	r3, pc, #60	; (adr r3, 800ab50 <floor+0xf0>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fbb1 	bl	800027c <__adddf3>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f7f5 fff3 	bl	8000b08 <__aeabi_dcmpgt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0bf      	beq.n	800aaa6 <floor+0x46>
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	da02      	bge.n	800ab30 <floor+0xd0>
 800ab2a:	2e14      	cmp	r6, #20
 800ab2c:	d103      	bne.n	800ab36 <floor+0xd6>
 800ab2e:	3401      	adds	r4, #1
 800ab30:	ea25 0507 	bic.w	r5, r5, r7
 800ab34:	e7b7      	b.n	800aaa6 <floor+0x46>
 800ab36:	2301      	movs	r3, #1
 800ab38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ab3c:	fa03 f606 	lsl.w	r6, r3, r6
 800ab40:	4435      	add	r5, r6
 800ab42:	4545      	cmp	r5, r8
 800ab44:	bf38      	it	cc
 800ab46:	18e4      	addcc	r4, r4, r3
 800ab48:	e7f2      	b.n	800ab30 <floor+0xd0>
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	462c      	mov	r4, r5
 800ab4e:	e7aa      	b.n	800aaa6 <floor+0x46>
 800ab50:	8800759c 	.word	0x8800759c
 800ab54:	7e37e43c 	.word	0x7e37e43c
 800ab58:	bff00000 	.word	0xbff00000
 800ab5c:	000fffff 	.word	0x000fffff

0800ab60 <round>:
 800ab60:	ec51 0b10 	vmov	r0, r1, d0
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800ab6a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800ab6e:	2c13      	cmp	r4, #19
 800ab70:	ee10 2a10 	vmov	r2, s0
 800ab74:	460b      	mov	r3, r1
 800ab76:	dc19      	bgt.n	800abac <round+0x4c>
 800ab78:	2c00      	cmp	r4, #0
 800ab7a:	da09      	bge.n	800ab90 <round+0x30>
 800ab7c:	3401      	adds	r4, #1
 800ab7e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ab82:	d103      	bne.n	800ab8c <round+0x2c>
 800ab84:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ab88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	e028      	b.n	800abe2 <round+0x82>
 800ab90:	4d15      	ldr	r5, [pc, #84]	; (800abe8 <round+0x88>)
 800ab92:	4125      	asrs	r5, r4
 800ab94:	ea01 0605 	and.w	r6, r1, r5
 800ab98:	4332      	orrs	r2, r6
 800ab9a:	d00e      	beq.n	800abba <round+0x5a>
 800ab9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aba0:	fa42 f404 	asr.w	r4, r2, r4
 800aba4:	4423      	add	r3, r4
 800aba6:	ea23 0305 	bic.w	r3, r3, r5
 800abaa:	e7ef      	b.n	800ab8c <round+0x2c>
 800abac:	2c33      	cmp	r4, #51	; 0x33
 800abae:	dd07      	ble.n	800abc0 <round+0x60>
 800abb0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800abb4:	d101      	bne.n	800abba <round+0x5a>
 800abb6:	f7f5 fb61 	bl	800027c <__adddf3>
 800abba:	ec41 0b10 	vmov	d0, r0, r1
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800abc4:	f04f 35ff 	mov.w	r5, #4294967295
 800abc8:	40f5      	lsrs	r5, r6
 800abca:	4228      	tst	r0, r5
 800abcc:	d0f5      	beq.n	800abba <round+0x5a>
 800abce:	2101      	movs	r1, #1
 800abd0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800abd4:	fa01 f404 	lsl.w	r4, r1, r4
 800abd8:	1912      	adds	r2, r2, r4
 800abda:	bf28      	it	cs
 800abdc:	185b      	addcs	r3, r3, r1
 800abde:	ea22 0205 	bic.w	r2, r2, r5
 800abe2:	4619      	mov	r1, r3
 800abe4:	4610      	mov	r0, r2
 800abe6:	e7e8      	b.n	800abba <round+0x5a>
 800abe8:	000fffff 	.word	0x000fffff

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
